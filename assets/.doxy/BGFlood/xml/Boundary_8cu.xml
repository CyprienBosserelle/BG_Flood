<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="Boundary_8cu" kind="file" language="C++">
    <compoundname>Boundary.cu</compoundname>
    <includes refid="Boundary_8h" local="yes">Boundary.h</includes>
    <incdepgraph>
      <node id="26">
        <label>Arrays.h</label>
        <link refid="Arrays_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/Boundary.cu</label>
        <link refid="Boundary_8cu"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Boundary.h</label>
        <link refid="Boundary_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>ConserveElevation.h</label>
        <link refid="ConserveElevation_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>Forcing.h</label>
        <link refid="Forcing_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>General.h</label>
        <link refid="General_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>Gradients.h</label>
        <link refid="Gradients_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>GridManip.h</label>
        <link refid="GridManip_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>Halo.h</label>
        <link refid="Halo_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>InitEvolv.h</label>
        <link refid="InitEvolv_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>InitialConditions.h</label>
        <link refid="InitialConditions_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>Input.h</label>
        <link refid="Input_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>Kurganov.h</label>
        <link refid="Kurganov_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>MemManagement.h</label>
        <link refid="MemManagement_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>Mesh.h</label>
        <link refid="Mesh_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>Param.h</label>
        <link refid="Param_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>Poly.h</label>
        <link refid="Poly_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>ReadForcing.h</label>
        <link refid="ReadForcing_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>ReadInput.h</label>
        <link refid="ReadInput_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>Read_netcdf.h</label>
        <link refid="Read__netcdf_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>Setup_GPU.h</label>
        <link refid="Setup__GPU_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>Spherical.h</label>
        <link refid="Spherical_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>Updateforcing.h</label>
        <link refid="Updateforcing_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>Util_CPU.h</label>
        <link refid="Util__CPU_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>Write_netcdf.h</label>
        <link refid="Write__netcdf_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>Write_txtlog.h</label>
        <link refid="Write__txtlog_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>utctime.h</label>
        <link refid="utctime_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>algorithm</label>
      </node>
      <node id="10">
        <label>chrono</label>
      </node>
      <node id="9">
        <label>cmath</label>
      </node>
      <node id="11">
        <label>ctime</label>
      </node>
      <node id="4">
        <label>cuda_runtime.h</label>
      </node>
      <node id="5">
        <label>device_launch_parameters.h</label>
      </node>
      <node id="19">
        <label>fstream</label>
      </node>
      <node id="18">
        <label>iomanip</label>
      </node>
      <node id="17">
        <label>iostream</label>
      </node>
      <node id="21">
        <label>limits</label>
      </node>
      <node id="14">
        <label>map</label>
      </node>
      <node id="8">
        <label>math.h</label>
      </node>
      <node id="15">
        <label>netcdf.h</label>
      </node>
      <node id="20">
        <label>sstream</label>
      </node>
      <node id="6">
        <label>stdio.h</label>
      </node>
      <node id="7">
        <label>stdlib.h</label>
      </node>
      <node id="12">
        <label>string</label>
      </node>
      <node id="22">
        <label>thread</label>
      </node>
      <node id="13">
        <label>vector</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="Boundary_8cu_1a1070c3a02b0f106ebfba5aebebe8425d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Flowbnd</definition>
        <argsstring>(Param XParam, Loop&lt; T &gt; &amp;XLoop, BlockP&lt; T &gt; XBlock, bndparam side, DynForcingP&lt; float &gt; Atmp, EvolvingP&lt; T &gt; XEv)</argsstring>
        <name>Flowbnd</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structLoop" kindref="compound">Loop</ref>&lt; T &gt; &amp;</type>
          <declname>XLoop</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; T &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="classbndparam" kindref="compound">bndparam</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="structDynForcingP" kindref="compound">DynForcingP</ref>&lt; float &gt;</type>
          <declname>Atmp</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; T &gt;</type>
          <declname>XEv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="4" column="18" bodyfile="src/Boundary.cu" bodystart="4" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1a37589032c1d0d3f319a86d01a4822494" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void Flowbnd&lt; float &gt;</definition>
        <argsstring>(Param XParam, Loop&lt; float &gt; &amp;XLoop, BlockP&lt; float &gt; XBlock, bndparam side, DynForcingP&lt; float &gt; Atmp, EvolvingP&lt; float &gt; XEv)</argsstring>
        <name>Flowbnd&lt; float &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structLoop" kindref="compound">Loop</ref>&lt; float &gt; &amp;</type>
          <declname>XLoop</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; float &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="classbndparam" kindref="compound">bndparam</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="structDynForcingP" kindref="compound">DynForcingP</ref>&lt; float &gt;</type>
          <declname>Atmp</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; float &gt;</type>
          <declname>XEv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="78" column="10" declfile="src/Boundary.cu" declline="78" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1a315c475dbfa5504f77ba3ee347b13c55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void Flowbnd&lt; double &gt;</definition>
        <argsstring>(Param XParam, Loop&lt; double &gt; &amp;XLoop, BlockP&lt; double &gt; XBlock, bndparam side, DynForcingP&lt; float &gt; Atmp, EvolvingP&lt; double &gt; XEv)</argsstring>
        <name>Flowbnd&lt; double &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structLoop" kindref="compound">Loop</ref>&lt; double &gt; &amp;</type>
          <declname>XLoop</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; double &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="classbndparam" kindref="compound">bndparam</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="structDynForcingP" kindref="compound">DynForcingP</ref>&lt; float &gt;</type>
          <declname>Atmp</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; double &gt;</type>
          <declname>XEv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="79" column="10" declfile="src/Boundary.cu" declline="79" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1a493b3a9d491a55b39aeb7edfe53a5ef8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void FlowbndFlux</definition>
        <argsstring>(Param XParam, double totaltime, BlockP&lt; T &gt; XBlock, bndsegment bndseg, DynForcingP&lt; float &gt; Atmp, EvolvingP&lt; T &gt; XEv, FluxP&lt; T &gt; XFlux)</argsstring>
        <name>FlowbndFlux</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type>double</type>
          <declname>totaltime</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; T &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="classbndsegment" kindref="compound">bndsegment</ref></type>
          <declname>bndseg</declname>
        </param>
        <param>
          <type><ref refid="structDynForcingP" kindref="compound">DynForcingP</ref>&lt; float &gt;</type>
          <declname>Atmp</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; T &gt;</type>
          <declname>XEv</declname>
        </param>
        <param>
          <type><ref refid="structFluxP" kindref="compound">FluxP</ref>&lt; T &gt;</type>
          <declname>XFlux</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="81" column="18" bodyfile="src/Boundary.cu" bodystart="81" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1ac0ab5c3c4227600e58b3c53dbeacde01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void FlowbndFlux&lt; float &gt;</definition>
        <argsstring>(Param XParam, double totaltime, BlockP&lt; float &gt; XBlock, bndsegment bndseg, DynForcingP&lt; float &gt; Atmp, EvolvingP&lt; float &gt; XEv, FluxP&lt; float &gt; XFlux)</argsstring>
        <name>FlowbndFlux&lt; float &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type>double</type>
          <declname>totaltime</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; float &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="classbndsegment" kindref="compound">bndsegment</ref></type>
          <declname>bndseg</declname>
        </param>
        <param>
          <type><ref refid="structDynForcingP" kindref="compound">DynForcingP</ref>&lt; float &gt;</type>
          <declname>Atmp</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; float &gt;</type>
          <declname>XEv</declname>
        </param>
        <param>
          <type><ref refid="structFluxP" kindref="compound">FluxP</ref>&lt; float &gt;</type>
          <declname>XFlux</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="169" column="10" declfile="src/Boundary.cu" declline="169" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1a11aaff3ad77e3538c7ef7759bd070fc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void FlowbndFlux&lt; double &gt;</definition>
        <argsstring>(Param XParam, double totaltime, BlockP&lt; double &gt; XBlock, bndsegment bndseg, DynForcingP&lt; float &gt; Atmp, EvolvingP&lt; double &gt; XEv, FluxP&lt; double &gt; XFlux)</argsstring>
        <name>FlowbndFlux&lt; double &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type>double</type>
          <declname>totaltime</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; double &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="classbndsegment" kindref="compound">bndsegment</ref></type>
          <declname>bndseg</declname>
        </param>
        <param>
          <type><ref refid="structDynForcingP" kindref="compound">DynForcingP</ref>&lt; float &gt;</type>
          <declname>Atmp</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; double &gt;</type>
          <declname>XEv</declname>
        </param>
        <param>
          <type><ref refid="structFluxP" kindref="compound">FluxP</ref>&lt; double &gt;</type>
          <declname>XFlux</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="170" column="10" declfile="src/Boundary.cu" declline="170" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1aaec6c50a87ec1475242fd2636570993f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void FlowbndFluxML</definition>
        <argsstring>(Param XParam, double totaltime, BlockP&lt; T &gt; XBlock, bndsegment bndseg, DynForcingP&lt; float &gt; Atmp, EvolvingP&lt; T &gt; XEv, FluxMLP&lt; T &gt; XFlux)</argsstring>
        <name>FlowbndFluxML</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type>double</type>
          <declname>totaltime</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; T &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="classbndsegment" kindref="compound">bndsegment</ref></type>
          <declname>bndseg</declname>
        </param>
        <param>
          <type><ref refid="structDynForcingP" kindref="compound">DynForcingP</ref>&lt; float &gt;</type>
          <declname>Atmp</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; T &gt;</type>
          <declname>XEv</declname>
        </param>
        <param>
          <type><ref refid="structFluxMLP" kindref="compound">FluxMLP</ref>&lt; T &gt;</type>
          <declname>XFlux</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="172" column="18" bodyfile="src/Boundary.cu" bodystart="172" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1acf03c6171ed451cb8d0bf23c4cd3a4ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void FlowbndFluxML&lt; float &gt;</definition>
        <argsstring>(Param XParam, double totaltime, BlockP&lt; float &gt; XBlock, bndsegment bndseg, DynForcingP&lt; float &gt; Atmp, EvolvingP&lt; float &gt; XEv, FluxMLP&lt; float &gt; XFlux)</argsstring>
        <name>FlowbndFluxML&lt; float &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type>double</type>
          <declname>totaltime</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; float &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="classbndsegment" kindref="compound">bndsegment</ref></type>
          <declname>bndseg</declname>
        </param>
        <param>
          <type><ref refid="structDynForcingP" kindref="compound">DynForcingP</ref>&lt; float &gt;</type>
          <declname>Atmp</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; float &gt;</type>
          <declname>XEv</declname>
        </param>
        <param>
          <type><ref refid="structFluxMLP" kindref="compound">FluxMLP</ref>&lt; float &gt;</type>
          <declname>XFlux</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="256" column="10" declfile="src/Boundary.cu" declline="256" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1aa29892c52f28a5a119a694fe7e26c265" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void FlowbndFluxML&lt; double &gt;</definition>
        <argsstring>(Param XParam, double totaltime, BlockP&lt; double &gt; XBlock, bndsegment bndseg, DynForcingP&lt; float &gt; Atmp, EvolvingP&lt; double &gt; XEv, FluxMLP&lt; double &gt; XFlux)</argsstring>
        <name>FlowbndFluxML&lt; double &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type>double</type>
          <declname>totaltime</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; double &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="classbndsegment" kindref="compound">bndsegment</ref></type>
          <declname>bndseg</declname>
        </param>
        <param>
          <type><ref refid="structDynForcingP" kindref="compound">DynForcingP</ref>&lt; float &gt;</type>
          <declname>Atmp</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; double &gt;</type>
          <declname>XEv</declname>
        </param>
        <param>
          <type><ref refid="structFluxMLP" kindref="compound">FluxMLP</ref>&lt; double &gt;</type>
          <declname>XFlux</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="257" column="10" declfile="src/Boundary.cu" declline="257" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1ac3ce7007bbafbb85ac1fbf844678fa16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void FlowbndFluxold</definition>
        <argsstring>(Param XParam, double totaltime, BlockP&lt; T &gt; XBlock, bndparam side, DynForcingP&lt; float &gt; Atmp, EvolvingP&lt; T &gt; XEv, FluxP&lt; T &gt; XFlux)</argsstring>
        <name>FlowbndFluxold</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type>double</type>
          <declname>totaltime</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; T &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="classbndparam" kindref="compound">bndparam</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="structDynForcingP" kindref="compound">DynForcingP</ref>&lt; float &gt;</type>
          <declname>Atmp</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; T &gt;</type>
          <declname>XEv</declname>
        </param>
        <param>
          <type><ref refid="structFluxP" kindref="compound">FluxP</ref>&lt; T &gt;</type>
          <declname>XFlux</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="259" column="18" bodyfile="src/Boundary.cu" bodystart="259" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1a954e350716ce4cb0be85c9b4a0b0f583" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void FlowbndFluxold&lt; float &gt;</definition>
        <argsstring>(Param XParam, double totaltime, BlockP&lt; float &gt; XBlock, bndparam side, DynForcingP&lt; float &gt; Atmp, EvolvingP&lt; float &gt; XEv, FluxP&lt; float &gt; XFlux)</argsstring>
        <name>FlowbndFluxold&lt; float &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type>double</type>
          <declname>totaltime</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; float &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="classbndparam" kindref="compound">bndparam</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="structDynForcingP" kindref="compound">DynForcingP</ref>&lt; float &gt;</type>
          <declname>Atmp</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; float &gt;</type>
          <declname>XEv</declname>
        </param>
        <param>
          <type><ref refid="structFluxP" kindref="compound">FluxP</ref>&lt; float &gt;</type>
          <declname>XFlux</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="319" column="10" declfile="src/Boundary.cu" declline="319" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1a1558b45fb91ae76ca99bb5d024f47891" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void FlowbndFluxold&lt; double &gt;</definition>
        <argsstring>(Param XParam, double totaltime, BlockP&lt; double &gt; XBlock, bndparam side, DynForcingP&lt; float &gt; Atmp, EvolvingP&lt; double &gt; XEv, FluxP&lt; double &gt; XFlux)</argsstring>
        <name>FlowbndFluxold&lt; double &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type>double</type>
          <declname>totaltime</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; double &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="classbndparam" kindref="compound">bndparam</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="structDynForcingP" kindref="compound">DynForcingP</ref>&lt; float &gt;</type>
          <declname>Atmp</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; double &gt;</type>
          <declname>XEv</declname>
        </param>
        <param>
          <type><ref refid="structFluxP" kindref="compound">FluxP</ref>&lt; double &gt;</type>
          <declname>XFlux</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="320" column="10" declfile="src/Boundary.cu" declline="320" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1ad24f377cb23e38ac40ffce632d0971d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>__global__ void</type>
        <definition>__global__ void bndFluxGPUSide</definition>
        <argsstring>(Param XParam, bndsegmentside side, BlockP&lt; T &gt; XBlock, DynForcingP&lt; float &gt; Atmp, DynForcingP&lt; float &gt; Zsmap, bool uniform, int type, float zsbnd, T taper, T *zs, T *h, T *un, T *ut, T *Fh, T *Fq, T *Ss)</argsstring>
        <name>bndFluxGPUSide</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="classbndsegmentside" kindref="compound">bndsegmentside</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; T &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="structDynForcingP" kindref="compound">DynForcingP</ref>&lt; float &gt;</type>
          <declname>Atmp</declname>
        </param>
        <param>
          <type><ref refid="structDynForcingP" kindref="compound">DynForcingP</ref>&lt; float &gt;</type>
          <declname>Zsmap</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>uniform</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>float</type>
          <declname>zsbnd</declname>
        </param>
        <param>
          <type>T</type>
          <declname>taper</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>zs</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>h</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>un</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>ut</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>Fh</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>Fq</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>Ss</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="322" column="29" bodyfile="src/Boundary.cu" bodystart="322" bodyend="485"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1aedc3560eb11b9c8d2ca9aadcb29e6f00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void bndFluxGPUSideCPU</definition>
        <argsstring>(Param XParam, bndsegmentside side, BlockP&lt; T &gt; XBlock, DynForcingP&lt; float &gt; Atmp, DynForcingP&lt; float &gt; Zsmap, bool uniform, int type, float zsbnd, T taper, T *zs, T *h, T *un, T *ut, T *Fh, T *Fq, T *Ss)</argsstring>
        <name>bndFluxGPUSideCPU</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="classbndsegmentside" kindref="compound">bndsegmentside</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; T &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="structDynForcingP" kindref="compound">DynForcingP</ref>&lt; float &gt;</type>
          <declname>Atmp</declname>
        </param>
        <param>
          <type><ref refid="structDynForcingP" kindref="compound">DynForcingP</ref>&lt; float &gt;</type>
          <declname>Zsmap</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>uniform</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>float</type>
          <declname>zsbnd</declname>
        </param>
        <param>
          <type>T</type>
          <declname>taper</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>zs</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>h</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>un</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>ut</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>Fh</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>Fq</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>Ss</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="488" column="18" bodyfile="src/Boundary.cu" bodystart="488" bodyend="646"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1a994c0a68a28b55ac136fa3fd105c5db8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>__global__ void</type>
        <definition>__global__ void bndGPU</definition>
        <argsstring>(Param XParam, bndparam side, BlockP&lt; T &gt; XBlock, DynForcingP&lt; float &gt; Atmp, float itime, T *zs, T *h, T *un, T *ut)</argsstring>
        <name>bndGPU</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="classbndparam" kindref="compound">bndparam</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; T &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="structDynForcingP" kindref="compound">DynForcingP</ref>&lt; float &gt;</type>
          <declname>Atmp</declname>
        </param>
        <param>
          <type>float</type>
          <declname>itime</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>zs</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>h</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>un</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>ut</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="648" column="29" bodyfile="src/Boundary.cu" bodystart="648" bodyend="770"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1ad6853f2419748f3213081096cab6379e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template __global__ void</type>
        <definition>template __global__ void bndGPU&lt; float &gt;</definition>
        <argsstring>(Param XParam, bndparam side, BlockP&lt; float &gt; XBlock, DynForcingP&lt; float &gt; Atmp, float itime, float *zs, float *h, float *un, float *ut)</argsstring>
        <name>bndGPU&lt; float &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="classbndparam" kindref="compound">bndparam</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; float &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="structDynForcingP" kindref="compound">DynForcingP</ref>&lt; float &gt;</type>
          <declname>Atmp</declname>
        </param>
        <param>
          <type>float</type>
          <declname>itime</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>zs</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>h</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>un</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>ut</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="771" column="21" declfile="src/Boundary.cu" declline="771" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1a3e97e34703bb8a9b1b1ab62a46a8e92a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template __global__ void</type>
        <definition>template __global__ void bndGPU&lt; double &gt;</definition>
        <argsstring>(Param XParam, bndparam side, BlockP&lt; double &gt; XBlock, DynForcingP&lt; float &gt; Atmp, float itime, double *zs, double *h, double *un, double *ut)</argsstring>
        <name>bndGPU&lt; double &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="classbndparam" kindref="compound">bndparam</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; double &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="structDynForcingP" kindref="compound">DynForcingP</ref>&lt; float &gt;</type>
          <declname>Atmp</declname>
        </param>
        <param>
          <type>float</type>
          <declname>itime</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>zs</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>h</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>un</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ut</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="772" column="21" declfile="src/Boundary.cu" declline="772" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1a31da8c718f61d1febaf765248e0c73a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>__host__ void</type>
        <definition>__host__ void bndCPU</definition>
        <argsstring>(Param XParam, bndparam side, BlockP&lt; T &gt; XBlock, std::vector&lt; double &gt; zsbndvec, std::vector&lt; double &gt; uubndvec, std::vector&lt; double &gt; vvbndvec, DynForcingP&lt; float &gt; Atmp, T *zs, T *h, T *un, T *ut)</argsstring>
        <name>bndCPU</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="classbndparam" kindref="compound">bndparam</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; T &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>zsbndvec</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>uubndvec</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>vvbndvec</declname>
        </param>
        <param>
          <type><ref refid="structDynForcingP" kindref="compound">DynForcingP</ref>&lt; float &gt;</type>
          <declname>Atmp</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>zs</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>h</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>un</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>ut</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="774" column="27" bodyfile="src/Boundary.cu" bodystart="774" bodyend="919"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1a1cefa5da87750ab0c151f50536135f6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template __host__ void</type>
        <definition>template __host__ void bndCPU&lt; float &gt;</definition>
        <argsstring>(Param XParam, bndparam side, BlockP&lt; float &gt; XBlock, std::vector&lt; double &gt; zsbndvec, std::vector&lt; double &gt; uubndvec, std::vector&lt; double &gt; vvbndvec, DynForcingP&lt; float &gt; Atmp, float *zs, float *h, float *un, float *ut)</argsstring>
        <name>bndCPU&lt; float &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="classbndparam" kindref="compound">bndparam</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; float &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>zsbndvec</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>uubndvec</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>vvbndvec</declname>
        </param>
        <param>
          <type><ref refid="structDynForcingP" kindref="compound">DynForcingP</ref>&lt; float &gt;</type>
          <declname>Atmp</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>zs</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>h</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>un</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>ut</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="920" column="19" declfile="src/Boundary.cu" declline="920" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1a53826614c94ad3ab18e20d3ab09826f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template __host__ void</type>
        <definition>template __host__ void bndCPU&lt; double &gt;</definition>
        <argsstring>(Param XParam, bndparam side, BlockP&lt; double &gt; XBlock, std::vector&lt; double &gt; zsbndvec, std::vector&lt; double &gt; uubndvec, std::vector&lt; double &gt; vvbndvec, DynForcingP&lt; float &gt; Atmp, double *zs, double *h, double *un, double *ut)</argsstring>
        <name>bndCPU&lt; double &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="classbndparam" kindref="compound">bndparam</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; double &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>zsbndvec</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>uubndvec</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
          <declname>vvbndvec</declname>
        </param>
        <param>
          <type><ref refid="structDynForcingP" kindref="compound">DynForcingP</ref>&lt; float &gt;</type>
          <declname>Atmp</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>zs</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>h</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>un</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ut</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="921" column="19" declfile="src/Boundary.cu" declline="921" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1aa023b0e53092dd1d34728511f1f93005" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>__host__ void</type>
        <definition>__host__ void maskbnd</definition>
        <argsstring>(Param XParam, BlockP&lt; T &gt; XBlock, EvolvingP&lt; T &gt; Xev, T *zb)</argsstring>
        <name>maskbnd</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; T &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; T &gt;</type>
          <declname>Xev</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>zb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="926" column="27" bodyfile="src/Boundary.cu" bodystart="926" bodyend="1090"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1a3081dfcff89ccb9c71363ce91d1c4025" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template __host__ void</type>
        <definition>template __host__ void maskbnd&lt; float &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; float &gt; XBlock, EvolvingP&lt; float &gt; Xev, float *zb)</argsstring>
        <name>maskbnd&lt; float &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; float &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; float &gt;</type>
          <declname>Xev</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>zb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="1091" column="19" declfile="src/Boundary.cu" declline="1091" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1a5a40a0afa79be14f830fbca47aa1d0e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template __host__ void</type>
        <definition>template __host__ void maskbnd&lt; double &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; double &gt; XBlock, EvolvingP&lt; double &gt; Xev, double *zb)</argsstring>
        <name>maskbnd&lt; double &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; double &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; double &gt;</type>
          <declname>Xev</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>zb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="1092" column="19" declfile="src/Boundary.cu" declline="1092" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1acdef573f7f2d65d3fe3f215342377a8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>__global__ void</type>
        <definition>__global__ void maskbndGPUleft</definition>
        <argsstring>(Param XParam, BlockP&lt; T &gt; XBlock, EvolvingP&lt; T &gt; Xev, T *zb)</argsstring>
        <name>maskbndGPUleft</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; T &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; T &gt;</type>
          <declname>Xev</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>zb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="1095" column="29" bodyfile="src/Boundary.cu" bodystart="1095" bodyend="1159"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1a4330c40dbbb5c8f8eb11a7f86f7912fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template __global__ void</type>
        <definition>template __global__ void maskbndGPUleft&lt; float &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; float &gt; XBlock, EvolvingP&lt; float &gt; Xev, float *zb)</argsstring>
        <name>maskbndGPUleft&lt; float &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; float &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; float &gt;</type>
          <declname>Xev</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>zb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="1160" column="21" declfile="src/Boundary.cu" declline="1160" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1a30fa9b8072b094f3576b6bcafc521327" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template __global__ void</type>
        <definition>template __global__ void maskbndGPUleft&lt; double &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; double &gt; XBlock, EvolvingP&lt; double &gt; Xev, double *zb)</argsstring>
        <name>maskbndGPUleft&lt; double &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; double &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; double &gt;</type>
          <declname>Xev</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>zb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="1161" column="21" declfile="src/Boundary.cu" declline="1161" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1a974c3e91252e6886c1577201af2d9136" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>__global__ void</type>
        <definition>__global__ void maskbndGPUFluxleft</definition>
        <argsstring>(Param XParam, BlockP&lt; T &gt; XBlock, EvolvingP&lt; T &gt; Xev, FluxP&lt; T &gt; Flux)</argsstring>
        <name>maskbndGPUFluxleft</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; T &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; T &gt;</type>
          <declname>Xev</declname>
        </param>
        <param>
          <type><ref refid="structFluxP" kindref="compound">FluxP</ref>&lt; T &gt;</type>
          <declname>Flux</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="1164" column="29" bodyfile="src/Boundary.cu" bodystart="1164" bodyend="1234"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1aec573836a5cd110e27870f7096cccca6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template __global__ void</type>
        <definition>template __global__ void maskbndGPUFluxleft&lt; float &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; float &gt; XBlock, EvolvingP&lt; float &gt; Xev, FluxP&lt; float &gt; Flux)</argsstring>
        <name>maskbndGPUFluxleft&lt; float &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; float &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; float &gt;</type>
          <declname>Xev</declname>
        </param>
        <param>
          <type><ref refid="structFluxP" kindref="compound">FluxP</ref>&lt; float &gt;</type>
          <declname>Flux</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="1235" column="21" declfile="src/Boundary.cu" declline="1235" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1a170a91e273566922608bcede6a315cb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template __global__ void</type>
        <definition>template __global__ void maskbndGPUFluxleft&lt; double &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; double &gt; XBlock, EvolvingP&lt; double &gt; Xev, FluxP&lt; double &gt; Flux)</argsstring>
        <name>maskbndGPUFluxleft&lt; double &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; double &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; double &gt;</type>
          <declname>Xev</declname>
        </param>
        <param>
          <type><ref refid="structFluxP" kindref="compound">FluxP</ref>&lt; double &gt;</type>
          <declname>Flux</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="1236" column="21" declfile="src/Boundary.cu" declline="1236" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1aec86c8b6389e6f9ca2e81ab733e58487" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>__global__ void</type>
        <definition>__global__ void maskbndGPUtop</definition>
        <argsstring>(Param XParam, BlockP&lt; T &gt; XBlock, EvolvingP&lt; T &gt; Xev, T *zb)</argsstring>
        <name>maskbndGPUtop</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; T &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; T &gt;</type>
          <declname>Xev</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>zb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="1239" column="29" bodyfile="src/Boundary.cu" bodystart="1239" bodyend="1297"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1a8488838555ea7a9bd1082ae0f6b27ad3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template __global__ void</type>
        <definition>template __global__ void maskbndGPUtop&lt; float &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; float &gt; XBlock, EvolvingP&lt; float &gt; Xev, float *zb)</argsstring>
        <name>maskbndGPUtop&lt; float &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; float &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; float &gt;</type>
          <declname>Xev</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>zb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="1298" column="21" declfile="src/Boundary.cu" declline="1298" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1a95cd6820f09eee3ed5c710da74e619d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template __global__ void</type>
        <definition>template __global__ void maskbndGPUtop&lt; double &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; double &gt; XBlock, EvolvingP&lt; double &gt; Xev, double *zb)</argsstring>
        <name>maskbndGPUtop&lt; double &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; double &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; double &gt;</type>
          <declname>Xev</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>zb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="1299" column="21" declfile="src/Boundary.cu" declline="1299" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1ace0711ff24a69d91c4b3475d956f80b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>__global__ void</type>
        <definition>__global__ void maskbndGPUFluxtop</definition>
        <argsstring>(Param XParam, BlockP&lt; T &gt; XBlock, FluxP&lt; T &gt; Flux)</argsstring>
        <name>maskbndGPUFluxtop</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; T &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="structFluxP" kindref="compound">FluxP</ref>&lt; T &gt;</type>
          <declname>Flux</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="1301" column="29" bodyfile="src/Boundary.cu" bodystart="1301" bodyend="1345"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1a654b67d7cee17bf8d8939865bf03ac6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template __global__ void</type>
        <definition>template __global__ void maskbndGPUFluxtop&lt; float &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; float &gt; XBlock, FluxP&lt; float &gt; Flux)</argsstring>
        <name>maskbndGPUFluxtop&lt; float &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; float &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="structFluxP" kindref="compound">FluxP</ref>&lt; float &gt;</type>
          <declname>Flux</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="1346" column="21" declfile="src/Boundary.cu" declline="1346" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1a470de27e34ed5ad566af460cda5f2f16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template __global__ void</type>
        <definition>template __global__ void maskbndGPUFluxtop&lt; double &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; double &gt; XBlock, FluxP&lt; double &gt; Flux)</argsstring>
        <name>maskbndGPUFluxtop&lt; double &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; double &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="structFluxP" kindref="compound">FluxP</ref>&lt; double &gt;</type>
          <declname>Flux</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="1347" column="21" declfile="src/Boundary.cu" declline="1347" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1ac1a6983a856cbc02072948f3d3fad1ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>__global__ void</type>
        <definition>__global__ void maskbndGPUright</definition>
        <argsstring>(Param XParam, BlockP&lt; T &gt; XBlock, EvolvingP&lt; T &gt; Xev, T *zb)</argsstring>
        <name>maskbndGPUright</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; T &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; T &gt;</type>
          <declname>Xev</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>zb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="1349" column="29" bodyfile="src/Boundary.cu" bodystart="1349" bodyend="1408"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1aca2c46fb2d6e2704b7ed53535fdf44c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template __global__ void</type>
        <definition>template __global__ void maskbndGPUright&lt; float &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; float &gt; XBlock, EvolvingP&lt; float &gt; Xev, float *zb)</argsstring>
        <name>maskbndGPUright&lt; float &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; float &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; float &gt;</type>
          <declname>Xev</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>zb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="1409" column="21" declfile="src/Boundary.cu" declline="1409" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1a6dcf7291e136c1fc8decef3795084aee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template __global__ void</type>
        <definition>template __global__ void maskbndGPUright&lt; double &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; double &gt; XBlock, EvolvingP&lt; double &gt; Xev, double *zb)</argsstring>
        <name>maskbndGPUright&lt; double &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; double &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; double &gt;</type>
          <declname>Xev</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>zb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="1410" column="21" declfile="src/Boundary.cu" declline="1410" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1a1b98408b87883d4ddfbbbd8254ae8d7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>__global__ void</type>
        <definition>__global__ void maskbndGPUFluxright</definition>
        <argsstring>(Param XParam, BlockP&lt; T &gt; XBlock, FluxP&lt; T &gt; Flux)</argsstring>
        <name>maskbndGPUFluxright</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; T &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="structFluxP" kindref="compound">FluxP</ref>&lt; T &gt;</type>
          <declname>Flux</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="1413" column="29" bodyfile="src/Boundary.cu" bodystart="1413" bodyend="1458"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1a136be0025a260ad46637c0d4a5ce32f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template __global__ void</type>
        <definition>template __global__ void maskbndGPUFluxright&lt; float &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; float &gt; XBlock, FluxP&lt; float &gt; Flux)</argsstring>
        <name>maskbndGPUFluxright&lt; float &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; float &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="structFluxP" kindref="compound">FluxP</ref>&lt; float &gt;</type>
          <declname>Flux</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="1459" column="21" declfile="src/Boundary.cu" declline="1459" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1af0ddb38772d134adf732590172f77fbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template __global__ void</type>
        <definition>template __global__ void maskbndGPUFluxright&lt; double &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; double &gt; XBlock, FluxP&lt; double &gt; Flux)</argsstring>
        <name>maskbndGPUFluxright&lt; double &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; double &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="structFluxP" kindref="compound">FluxP</ref>&lt; double &gt;</type>
          <declname>Flux</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="1460" column="21" declfile="src/Boundary.cu" declline="1460" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1a91a99b6f920543db1cdd58ed166eab2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>__global__ void</type>
        <definition>__global__ void maskbndGPUbot</definition>
        <argsstring>(Param XParam, BlockP&lt; T &gt; XBlock, EvolvingP&lt; T &gt; Xev, T *zb)</argsstring>
        <name>maskbndGPUbot</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; T &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; T &gt;</type>
          <declname>Xev</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>zb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="1462" column="29" bodyfile="src/Boundary.cu" bodystart="1462" bodyend="1522"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1a16c7c2620debad38b04bd508a1a2cdb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template __global__ void</type>
        <definition>template __global__ void maskbndGPUbot&lt; float &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; float &gt; XBlock, EvolvingP&lt; float &gt; Xev, float *zb)</argsstring>
        <name>maskbndGPUbot&lt; float &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; float &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; float &gt;</type>
          <declname>Xev</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>zb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="1523" column="21" declfile="src/Boundary.cu" declline="1523" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1ad8d985e991a0558539d31b3b0762d15e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template __global__ void</type>
        <definition>template __global__ void maskbndGPUbot&lt; double &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; double &gt; XBlock, EvolvingP&lt; double &gt; Xev, double *zb)</argsstring>
        <name>maskbndGPUbot&lt; double &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; double &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; double &gt;</type>
          <declname>Xev</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>zb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="1524" column="21" declfile="src/Boundary.cu" declline="1524" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1ad76dc3a9c37690c1c68e3ed0c8761d80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>__global__ void</type>
        <definition>__global__ void maskbndGPUFluxbot</definition>
        <argsstring>(Param XParam, BlockP&lt; T &gt; XBlock, FluxP&lt; T &gt; Flux)</argsstring>
        <name>maskbndGPUFluxbot</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; T &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="structFluxP" kindref="compound">FluxP</ref>&lt; T &gt;</type>
          <declname>Flux</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="1526" column="29" bodyfile="src/Boundary.cu" bodystart="1526" bodyend="1569"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1ac01b5cb40b16e16fdd66d09f446359a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template __global__ void</type>
        <definition>template __global__ void maskbndGPUFluxbot&lt; float &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; float &gt; XBlock, FluxP&lt; float &gt; Flux)</argsstring>
        <name>maskbndGPUFluxbot&lt; float &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; float &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="structFluxP" kindref="compound">FluxP</ref>&lt; float &gt;</type>
          <declname>Flux</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="1570" column="21" declfile="src/Boundary.cu" declline="1570" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1aa02d42f32e786dadfe180c1a983ffa6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template __global__ void</type>
        <definition>template __global__ void maskbndGPUFluxbot&lt; double &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; double &gt; XBlock, FluxP&lt; double &gt; Flux)</argsstring>
        <name>maskbndGPUFluxbot&lt; double &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; double &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="structFluxP" kindref="compound">FluxP</ref>&lt; double &gt;</type>
          <declname>Flux</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="1571" column="21" declfile="src/Boundary.cu" declline="1571" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1ad433f7b7fe383758a05a3788eeddf488" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__device__ __host__ void</type>
        <definition>__device__ __host__ void findmaskside</definition>
        <argsstring>(int side, bool &amp;isleftbot, bool &amp;islefttop, bool &amp;istopleft, bool &amp;istopright, bool &amp;isrighttop, bool &amp;isrightbot, bool &amp;isbotright, bool &amp;isbotleft)</argsstring>
        <name>findmaskside</name>
        <param>
          <type>int</type>
          <declname>side</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>isleftbot</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>islefttop</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>istopleft</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>istopright</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>isrighttop</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>isrightbot</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>isbotright</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>isbotleft</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="1573" column="26" bodyfile="src/Boundary.cu" bodystart="1573" bodyend="1595"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1ac7033b2e3bb1ce6a37421d932dc2c9f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>__device__ __host__ void</type>
        <definition>__device__ __host__ void halowall</definition>
        <argsstring>(T zsinside, T &amp;un, T &amp;ut, T &amp;zs, T &amp;h, T &amp;zb)</argsstring>
        <name>halowall</name>
        <param>
          <type>T</type>
          <declname>zsinside</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>un</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>ut</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>zs</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>zb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="1598" column="38" bodyfile="src/Boundary.cu" bodystart="1598" bodyend="1608"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1ac038c08cc0c028bbd1495d23e5f9a1f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>__device__ __host__ void</type>
        <definition>__device__ __host__ void noslipbnd</definition>
        <argsstring>(T zsinside, T hinside, T &amp;un, T &amp;ut, T &amp;zs, T &amp;h)</argsstring>
        <name>noslipbnd</name>
        <param>
          <type>T</type>
          <declname>zsinside</declname>
        </param>
        <param>
          <type>T</type>
          <declname>hinside</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>un</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>ut</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>zs</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="1611" column="38" bodyfile="src/Boundary.cu" bodystart="1611" bodyend="1620"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1a11c397504eb338755672f8c9f64862c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>__device__ __host__ void</type>
        <definition>__device__ __host__ void noslipbndQ</definition>
        <argsstring>(T &amp;F, T &amp;G, T &amp;S)</argsstring>
        <name>noslipbndQ</name>
        <param>
          <type>T &amp;</type>
          <declname>F</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>G</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>S</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="1622" column="38" bodyfile="src/Boundary.cu" bodystart="1622" bodyend="1629"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1a526a85506746cc9877baaea4ee1f84ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>__device__ __host__ void</type>
        <definition>__device__ __host__ void ABS1D</definition>
        <argsstring>(T g, T sign, T zsbnd, T zsinside, T hinside, T utbnd, T unbnd, T &amp;un, T &amp;ut, T &amp;zs, T &amp;h)</argsstring>
        <name>ABS1D</name>
        <param>
          <type>T</type>
          <declname>g</declname>
        </param>
        <param>
          <type>T</type>
          <declname>sign</declname>
        </param>
        <param>
          <type>T</type>
          <declname>zsbnd</declname>
        </param>
        <param>
          <type>T</type>
          <declname>zsinside</declname>
        </param>
        <param>
          <type>T</type>
          <declname>hinside</declname>
        </param>
        <param>
          <type>T</type>
          <declname>utbnd</declname>
        </param>
        <param>
          <type>T</type>
          <declname>unbnd</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>un</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>ut</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>zs</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="1632" column="38" bodyfile="src/Boundary.cu" bodystart="1632" bodyend="1641"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1a6ea9bad9e1b37e1db9d6bec65d18259d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>__device__ __host__ void</type>
        <definition>__device__ __host__ void ABS1DQ</definition>
        <argsstring>(T g, T sign, T factime, T facrel, T zs, T zsbnd, T zsinside, T h, T &amp;qmean, T &amp;q, T &amp;G, T &amp;S)</argsstring>
        <name>ABS1DQ</name>
        <param>
          <type>T</type>
          <declname>g</declname>
        </param>
        <param>
          <type>T</type>
          <declname>sign</declname>
        </param>
        <param>
          <type>T</type>
          <declname>factime</declname>
        </param>
        <param>
          <type>T</type>
          <declname>facrel</declname>
        </param>
        <param>
          <type>T</type>
          <declname>zs</declname>
        </param>
        <param>
          <type>T</type>
          <declname>zsbnd</declname>
        </param>
        <param>
          <type>T</type>
          <declname>zsinside</declname>
        </param>
        <param>
          <type>T</type>
          <declname>h</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>qmean</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>G</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>S</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="1643" column="38" bodyfile="src/Boundary.cu" bodystart="1643" bodyend="1677"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1a6cb790e8b942d8f4f32cefb163df9ffd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>__device__ __host__ void</type>
        <definition>__device__ __host__ void Dirichlet1D</definition>
        <argsstring>(T g, T sign, T zsbnd, T zsinside, T hinside, T uninside, T &amp;un, T &amp;ut, T &amp;zs, T &amp;h)</argsstring>
        <name>Dirichlet1D</name>
        <param>
          <type>T</type>
          <declname>g</declname>
        </param>
        <param>
          <type>T</type>
          <declname>sign</declname>
        </param>
        <param>
          <type>T</type>
          <declname>zsbnd</declname>
        </param>
        <param>
          <type>T</type>
          <declname>zsinside</declname>
        </param>
        <param>
          <type>T</type>
          <declname>hinside</declname>
        </param>
        <param>
          <type>T</type>
          <declname>uninside</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>un</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>ut</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>zs</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="1679" column="38" bodyfile="src/Boundary.cu" bodystart="1679" bodyend="1689"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1a7e7c96b473fa73b48210521f9b06958f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>__device__ __host__ void</type>
        <definition>__device__ __host__ void Dirichlet1Q</definition>
        <argsstring>(T g, T sign, T zsbnd, T zsinside, T hinside, T uninside, T &amp;q)</argsstring>
        <name>Dirichlet1Q</name>
        <param>
          <type>T</type>
          <declname>g</declname>
        </param>
        <param>
          <type>T</type>
          <declname>sign</declname>
        </param>
        <param>
          <type>T</type>
          <declname>zsbnd</declname>
        </param>
        <param>
          <type>T</type>
          <declname>zsinside</declname>
        </param>
        <param>
          <type>T</type>
          <declname>hinside</declname>
        </param>
        <param>
          <type>T</type>
          <declname>uninside</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="1691" column="38" bodyfile="src/Boundary.cu" bodystart="1691" bodyend="1703"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1a59cbed77b10dbaf2fa1c4261631b78c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__host__ __device__ int</type>
        <definition>__host__ __device__ int Inside</definition>
        <argsstring>(int halowidth, int blkmemwidth, int isright, int istop, int ix, int iy, int ib)</argsstring>
        <name>Inside</name>
        <param>
          <type>int</type>
          <declname>halowidth</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blkmemwidth</declname>
        </param>
        <param>
          <type>int</type>
          <declname>isright</declname>
        </param>
        <param>
          <type>int</type>
          <declname>istop</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ix</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iy</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ib</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="1843" column="25" bodyfile="src/Boundary.cu" bodystart="1843" bodyend="1877"/>
      </memberdef>
      <memberdef kind="function" id="Boundary_8cu_1a099d9eb334ae46f6467552a50596a196" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool isbnd</definition>
        <argsstring>(int isright, int istop, int blkwidth, int ix, int iy)</argsstring>
        <name>isbnd</name>
        <param>
          <type>int</type>
          <declname>isright</declname>
        </param>
        <param>
          <type>int</type>
          <declname>istop</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blkwidth</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ix</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Boundary.cu" line="1880" column="26" bodyfile="src/Boundary.cu" bodystart="1880" bodyend="1905"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;Boundary.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Flowbnd(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structLoop" kindref="compound">Loop&lt;T&gt;</ref><sp/>&amp;XLoop,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;T&gt;</ref><sp/>XBlock,<sp/><ref refid="classbndparam" kindref="compound">bndparam</ref><sp/>side,<sp/><ref refid="structDynForcingP" kindref="compound">DynForcingP&lt;float&gt;</ref><sp/>Atmp,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;T&gt;</ref><sp/>XEv)</highlight></codeline>
<codeline lineno="5"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/>dim3<sp/>blockDim(XParam.blkwidth,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/>dim3<sp/>gridDimBBND(side.nblk,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/>un,<sp/>*<sp/>ut;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>itime=0.0;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>zsbndleft;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>uubndleft;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>vvbndleft;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(side.isright<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//top<sp/>or<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>un<sp/>=<sp/>XEv.v;<sp/></highlight><highlight class="comment">//u<sp/>normal<sp/>to<sp/>boundary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ut<sp/>=<sp/>XEv.u;<sp/></highlight><highlight class="comment">//u<sp/>tangent<sp/>to<sp/>boundary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>un<sp/>=<sp/>XEv.u;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ut<sp/>=<sp/>XEv.v;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(side.on)</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SLstepinbnd<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>difft<sp/>=<sp/>side.data[SLstepinbnd].time<sp/>-<sp/>XLoop.totaltime;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(difft<sp/>&lt;<sp/>0.0)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SLstepinbnd++;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>difft<sp/>=<sp/>side.data[SLstepinbnd].time<sp/>-<sp/>XLoop.totaltime;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itime<sp/>=<sp/>SLstepinbnd<sp/>-<sp/>1.0<sp/>+<sp/>(XLoop.totaltime<sp/>-<sp/>side.data[SLstepinbnd<sp/>-<sp/>1].time)<sp/>/<sp/>(side.data[SLstepinbnd].time<sp/>-<sp/>side.data[SLstepinbnd<sp/>-<sp/>1].time);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>side.data[SLstepinbnd].wlevs.size();<sp/>n++)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zsbndleft.push_back(interptime(side.data[SLstepinbnd].wlevs[n],<sp/>side.data[SLstepinbnd<sp/>-<sp/>1].wlevs[n],<sp/>side.data[SLstepinbnd].time<sp/>-<sp/>side.data[SLstepinbnd<sp/>-<sp/>1].time,<sp/>XLoop.totaltime<sp/>-<sp/>side.data[SLstepinbnd<sp/>-<sp/>1].time));</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Repeat<sp/>for<sp/>u<sp/>and<sp/>v<sp/>only<sp/>if<sp/>needed<sp/>(otherwise<sp/>values<sp/>may<sp/>not<sp/>exist!)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(side.type<sp/>==<sp/>4)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>side.data[SLstepinbnd].uuvel.size();<sp/>n++)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uubndleft.push_back(interptime(side.data[SLstepinbnd].uuvel[n],<sp/>side.data[SLstepinbnd<sp/>-<sp/>1].uuvel[n],<sp/>side.data[SLstepinbnd].time<sp/>-<sp/>side.data[SLstepinbnd<sp/>-<sp/>1].time,<sp/>XLoop.totaltime<sp/>-<sp/>side.data[SLstepinbnd<sp/>-<sp/>1].time));</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>side.data[SLstepinbnd].vvvel.size();<sp/>n++)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vvbndleft.push_back(interptime(side.data[SLstepinbnd].vvvel[n],<sp/>side.data[SLstepinbnd<sp/>-<sp/>1].vvvel[n],<sp/>side.data[SLstepinbnd].time<sp/>-<sp/>side.data[SLstepinbnd<sp/>-<sp/>1].time,<sp/>XLoop.totaltime<sp/>-<sp/>side.data[SLstepinbnd<sp/>-<sp/>1].time));</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.GPUDEVICE<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bndGPU<sp/>&lt;&lt;&lt;<sp/>gridDimBBND,<sp/>blockDim,<sp/>0<sp/>&gt;&gt;&gt;<sp/>(XParam,<sp/>side,<sp/>XBlock,<sp/>Atmp,<sp/>T(itime),<sp/>XEv.zs,<sp/>XEv.h,<sp/>un,<sp/>ut);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CUDA_CHECK(cudaDeviceSynchronize());</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bndCPU(XParam,<sp/>side,<sp/>XBlock,<sp/>zsbndleft,<sp/>uubndleft,<sp/>vvbndleft,<sp/>Atmp,<sp/>XEv.zs,<sp/>XEv.h,<sp/>un,<sp/>ut);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Flowbnd&lt;float&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structLoop" kindref="compound">Loop&lt;float&gt;</ref>&amp;<sp/>XLoop,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;float&gt;</ref><sp/>XBlock,<sp/><ref refid="classbndparam" kindref="compound">bndparam</ref><sp/>side,<sp/><ref refid="structDynForcingP" kindref="compound">DynForcingP&lt;float&gt;</ref><sp/>Atmp,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;float&gt;</ref><sp/>XEv);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Flowbnd&lt;double&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structLoop" kindref="compound">Loop&lt;double&gt;</ref>&amp;<sp/>XLoop,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;double&gt;</ref><sp/>XBlock,<sp/><ref refid="classbndparam" kindref="compound">bndparam</ref><sp/>side,<sp/><ref refid="structDynForcingP" kindref="compound">DynForcingP&lt;float&gt;</ref><sp/>Atmp,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;double&gt;</ref><sp/>XEv);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FlowbndFlux(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>totaltime,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;T&gt;</ref><sp/>XBlock,<sp/><ref refid="classbndsegment" kindref="compound">bndsegment</ref><sp/>bndseg,<sp/><ref refid="structDynForcingP" kindref="compound">DynForcingP&lt;float&gt;</ref><sp/>Atmp,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;T&gt;</ref><sp/>XEv,<sp/><ref refid="structFluxP" kindref="compound">FluxP&lt;T&gt;</ref><sp/>XFlux)</highlight></codeline>
<codeline lineno="82"><highlight class="normal">{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>dim3<sp/>blockDim(XParam.blkwidth,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>dim3<sp/>gridDimBBNDLeft(bndseg.left.nblk,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>dim3<sp/>gridDimBBNDRight(bndseg.right.nblk,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>dim3<sp/>gridDimBBNDTop(bndseg.top.nblk,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>dim3<sp/>gridDimBBNDBot(bndseg.bot.nblk,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>zsbnd<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!std::isnan(XParam.zsinit))<sp/></highlight><highlight class="comment">//<sp/>apply<sp/>specified<sp/>zsinit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zsbnd<sp/>=<sp/>XParam.zsinit;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Warning<sp/>this<sp/>above<sp/>is<sp/>not<sp/>ideal<sp/>but<sp/>sufficient<sp/>for<sp/>fail<sp/>safe<sp/>of<sp/>testing<sp/>if<sp/>someone<sp/>specifies<sp/>initial<sp/>conditions<sp/>and<sp/>no<sp/>boundary<sp/>for<sp/>a<sp/>type<sp/>3<sp/>they<sp/>should<sp/>be<sp/>in<sp/>trouble</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>taper=T(1.0);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bndseg.on)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.bndtaper<sp/>&gt;<sp/>0.0)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>taper<sp/>=<sp/>min((totaltime<sp/>-<sp/>XParam.inittime)<sp/>/<sp/>XParam.bndtaper,<sp/>1.0);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bndseg.uniform)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SLstepinbnd<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>difft<sp/>=<sp/>bndseg.data[SLstepinbnd].time<sp/>-<sp/>totaltime;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(difft<sp/>&lt;<sp/>0.0)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SLstepinbnd++;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>difft<sp/>=<sp/>bndseg.data[SLstepinbnd].time<sp/>-<sp/>totaltime;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//itime<sp/>=<sp/>SLstepinbnd<sp/>-<sp/>1.0<sp/>+<sp/>(totaltime<sp/>-<sp/>bndseg.data[SLstepinbnd<sp/>-<sp/>1].time)<sp/>/<sp/>(bndseg.data[SLstepinbnd].time<sp/>-<sp/>bndseg.data[SLstepinbnd<sp/>-<sp/>1].time);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zsbnd<sp/>=<sp/>interptime(bndseg.data[SLstepinbnd].wspeed,<sp/>bndseg.data[SLstepinbnd<sp/>-<sp/>1].wspeed,<sp/>bndseg.data[SLstepinbnd].time<sp/>-<sp/>bndseg.data[SLstepinbnd<sp/>-<sp/>1].time,<sp/>totaltime<sp/>-<sp/>bndseg.data[SLstepinbnd<sp/>-<sp/>1].time);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Nothing.<sp/>it<sp/>is<sp/>already<sp/>done<sp/>in<sp/>update<sp/>forcing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bndseg.type<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.GPUDEVICE<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(bndseg.left.nblk<sp/>&gt;<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//template<sp/>&lt;class<sp/>T&gt;<sp/>__global__<sp/>void<sp/>bndFluxGPUSide(Param<sp/>XParam,<sp/>bndsegmentside<sp/>side,<sp/>BlockP&lt;T&gt;<sp/>XBlock,<sp/>DynForcingP&lt;float&gt;<sp/>Atmp,<sp/>DynForcingP&lt;float&gt;<sp/>Zsmap,<sp/>bool<sp/>uniform,<sp/>float<sp/>zsbnd,<sp/>T<sp/>*<sp/>zs,<sp/>T<sp/>*<sp/>h,<sp/>T<sp/>*<sp/>un,<sp/>T<sp/>*<sp/>ut,<sp/>T<sp/>*<sp/>Fh,<sp/>T<sp/>*<sp/>Fq,<sp/>T<sp/>*<sp/>Ss)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//bndFluxGPUSide<sp/>&lt;&lt;&lt;<sp/>gridDimBBND,<sp/>blockDim,<sp/>0<sp/>&gt;&gt;&gt;<sp/>(XParam,<sp/>bndseg.left,<sp/>XBlock,<sp/>Atmp,<sp/>bndseg.WLmap,<sp/>bndseg.uniform,<sp/>bndseg.type,<sp/>float(zsbnd),<sp/>XEv.zs,<sp/>XEv.h,<sp/>un,<sp/>ut,<sp/>Fh,<sp/>Fq,<sp/>S);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bndFluxGPUSide<sp/>&lt;&lt;&lt;<sp/>gridDimBBNDLeft,<sp/>blockDim,<sp/>0<sp/>&gt;&gt;&gt;<sp/>(XParam,<sp/>bndseg.left,<sp/>XBlock,<sp/>Atmp,<sp/>bndseg.WLmap,<sp/>bndseg.uniform,<sp/>bndseg.type,<sp/>float(zsbnd),<sp/>taper,<sp/>XEv.zs,<sp/>XEv.h,<sp/>XEv.u,<sp/>XEv.v,<sp/>XFlux.Fhu,<sp/>XFlux.Fqux,<sp/>XFlux.Su);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CUDA_CHECK(cudaDeviceSynchronize());</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(bndseg.right.nblk<sp/>&gt;<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bndFluxGPUSide<sp/>&lt;&lt;&lt;<sp/>gridDimBBNDRight,<sp/>blockDim,<sp/>0<sp/>&gt;&gt;&gt;<sp/>(XParam,<sp/>bndseg.right,<sp/>XBlock,<sp/>Atmp,<sp/>bndseg.WLmap,<sp/>bndseg.uniform,<sp/>bndseg.type,<sp/>float(zsbnd),<sp/>taper,<sp/>XEv.zs,<sp/>XEv.h,<sp/>XEv.u,<sp/>XEv.v,<sp/>XFlux.Fhu,<sp/>XFlux.Fqux,<sp/>XFlux.Su);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CUDA_CHECK(cudaDeviceSynchronize());</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(bndseg.top.nblk<sp/>&gt;<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//top</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bndFluxGPUSide<sp/>&lt;&lt;&lt;<sp/>gridDimBBNDTop,<sp/>blockDim,<sp/>0<sp/>&gt;&gt;&gt;<sp/>(XParam,<sp/>bndseg.top,<sp/>XBlock,<sp/>Atmp,<sp/>bndseg.WLmap,<sp/>bndseg.uniform,<sp/>bndseg.type,<sp/>float(zsbnd),<sp/>taper,<sp/>XEv.zs,<sp/>XEv.h,<sp/>XEv.v,<sp/>XEv.u,<sp/>XFlux.Fhv,<sp/>XFlux.Fqvy,<sp/>XFlux.Sv);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CUDA_CHECK(cudaDeviceSynchronize());</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(bndseg.bot.nblk<sp/>&gt;<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//bot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bndFluxGPUSide<sp/>&lt;&lt;&lt;<sp/>gridDimBBNDBot,<sp/>blockDim,<sp/>0<sp/>&gt;&gt;&gt;<sp/>(XParam,<sp/>bndseg.bot,<sp/>XBlock,<sp/>Atmp,<sp/>bndseg.WLmap,<sp/>bndseg.uniform,<sp/>bndseg.type,<sp/>float(zsbnd),<sp/>taper,<sp/>XEv.zs,<sp/>XEv.h,<sp/>XEv.v,<sp/>XEv.u,<sp/>XFlux.Fhv,<sp/>XFlux.Fqvy,<sp/>XFlux.Sv);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CUDA_CHECK(cudaDeviceSynchronize());</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bndFluxGPUSideCPU(XParam,<sp/>bndseg.left,<sp/>XBlock,<sp/>Atmp,<sp/>bndseg.WLmap,<sp/>bndseg.uniform,<sp/>bndseg.type,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">(zsbnd),<sp/>taper,<sp/>XEv.zs,<sp/>XEv.h,<sp/>XEv.u,<sp/>XEv.v,<sp/>XFlux.Fhu,<sp/>XFlux.Fqux,<sp/>XFlux.Su);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bndFluxGPUSideCPU(XParam,<sp/>bndseg.right,<sp/>XBlock,<sp/>Atmp,<sp/>bndseg.WLmap,<sp/>bndseg.uniform,<sp/>bndseg.type,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">(zsbnd),<sp/>taper,<sp/>XEv.zs,<sp/>XEv.h,<sp/>XEv.u,<sp/>XEv.v,<sp/>XFlux.Fhu,<sp/>XFlux.Fqux,<sp/>XFlux.Su);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bndFluxGPUSideCPU(XParam,<sp/>bndseg.top,<sp/>XBlock,<sp/>Atmp,<sp/>bndseg.WLmap,<sp/>bndseg.uniform,<sp/>bndseg.type,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">(zsbnd),<sp/>taper,<sp/>XEv.zs,<sp/>XEv.h,<sp/>XEv.v,<sp/>XEv.u,<sp/>XFlux.Fhv,<sp/>XFlux.Fqvy,<sp/>XFlux.Sv);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bndFluxGPUSideCPU(XParam,<sp/>bndseg.bot,<sp/>XBlock,<sp/>Atmp,<sp/>bndseg.WLmap,<sp/>bndseg.uniform,<sp/>bndseg.type,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">(zsbnd),<sp/>taper,<sp/>XEv.zs,<sp/>XEv.h,<sp/>XEv.v,<sp/>XEv.u,<sp/>XFlux.Fhv,<sp/>XFlux.Fqvy,<sp/>XFlux.Sv);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FlowbndFlux&lt;float&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>totaltime,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;float&gt;</ref><sp/>XBlock,<sp/><ref refid="classbndsegment" kindref="compound">bndsegment</ref><sp/>bndseg,<sp/><ref refid="structDynForcingP" kindref="compound">DynForcingP&lt;float&gt;</ref><sp/>Atmp,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;float&gt;</ref><sp/>XEv,<sp/><ref refid="structFluxP" kindref="compound">FluxP&lt;float&gt;</ref><sp/>XFlux);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FlowbndFlux&lt;double&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>totaltime,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;double&gt;</ref><sp/>XBlock,<sp/><ref refid="classbndsegment" kindref="compound">bndsegment</ref><sp/>bndseg,<sp/><ref refid="structDynForcingP" kindref="compound">DynForcingP&lt;float&gt;</ref><sp/>Atmp,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;double&gt;</ref><sp/>XEv,<sp/><ref refid="structFluxP" kindref="compound">FluxP&lt;double&gt;</ref><sp/>XFlux);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FlowbndFluxML(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>totaltime,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;T&gt;</ref><sp/>XBlock,<sp/><ref refid="classbndsegment" kindref="compound">bndsegment</ref><sp/>bndseg,<sp/><ref refid="structDynForcingP" kindref="compound">DynForcingP&lt;float&gt;</ref><sp/>Atmp,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;T&gt;</ref><sp/>XEv,<sp/><ref refid="structFluxMLP" kindref="compound">FluxMLP&lt;T&gt;</ref><sp/>XFlux)</highlight></codeline>
<codeline lineno="173"><highlight class="normal">{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>dim3<sp/>blockDim(XParam.blkwidth,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>dim3<sp/>gridDimBBNDLeft(bndseg.left.nblk,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>dim3<sp/>gridDimBBNDRight(bndseg.right.nblk,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>dim3<sp/>gridDimBBNDTop(bndseg.top.nblk,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>dim3<sp/>gridDimBBNDBot(bndseg.bot.nblk,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>zsbnd<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!std::isnan(XParam.zsinit))<sp/></highlight><highlight class="comment">//<sp/>apply<sp/>specified<sp/>zsinit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zsbnd<sp/>=<sp/>XParam.zsinit;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Warning<sp/>this<sp/>above<sp/>is<sp/>not<sp/>ideal<sp/>but<sp/>sufficient<sp/>for<sp/>fail<sp/>safe<sp/>of<sp/>testing<sp/>if<sp/>someone<sp/>specifies<sp/>initial<sp/>conditions<sp/>and<sp/>no<sp/>boundary<sp/>for<sp/>a<sp/>type<sp/>3<sp/>they<sp/>should<sp/>be<sp/>in<sp/>trouble</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>taper<sp/>=<sp/>T(1.0);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bndseg.on)</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bndseg.uniform)</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SLstepinbnd<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>difft<sp/>=<sp/>bndseg.data[SLstepinbnd].time<sp/>-<sp/>totaltime;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(difft<sp/>&lt;<sp/>0.0)</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SLstepinbnd++;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>difft<sp/>=<sp/>bndseg.data[SLstepinbnd].time<sp/>-<sp/>totaltime;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//itime<sp/>=<sp/>SLstepinbnd<sp/>-<sp/>1.0<sp/>+<sp/>(totaltime<sp/>-<sp/>bndseg.data[SLstepinbnd<sp/>-<sp/>1].time)<sp/>/<sp/>(bndseg.data[SLstepinbnd].time<sp/>-<sp/>bndseg.data[SLstepinbnd<sp/>-<sp/>1].time);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zsbnd<sp/>=<sp/>interptime(bndseg.data[SLstepinbnd].wspeed,<sp/>bndseg.data[SLstepinbnd<sp/>-<sp/>1].wspeed,<sp/>bndseg.data[SLstepinbnd].time<sp/>-<sp/>bndseg.data[SLstepinbnd<sp/>-<sp/>1].time,<sp/>totaltime<sp/>-<sp/>bndseg.data[SLstepinbnd<sp/>-<sp/>1].time);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.bndtaper<sp/>&gt;<sp/>0.0)</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>taper<sp/>=<sp/>min(totaltime<sp/>/<sp/>XParam.bndtaper,<sp/>1.0);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Nothing.<sp/>it<sp/>is<sp/>already<sp/>done<sp/>in<sp/>update<sp/>forcing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bndseg.type<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.GPUDEVICE<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(bndseg.left.nblk<sp/>&gt;<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bndFluxGPUSide<sp/>&lt;&lt;<sp/>&lt;<sp/>gridDimBBNDLeft,<sp/>blockDim,<sp/>0<sp/>&gt;&gt;<sp/>&gt;<sp/>(XParam,<sp/>bndseg.left,<sp/>XBlock,<sp/>Atmp,<sp/>bndseg.WLmap,<sp/>bndseg.uniform,<sp/>bndseg.type,<sp/>float(zsbnd),<sp/>taper,<sp/>XEv.zs,<sp/>XEv.h,<sp/>XEv.u,<sp/>XEv.v,<sp/>XFlux.hu,<sp/>XFlux.hfu,<sp/>XFlux.hau);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CUDA_CHECK(cudaDeviceSynchronize());</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(bndseg.right.nblk<sp/>&gt;<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bndFluxGPUSide<sp/>&lt;&lt;<sp/>&lt;<sp/>gridDimBBNDRight,<sp/>blockDim,<sp/>0<sp/>&gt;&gt;<sp/>&gt;<sp/>(XParam,<sp/>bndseg.right,<sp/>XBlock,<sp/>Atmp,<sp/>bndseg.WLmap,<sp/>bndseg.uniform,<sp/>bndseg.type,<sp/>float(zsbnd),<sp/>taper,<sp/>XEv.zs,<sp/>XEv.h,<sp/>XEv.u,<sp/>XEv.v,<sp/>XFlux.hu,<sp/>XFlux.hfu,<sp/>XFlux.hau);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CUDA_CHECK(cudaDeviceSynchronize());</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(bndseg.top.nblk<sp/>&gt;<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//top</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bndFluxGPUSide<sp/>&lt;&lt;<sp/>&lt;<sp/>gridDimBBNDTop,<sp/>blockDim,<sp/>0<sp/>&gt;&gt;<sp/>&gt;<sp/>(XParam,<sp/>bndseg.top,<sp/>XBlock,<sp/>Atmp,<sp/>bndseg.WLmap,<sp/>bndseg.uniform,<sp/>bndseg.type,<sp/>float(zsbnd),<sp/>taper,<sp/>XEv.zs,<sp/>XEv.h,<sp/>XEv.v,<sp/>XEv.u,<sp/>XFlux.hv,<sp/>XFlux.hfv,<sp/>XFlux.hav);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CUDA_CHECK(cudaDeviceSynchronize());</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(bndseg.bot.nblk<sp/>&gt;<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//bot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bndFluxGPUSide<sp/>&lt;&lt;<sp/>&lt;<sp/>gridDimBBNDBot,<sp/>blockDim,<sp/>0<sp/>&gt;&gt;<sp/>&gt;<sp/>(XParam,<sp/>bndseg.bot,<sp/>XBlock,<sp/>Atmp,<sp/>bndseg.WLmap,<sp/>bndseg.uniform,<sp/>bndseg.type,<sp/>float(zsbnd),<sp/>taper,<sp/>XEv.zs,<sp/>XEv.h,<sp/>XEv.v,<sp/>XEv.u,<sp/>XFlux.hv,<sp/>XFlux.hfv,<sp/>XFlux.hfv);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CUDA_CHECK(cudaDeviceSynchronize());</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//bndFluxGPUSideCPU(XParam,<sp/>bndseg.left,<sp/>XBlock,<sp/>Atmp,<sp/>bndseg.WLmap,<sp/>bndseg.uniform,<sp/>bndseg.type,<sp/>float(zsbnd),<sp/>taper,<sp/>XEv.zs,<sp/>XEv.h,<sp/>XEv.u,<sp/>XEv.v,<sp/>XFlux.Fhu,<sp/>XFlux.Fqux,<sp/>XFlux.Su);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//bndFluxGPUSideCPU(XParam,<sp/>bndseg.right,<sp/>XBlock,<sp/>Atmp,<sp/>bndseg.WLmap,<sp/>bndseg.uniform,<sp/>bndseg.type,<sp/>float(zsbnd),<sp/>taper,<sp/>XEv.zs,<sp/>XEv.h,<sp/>XEv.u,<sp/>XEv.v,<sp/>XFlux.Fhu,<sp/>XFlux.Fqux,<sp/>XFlux.Su);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//bndFluxGPUSideCPU(XParam,<sp/>bndseg.top,<sp/>XBlock,<sp/>Atmp,<sp/>bndseg.WLmap,<sp/>bndseg.uniform,<sp/>bndseg.type,<sp/>float(zsbnd),<sp/>taper,<sp/>XEv.zs,<sp/>XEv.h,<sp/>XEv.v,<sp/>XEv.u,<sp/>XFlux.Fhv,<sp/>XFlux.Fqvy,<sp/>XFlux.Sv);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//bndFluxGPUSideCPU(XParam,<sp/>bndseg.bot,<sp/>XBlock,<sp/>Atmp,<sp/>bndseg.WLmap,<sp/>bndseg.uniform,<sp/>bndseg.type,<sp/>float(zsbnd),<sp/>taper,<sp/>XEv.zs,<sp/>XEv.h,<sp/>XEv.v,<sp/>XEv.u,<sp/>XFlux.Fhv,<sp/>XFlux.Fqvy,<sp/>XFlux.Sv);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FlowbndFluxML&lt;float&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>totaltime,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;float&gt;</ref><sp/>XBlock,<sp/><ref refid="classbndsegment" kindref="compound">bndsegment</ref><sp/>bndseg,<sp/><ref refid="structDynForcingP" kindref="compound">DynForcingP&lt;float&gt;</ref><sp/>Atmp,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;float&gt;</ref><sp/>XEv,<sp/><ref refid="structFluxMLP" kindref="compound">FluxMLP&lt;float&gt;</ref><sp/>XFlux);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FlowbndFluxML&lt;double&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>totaltime,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;double&gt;</ref><sp/>XBlock,<sp/><ref refid="classbndsegment" kindref="compound">bndsegment</ref><sp/>bndseg,<sp/><ref refid="structDynForcingP" kindref="compound">DynForcingP&lt;float&gt;</ref><sp/>Atmp,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;double&gt;</ref><sp/>XEv,<sp/><ref refid="structFluxMLP" kindref="compound">FluxMLP&lt;double&gt;</ref><sp/>XFlux);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FlowbndFluxold(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>totaltime,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;T&gt;</ref><sp/>XBlock,<sp/><ref refid="classbndparam" kindref="compound">bndparam</ref><sp/>side,<sp/><ref refid="structDynForcingP" kindref="compound">DynForcingP&lt;float&gt;</ref><sp/>Atmp,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;T&gt;</ref><sp/>XEv,<sp/><ref refid="structFluxP" kindref="compound">FluxP&lt;T&gt;</ref><sp/>XFlux)</highlight></codeline>
<codeline lineno="260"><highlight class="normal">{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>dim3<sp/>blockDim(XParam.blkwidth,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>dim3<sp/>gridDimBBND(side.nblk,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/>un,<sp/>*<sp/>ut,<sp/>*<sp/>Fh,<sp/>*<sp/>Fq,<sp/>*<sp/>S;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>itime<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(side.on)</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SLstepinbnd<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>difft<sp/>=<sp/>side.data[SLstepinbnd].time<sp/>-<sp/>totaltime;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(difft<sp/>&lt;<sp/>0.0)</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SLstepinbnd++;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>difft<sp/>=<sp/>side.data[SLstepinbnd].time<sp/>-<sp/>totaltime;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itime<sp/>=<sp/>SLstepinbnd<sp/>-<sp/>1.0<sp/>+<sp/>(totaltime<sp/>-<sp/>side.data[SLstepinbnd<sp/>-<sp/>1].time)<sp/>/<sp/>(side.data[SLstepinbnd].time<sp/>-<sp/>side.data[SLstepinbnd<sp/>-<sp/>1].time);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(side.isright<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//top<sp/>or<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>un<sp/>=<sp/>XEv.v;<sp/></highlight><highlight class="comment">//u<sp/>normal<sp/>to<sp/>boundary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ut<sp/>=<sp/>XEv.u;<sp/></highlight><highlight class="comment">//u<sp/>tangent<sp/>to<sp/>boundary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>un<sp/>=<sp/>XEv.u;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ut<sp/>=<sp/>XEv.v;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(side.isright<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">//<sp/>top<sp/>or<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fh<sp/>=<sp/>XFlux.Fhv;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fq<sp/>=<sp/>XFlux.Fqvy;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S<sp/>=<sp/>XFlux.Sv;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fh<sp/>=<sp/>XFlux.Fhu;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fq<sp/>=<sp/>XFlux.Fqux;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S<sp/>=<sp/>XFlux.Su;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.GPUDEVICE<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//bndFluxGPU<sp/>&lt;&lt;&lt;<sp/>gridDimBBND,<sp/>blockDim,<sp/>0<sp/>&gt;&gt;&gt;<sp/>(XParam,<sp/>side,<sp/>XBlock,<sp/>Atmp,<sp/>float(itime),<sp/>XEv.zs,<sp/>XEv.h,<sp/>un,<sp/>ut,<sp/>Fh,<sp/>Fq,<sp/>S);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//CUDA_CHECK(cudaDeviceSynchronize());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//bndFluxCPU(XParam,<sp/>side,<sp/>XBlock,<sp/>zsbndleft,<sp/>uubndleft,<sp/>vvbndleft,<sp/>Atmp,<sp/>XEv.zs,<sp/>XEv.h,<sp/>un,<sp/>ut);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal">}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FlowbndFluxold&lt;float&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>totaltime,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;float&gt;</ref><sp/>XBlock,<sp/><ref refid="classbndparam" kindref="compound">bndparam</ref><sp/>side,<sp/><ref refid="structDynForcingP" kindref="compound">DynForcingP&lt;float&gt;</ref><sp/>Atmp,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;float&gt;</ref><sp/>XEv,<sp/><ref refid="structFluxP" kindref="compound">FluxP&lt;float&gt;</ref><sp/>XFlux);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FlowbndFluxold&lt;double&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>totaltime,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;double&gt;</ref><sp/>XBlock,<sp/><ref refid="classbndparam" kindref="compound">bndparam</ref><sp/>side,<sp/><ref refid="structDynForcingP" kindref="compound">DynForcingP&lt;float&gt;</ref><sp/>Atmp,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;double&gt;</ref><sp/>XEv,<sp/><ref refid="structFluxP" kindref="compound">FluxP&lt;double&gt;</ref><sp/>XFlux);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/>__global__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>bndFluxGPUSide(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="classbndsegmentside" kindref="compound">bndsegmentside</ref><sp/>side,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;T&gt;</ref><sp/>XBlock,<sp/><ref refid="structDynForcingP" kindref="compound">DynForcingP&lt;float&gt;</ref><sp/>Atmp,<sp/><ref refid="structDynForcingP" kindref="compound">DynForcingP&lt;float&gt;</ref><sp/>Zsmap,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>uniform,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>zsbnd,<sp/>T<sp/>taper,<sp/>T*<sp/>zs,<sp/>T*<sp/>h,<sp/>T*<sp/>un,<sp/>T*<sp/>ut,<sp/>T*<sp/>Fh,<sp/>T*<sp/>Fq,<sp/>T*<sp/>Ss)</highlight></codeline>
<codeline lineno="323"><highlight class="normal">{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>halowidth<sp/>=<sp/>XParam.halowidth;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blkmemwidth<sp/>=<sp/>blockDim.x<sp/>+<sp/>halowidth<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//unsigned<sp/>int<sp/>blksize<sp/>=<sp/>blkmemwidth<sp/>*<sp/>blkmemwidth;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>blockIdx.x;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix,<sp/>iy;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iq<sp/>=<sp/>ibl<sp/>*<sp/>XParam.blkwidth<sp/>+<sp/>threadIdx.x;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>side.blk_g[ibl];</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lev<sp/>=<sp/>XBlock.level[ib];</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>delta<sp/>=<sp/>calcres(T(XParam.dx),<sp/>lev);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(side.isright<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ix<sp/>=<sp/>threadIdx.x;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iy<sp/>=<sp/>side.istop<sp/>&lt;<sp/>0<sp/>?<sp/>0<sp/>:<sp/>(blockDim.x);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//itx<sp/>=<sp/>(xx<sp/>-<sp/>XParam.xo)<sp/>/<sp/>(XParam.xmax<sp/>-<sp/>XParam.xo)<sp/>*<sp/>side.nbnd;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iy<sp/>=<sp/>threadIdx.x;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ix<sp/>=<sp/>side.isright<sp/>&lt;<sp/>0<sp/>?<sp/>0<sp/>:<sp/>(blockDim.x);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//itx<sp/>=<sp/>(yy<sp/>-<sp/>XParam.yo)<sp/>/<sp/>(XParam.ymax<sp/>-<sp/>XParam.yo)<sp/>*<sp/>side.nbnd;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>sign<sp/>=<sp/>T(side.isright)<sp/>+<sp/>T(side.istop);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>memloc(halowidth,<sp/>blkmemwidth,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>xx,<sp/>yy;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>xx<sp/>=<sp/>XBlock.xo[ib]<sp/>+<sp/>ix<sp/>*<sp/>delta;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>yy<sp/>=<sp/>XBlock.yo[ib]<sp/>+<sp/>iy<sp/>*<sp/>delta;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>zsatm<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.atmpforcing)</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>atmpi;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atmpi<sp/>=<sp/>interpDyn2BUQ(XParam.xo<sp/>+<sp/>xx,<sp/>XParam.yo<sp/>+<sp/>yy,<sp/>Atmp.GPU);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zsatm<sp/>=<sp/>-1.0<sp/>*<sp/>(atmpi<sp/>-<sp/>XParam.Paref)<sp/>*<sp/>XParam.Pa2m;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uniform)</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zsbnd<sp/>=<sp/>interpDyn2BUQ(XParam.xo<sp/>+<sp/>xx,<sp/>XParam.yo<sp/>+<sp/>yy,<sp/>Zsmap.GPU);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>zsbnd<sp/>=<sp/>zsbnd<sp/>+<sp/>XParam.zsoffset;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inside<sp/>=<sp/>Inside(halowidth,<sp/>blkmemwidth,<sp/>side.isright,<sp/>side.istop,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//T<sp/>zsbnd;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>unbnd<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>utbnd<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>zsinside,<sp/>hinside,<sp/>uninside,<sp/>utinside,zsi;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>F,<sp/>G,<sp/>S;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>qmean;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>zsi<sp/>=<sp/>zs[i];</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>zsinside<sp/>=<sp/>zs[inside];</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>hinside<sp/>=<sp/>h[inside];</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>uninside<sp/>=<sp/>un[inside];</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>utinside<sp/>=<sp/>ut[inside];</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>zsX<sp/>=<sp/>(zsbnd<sp/>+<sp/>zsatm<sp/>-<sp/>0.5<sp/>*<sp/>(zsi<sp/>+<sp/>zsinside))<sp/>*<sp/>taper<sp/>+<sp/>0.5<sp/>*<sp/>(zsi<sp/>+<sp/>zsinside);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>qmean<sp/>=<sp/>side.qmean_g[iq];</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(side.isright<sp/>&lt;<sp/>0<sp/>||<sp/>side.istop<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="comment">//left<sp/>or<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F<sp/>=<sp/>Fh[i];</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G<sp/>=<sp/>Fq[i];</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S<sp/>=<sp/>Ss[inside];</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F<sp/>=<sp/>Fh[i];</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G<sp/>=<sp/>Ss[i];</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S<sp/>=<sp/>Fq[inside];</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>factime<sp/>=<sp/>min(T(XParam.dt<sp/>/<sp/>XParam.bndfiltertime),<sp/>T(1.0));</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>facrel<sp/>=<sp/><sp/>T(1.0)<sp/>-<sp/>min(T(XParam.dt<sp/>/<sp/>XParam.bndrelaxtime),<sp/>T(1.0));</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">//<sp/>No<sp/>Flux</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//noslipbnd(zsinside,<sp/>hinside,<sp/>unnew,<sp/>utnew,<sp/>zsnew,<sp/>hnew);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//noslipbndQ(F,<sp/>G,<sp/>S);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noslipbndQ(F,<sp/>G,<sp/>S);</highlight><highlight class="comment">//noslipbndQ(T<sp/>&amp;<sp/>F,<sp/>T<sp/>&amp;<sp/>G,<sp/>T<sp/>&amp;<sp/>S)<sp/>F<sp/>=<sp/>T(0.0);<sp/>S<sp/>=<sp/>G;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h[i]<sp/>&gt;<sp/>XParam.eps<sp/>||<sp/>zsX<sp/>&gt;<sp/>zsi)</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dirichlet1Q(T(XParam.g),<sp/>sign,<sp/>zsX,<sp/>zsinside,<sp/>hinside,<sp/>uninside,<sp/>F);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noslipbndQ(F,<sp/>G,<sp/>S);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qmean<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/>3)</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h[i]<sp/>&gt;<sp/>XParam.eps<sp/>||<sp/>zsX<sp/>&gt;<sp/>zsi<sp/>)</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ABS1DQ(T(XParam.g),<sp/>sign,<sp/>factime,<sp/>facrel,<sp/>zsi,<sp/>zsX,<sp/>zsinside,<sp/>h[i],<sp/>qmean,<sp/>F,<sp/>G,<sp/>S);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//qmean<sp/>=<sp/>T(0.0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noslipbndQ(F,<sp/>G,<sp/>S);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qmean<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>side.qmean_g[iq]<sp/>=<sp/>qmean;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>the<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(side.isright<sp/>&lt;<sp/>0<sp/>||<sp/>side.istop<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="comment">//<sp/>left<sp/>or<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fh[i]=F;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fq[i]=G;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ss[inside]=S;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fh[i]<sp/>=<sp/>F;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ss[i]<sp/>=<sp/>G;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fq[inside]<sp/>=<sp/>S;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal">}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>bndFluxGPUSideCPU(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="classbndsegmentside" kindref="compound">bndsegmentside</ref><sp/>side,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;T&gt;</ref><sp/>XBlock,<sp/><ref refid="structDynForcingP" kindref="compound">DynForcingP&lt;float&gt;</ref><sp/>Atmp,<sp/><ref refid="structDynForcingP" kindref="compound">DynForcingP&lt;float&gt;</ref><sp/>Zsmap,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>uniform,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>zsbnd,<sp/>T<sp/>taper,<sp/>T*<sp/>zs,<sp/>T*<sp/>h,<sp/>T*<sp/>un,<sp/>T*<sp/>ut,<sp/>T*<sp/>Fh,<sp/>T*<sp/>Fq,<sp/>T*<sp/>Ss)</highlight></codeline>
<codeline lineno="489"><highlight class="normal">{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>halowidth<sp/>=<sp/>XParam.halowidth;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blkmemwidth<sp/>=<sp/>XParam.blkmemwidth;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//unsigned<sp/>int<sp/>blksize<sp/>=<sp/>blkmemwidth<sp/>*<sp/>blkmemwidth;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>0;<sp/>ibl<sp/>&lt;<sp/>side.nblk;<sp/>ibl++)</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>side.blk[ibl];</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lev<sp/>=<sp/>XBlock.level[ib];</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>delta<sp/>=<sp/>calcres(T(XParam.dx),<sp/>lev);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tx<sp/>=<sp/>0;<sp/>tx<sp/>&lt;<sp/>XParam.blkwidth;<sp/>tx++)</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix,<sp/>iy;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>xx,<sp/>yy;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(side.isright<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ix<sp/>=<sp/>tx;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iy<sp/>=<sp/>side.istop<sp/>&lt;<sp/>0<sp/>?<sp/>0<sp/>:<sp/>(XParam.blkwidth);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//itx<sp/>=<sp/>(xx<sp/>-<sp/>XParam.xo)<sp/>/<sp/>(XParam.xmax<sp/>-<sp/>XParam.xo)<sp/>*<sp/>side.nbnd;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iy<sp/>=<sp/>tx;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ix<sp/>=<sp/>side.isright<sp/>&lt;<sp/>0<sp/>?<sp/>0<sp/>:<sp/>(XParam.blkwidth);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//itx<sp/>=<sp/>(yy<sp/>-<sp/>XParam.yo)<sp/>/<sp/>(XParam.ymax<sp/>-<sp/>XParam.yo)<sp/>*<sp/>side.nbnd;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xx<sp/>=<sp/>XBlock.xo[ib]<sp/>+<sp/>ix<sp/>*<sp/>delta;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yy<sp/>=<sp/>XBlock.yo[ib]<sp/>+<sp/>iy<sp/>*<sp/>delta;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>sign<sp/>=<sp/>T(side.isright)<sp/>+<sp/>T(side.istop);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iq<sp/>=<sp/>ibl<sp/>*<sp/>XParam.blkwidth<sp/>+<sp/>tx;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>zsatm<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>atmpi<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.atmpforcing)</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Atmp.uniform)</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atmpi<sp/>=<sp/>T(Atmp.nowvalue);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atmpi<sp/>=<sp/>interp2BUQ(XParam.xo<sp/>+<sp/>xx,<sp/>XParam.yo<sp/>+<sp/>yy,<sp/>Atmp);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zsatm<sp/>=<sp/>-(atmpi<sp/>-<sp/>(T)XParam.Paref)<sp/>*<sp/>(T)XParam.Pa2m;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uniform)</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zsbnd<sp/>=<sp/>interp2BUQ(XParam.xo<sp/>+<sp/>xx,<sp/>XParam.yo<sp/>+<sp/>yy,<sp/>Zsmap);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zsbnd<sp/>=<sp/>zsbnd<sp/>+<sp/>XParam.zsoffset;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>memloc(halowidth,<sp/>blkmemwidth,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inside<sp/>=<sp/>Inside(halowidth,<sp/>blkmemwidth,<sp/>side.isright,<sp/>side.istop,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//T<sp/>zsbnd;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>unbnd<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>utbnd<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>zsinside,<sp/>hinside,<sp/>uninside,<sp/>utinside,<sp/>zsi;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>F,<sp/>G,<sp/>S;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>qmean;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zsi<sp/>=<sp/>zs[i];</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zsinside<sp/>=<sp/>zs[inside];</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hinside<sp/>=<sp/>h[inside];</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uninside<sp/>=<sp/>un[inside];</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>utinside<sp/>=<sp/>ut[inside];</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>zsX<sp/>=<sp/>(zsbnd<sp/>+<sp/>zsatm<sp/>-<sp/>0.5<sp/>*<sp/>(zsi<sp/>+<sp/>zsinside))<sp/>*<sp/>taper<sp/>+<sp/>0.5<sp/>*<sp/>(zsi<sp/>+<sp/>zsinside);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qmean<sp/>=<sp/>side.qmean[iq];</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(side.isright<sp/>&lt;<sp/>0<sp/>||<sp/>side.istop<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="comment">//left<sp/>or<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F<sp/>=<sp/>Fh[i];</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G<sp/>=<sp/>Fq[i];</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S<sp/>=<sp/>Ss[inside];</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F<sp/>=<sp/>Fh[i];</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G<sp/>=<sp/>Ss[i];</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S<sp/>=<sp/>Fq[inside];</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>factime<sp/>=<sp/>min(T(XParam.dt<sp/>/<sp/>XParam.bndfiltertime),<sp/>T(1.0));</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>facrel<sp/>=<sp/>T(1.0)<sp/>-<sp/>min(T(XParam.dt<sp/>/<sp/>XParam.bndrelaxtime),<sp/>T(1.0));</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">//<sp/>No<sp/>Flux</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//noslipbnd(zsinside,<sp/>hinside,<sp/>unnew,<sp/>utnew,<sp/>zsnew,<sp/>hnew);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//noslipbndQ(F,<sp/>G,<sp/>S);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noslipbndQ(F,<sp/>G,<sp/>S);</highlight><highlight class="comment">//noslipbndQ(T<sp/>&amp;<sp/>F,<sp/>T<sp/>&amp;<sp/>G,<sp/>T<sp/>&amp;<sp/>S)<sp/>F<sp/>=<sp/>T(0.0);<sp/>S<sp/>=<sp/>G;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/>3)</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h[i]<sp/>&gt;<sp/>XParam.eps<sp/>||<sp/>zsX<sp/>&gt;<sp/>zsi)</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ABS1DQ(T(XParam.g),<sp/>sign,<sp/>factime,<sp/>facrel,<sp/>zsi,<sp/>zsX,<sp/>zsinside,<sp/>h[i],<sp/>qmean,<sp/>F,<sp/>G,<sp/>S);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//qmean<sp/>=<sp/>T(0.0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noslipbndQ(F,<sp/>G,<sp/>S);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qmean<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>side.qmean[iq]<sp/>=<sp/>qmean;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h[i]<sp/>&gt;<sp/>XParam.eps<sp/>||<sp/>zsX<sp/>&gt;<sp/>zsi)</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ABS1DQ(T(XParam.g),<sp/>sign,<sp/>factime,<sp/>facrel,<sp/>zsi,<sp/>zsX,<sp/>zsinside,<sp/>h[i],<sp/>qmean,<sp/>F,<sp/>G,<sp/>S);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//qmean<sp/>=<sp/>T(0.0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dirichlet1Q(T(XParam.g),<sp/>sign,<sp/>zsX,<sp/>zsinside,<sp/>hinside,<sp/>uninside,<sp/>F);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noslipbndQ(F,<sp/>G,<sp/>S);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qmean<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>side.qmean[iq]<sp/>=<sp/>qmean;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>the<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(side.isright<sp/>&lt;<sp/>0<sp/>||<sp/>side.istop<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="comment">//<sp/>left<sp/>or<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fh[i]<sp/>=<sp/>F;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fq[i]<sp/>=<sp/>G;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ss[inside]<sp/>=<sp/>S;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fh[i]<sp/>=<sp/>F;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ss[i]<sp/>=<sp/>G;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fq[inside]<sp/>=<sp/>S;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal">}</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/>__global__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>bndGPU(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="classbndparam" kindref="compound">bndparam</ref><sp/>side,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;T&gt;</ref><sp/>XBlock,<sp/><ref refid="structDynForcingP" kindref="compound">DynForcingP&lt;float&gt;</ref><sp/>Atmp,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>itime,<sp/>T*<sp/>zs,<sp/>T*<sp/>h,<sp/>T*<sp/>un,<sp/>T*<sp/>ut)</highlight></codeline>
<codeline lineno="649"><highlight class="normal">{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>halowidth<sp/>=<sp/>XParam.halowidth;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blkmemwidth<sp/>=<sp/>blockDim.x<sp/>+<sp/>halowidth<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//unsigned<sp/>int<sp/>blksize<sp/>=<sp/>blkmemwidth<sp/>*<sp/>blkmemwidth;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>blockIdx.x;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix,<sp/>iy;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>itx;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>side.blks_g[ibl];</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lev<sp/>=<sp/>XBlock.level[ib];</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>delta<sp/>=<sp/>calcres(T(XParam.dx),<sp/>lev);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(side.isright<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ix<sp/>=<sp/>threadIdx.x;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iy<sp/>=<sp/>side.istop<sp/>&lt;<sp/>0<sp/>?<sp/>0<sp/>:<sp/>(blockDim.x<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//itx<sp/>=<sp/>(xx<sp/>-<sp/>XParam.xo)<sp/>/<sp/>(XParam.xmax<sp/>-<sp/>XParam.xo)<sp/>*<sp/>side.nbnd;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iy<sp/>=<sp/>threadIdx.x;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ix<sp/>=<sp/>side.isright<sp/>&lt;<sp/>0<sp/>?<sp/>0<sp/>:<sp/>(blockDim.x<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//itx<sp/>=<sp/>(yy<sp/>-<sp/>XParam.yo)<sp/>/<sp/>(XParam.ymax<sp/>-<sp/>XParam.yo)<sp/>*<sp/>side.nbnd;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>sign<sp/>=<sp/>T(side.isright)<sp/>+<sp/>T(side.istop);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>memloc(halowidth,<sp/>blkmemwidth,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>xx,<sp/>yy;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>xx<sp/>=<sp/>XBlock.xo[ib]<sp/>+<sp/>ix<sp/>*<sp/>delta;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>yy<sp/>=<sp/>XBlock.yo[ib]<sp/>+<sp/>iy<sp/>*<sp/>delta;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(side.isright<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itx<sp/>=<sp/>(xx)<sp/>/<sp/>(XParam.xmax<sp/>-<sp/>XParam.xo)<sp/>*<sp/>side.nbnd;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itx<sp/>=<sp/>(yy)<sp/>/<sp/>(XParam.ymax<sp/>-<sp/>XParam.yo)<sp/>*<sp/>side.nbnd;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>zsatm<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.atmpforcing)</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>atmpi;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atmpi<sp/>=<sp/>interpDyn2BUQ(XParam.xo<sp/>+<sp/>xx,<sp/>XParam.yo<sp/>+<sp/>yy,<sp/>Atmp.GPU);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zsatm<sp/>=<sp/>-1.0<sp/>*<sp/>(atmpi<sp/>-<sp/>XParam.Paref)<sp/>*<sp/>XParam.Pa2m;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inside=<sp/>Inside(halowidth,<sp/>blkmemwidth,<sp/>side.isright,<sp/>side.istop,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>unnew,<sp/>utnew,<sp/>hnew,<sp/>zsnew;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>uninside,<sp/>utinside,<sp/>hinside,<sp/>zsinside;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>zsbnd;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>unbnd<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>utbnd<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/>unnew<sp/>=<sp/>un[i];</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>utnew<sp/>=<sp/>ut[i];</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>hnew<sp/>=<sp/>h[i];</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>zsnew<sp/>=<sp/>zs[i];</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>zsinside<sp/>=<sp/>zs[inside];</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>hinside<sp/>=<sp/>h[inside];</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>uninside<sp/>=<sp/>un[inside];</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>utinside<sp/>=<sp/>ut[inside];</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(side.on)</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zsbnd<sp/>=<sp/>tex2D&lt;float&gt;(side.GPU.WLS.tex,<sp/>itime<sp/>+<sp/>0.5f,<sp/>itx<sp/>+<sp/>0.5f)<sp/>+<sp/>zsatm;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(side.type<sp/>==<sp/>4)</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//un<sp/>is<sp/>V<sp/>(top<sp/>or<sp/>bot<sp/>bnd)<sp/>or<sp/>U<sp/>(left<sp/>or<sp/>right<sp/>bnd)<sp/>depending<sp/>on<sp/>which<sp/>side<sp/>it&apos;s<sp/>dealing<sp/>with<sp/>(same<sp/>for<sp/>ut)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unbnd<sp/>=<sp/>side.isright<sp/>==<sp/>0<sp/>?<sp/>tex2D&lt;float&gt;(side.GPU.Vvel.tex,<sp/>itime<sp/>+<sp/>0.5f,<sp/>itx<sp/>+<sp/>0.5f)<sp/>:<sp/>tex2D&lt;float&gt;(side.GPU.Uvel.tex,<sp/>itime<sp/>+<sp/>0.5f,<sp/>itx<sp/>+<sp/>0.5f);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>utbnd<sp/>=<sp/>side.isright<sp/>==<sp/>0<sp/>?<sp/>tex2D&lt;float&gt;(side.GPU.Uvel.tex,<sp/>itime<sp/>+<sp/>0.5f,<sp/>itx<sp/>+<sp/>0.5f)<sp/>:<sp/>tex2D&lt;float&gt;(side.GPU.Vvel.tex,<sp/>itime<sp/>+<sp/>0.5f,<sp/>itx<sp/>+<sp/>0.5f);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(side.type<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">//<sp/>No<sp/>slip<sp/>==<sp/>no<sp/>friction<sp/>wall</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//noslipbnd(zsinside,<sp/>hinside,<sp/>unnew,<sp/>utnew,<sp/>zsnew,<sp/>hnew);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(side.type<sp/>==<sp/>1)<sp/></highlight><highlight class="comment">//<sp/>neumann<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Nothing<sp/>to<sp/>do<sp/>here?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(side.type<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dirichlet1D(T(XParam.g),<sp/>sign,<sp/>zsbnd,<sp/>zsinside,<sp/>hinside,<sp/>uninside,<sp/>unnew,<sp/>utnew,<sp/>zsnew,<sp/>hnew);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(side.type<sp/>==<sp/>3<sp/>)</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hnew<sp/>&gt;<sp/>XParam.eps<sp/>&amp;&amp;<sp/>hinside<sp/>&gt;<sp/>XParam.eps)</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ABS1D(T(XParam.g),<sp/>sign,<sp/>zsbnd,<sp/>zsinside,<sp/>hinside,<sp/>utinside,<sp/>unbnd,<sp/>unnew,<sp/>utnew,<sp/>zsnew,<sp/>hnew);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;No<sp/>boundary!\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(side.type<sp/>==<sp/>4)</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ABS1D(T(XParam.g),<sp/>sign,<sp/>zsbnd,<sp/>zsinside,<sp/>hinside,<sp/>utbnd,<sp/>unbnd,<sp/>unnew,<sp/>utnew,<sp/>zsnew,<sp/>hnew);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>un[i]<sp/>=<sp/>unnew;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>ut[i]<sp/>=<sp/>utnew;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>h[i]<sp/>=<sp/>hnew;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>zs[i]<sp/>=<sp/>zsnew;</highlight></codeline>
<codeline lineno="770"><highlight class="normal">}</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>__global__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>bndGPU&lt;float&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="classbndparam" kindref="compound">bndparam</ref><sp/>side,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;float&gt;</ref><sp/>XBlock,<sp/><ref refid="structDynForcingP" kindref="compound">DynForcingP&lt;float&gt;</ref><sp/>Atmp,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>itime,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>zs,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>h,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>un,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>ut);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>__global__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>bndGPU&lt;double&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="classbndparam" kindref="compound">bndparam</ref><sp/>side,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;double&gt;</ref><sp/>XBlock,<sp/><ref refid="structDynForcingP" kindref="compound">DynForcingP&lt;float&gt;</ref><sp/>Atmp,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>itime,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>zs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>h,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>un,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>ut);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/>__host__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>bndCPU(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="classbndparam" kindref="compound">bndparam</ref><sp/>side,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;T&gt;</ref><sp/>XBlock,<sp/>std::vector&lt;double&gt;<sp/>zsbndvec,<sp/>std::vector&lt;double&gt;<sp/>uubndvec,<sp/>std::vector&lt;double&gt;<sp/>vvbndvec,<sp/><ref refid="structDynForcingP" kindref="compound">DynForcingP&lt;float&gt;</ref><sp/>Atmp,<sp/>T*<sp/>zs,<sp/>T*<sp/>h,<sp/>T*<sp/>un,<sp/>T*<sp/>ut)</highlight></codeline>
<codeline lineno="775"><highlight class="normal">{</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>halowidth<sp/>=<sp/>XParam.halowidth;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blkmemwidth<sp/>=<sp/>XParam.blkmemwidth;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//unsigned<sp/>int<sp/>blksize<sp/>=<sp/>blkmemwidth<sp/>*<sp/>blkmemwidth;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>0;<sp/>ibl<sp/>&lt;<sp/>side.nblk;<sp/>ibl++)</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>side.blks[ibl];</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lev<sp/>=<sp/>XBlock.level[ib];</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbnd<sp/>=<sp/>side.nbnd;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>delta<sp/>=<sp/>calcres(T(XParam.dx),<sp/>lev);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tx<sp/>=<sp/>0;<sp/>tx<sp/>&lt;<sp/>XParam.blkwidth;<sp/>tx++)</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix,<sp/>iy;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>itx;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>xx,<sp/>yy;</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(side.isright<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ix<sp/>=<sp/>tx;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iy<sp/>=<sp/>side.istop<sp/>&lt;<sp/>0<sp/>?<sp/>0<sp/>:<sp/>(XParam.blkwidth<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//itx<sp/>=<sp/>(xx<sp/>-<sp/>XParam.xo)<sp/>/<sp/>(XParam.xmax<sp/>-<sp/>XParam.xo)<sp/>*<sp/>side.nbnd;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iy<sp/>=<sp/>tx;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ix<sp/>=<sp/>side.isright<sp/>&lt;<sp/>0<sp/>?<sp/>0<sp/>:<sp/>(XParam.blkwidth<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//itx<sp/>=<sp/>(yy<sp/>-<sp/>XParam.yo)<sp/>/<sp/>(XParam.ymax<sp/>-<sp/>XParam.yo)<sp/>*<sp/>side.nbnd;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xx<sp/>=<sp/>XBlock.xo[ib]<sp/>+<sp/>ix<sp/>*<sp/>delta;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yy<sp/>=<sp/>XBlock.yo[ib]<sp/>+<sp/>iy<sp/>*<sp/>delta;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>sign<sp/>=<sp/>T(side.isright)<sp/>+<sp/>T(side.istop);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(side.isright<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itx<sp/>=<sp/>(xx)<sp/>/<sp/>(XParam.xmax<sp/>-<sp/>XParam.xo)<sp/>*<sp/>side.nbnd;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itx<sp/>=<sp/>(yy)<sp/>/<sp/>(XParam.ymax<sp/>-<sp/>XParam.yo)<sp/>*<sp/>side.nbnd;</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>zsatm<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>atmpi<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.atmpforcing)</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Atmp.uniform)</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atmpi<sp/>=<sp/>T(Atmp.nowvalue);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atmpi<sp/>=<sp/>interp2BUQ(XParam.xo<sp/>+<sp/>xx,<sp/>XParam.yo<sp/>+<sp/>yy,<sp/>Atmp);</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zsatm<sp/>=<sp/>-(atmpi<sp/>-<sp/>(T)XParam.Paref)<sp/>*<sp/>(T)XParam.Pa2m;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>memloc(halowidth,<sp/>blkmemwidth,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inside<sp/>=<sp/>Inside(halowidth,<sp/>blkmemwidth,<sp/>side.isright,<sp/>side.istop,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>unnew,<sp/>utnew,<sp/>hnew,<sp/>zsnew;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>uninside,<sp/>utinside,<sp/>hinside,<sp/>zsinside;</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>zsbnd;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>unbnd<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>utbnd<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unnew<sp/>=<sp/>un[i];</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>utnew<sp/>=<sp/>ut[i];</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hnew<sp/>=<sp/>h[i];</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zsnew<sp/>=<sp/>zs[i];</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zsinside<sp/>=<sp/>zs[inside];</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hinside<sp/>=<sp/>h[inside];</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uninside<sp/>=<sp/>un[inside];</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>utinside<sp/>=<sp/>ut[inside];</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(side.on)</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iprev<sp/>=<sp/>utils::max(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(floor(itx<sp/>*<sp/>(side.nbnd<sp/>-<sp/>1))),<sp/>0);</highlight><highlight class="comment">//min(max((int)ceil(itx<sp/>/<sp/>(1<sp/>/<sp/>(side.nbnd<sp/>-<sp/>1))),<sp/>0),<sp/>(int)side.nbnd()<sp/>-<sp/>2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inext<sp/>=<sp/>iprev<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(side.nbnd<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zsbnd<sp/>=<sp/>zsbndvec[0]<sp/>+<sp/>zsatm;</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(side.type<sp/>==<sp/>4)</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unbnd<sp/>=<sp/>side.isright<sp/>==<sp/>0<sp/>?<sp/>vvbndvec[0]<sp/>:<sp/>uubndvec[0];</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>utbnd<sp/>=<sp/>side.isright<sp/>==<sp/>0<sp/>?<sp/>uubndvec[0]<sp/>:<sp/>vvbndvec[0];</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>here<sp/>interp<sp/>time<sp/>is<sp/>used<sp/>to<sp/>interpolate<sp/>to<sp/>the<sp/>right<sp/>node<sp/>rather<sp/>than<sp/>in<sp/>time...//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zsbnd<sp/>=<sp/>T(interptime(zsbndvec[inext],<sp/>zsbndvec[iprev],<sp/>1.0,<sp/>itx<sp/>*<sp/>(nbnd<sp/>-<sp/>1)<sp/>-<sp/>iprev))<sp/>+<sp/>zsatm;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(side.type<sp/>==<sp/>4)</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unbnd<sp/>=<sp/>side.isright<sp/>==<sp/>0<sp/>?<sp/>T(interptime(vvbndvec[inext],<sp/>vvbndvec[iprev],<sp/>1.0,<sp/>itx<sp/>*<sp/>(nbnd<sp/>-<sp/>1)<sp/>-<sp/>iprev))<sp/>:<sp/>T(interptime(uubndvec[inext],<sp/>uubndvec[iprev],<sp/>1.0,<sp/>itx<sp/>*<sp/>(nbnd<sp/>-<sp/>1)<sp/>-<sp/>iprev));</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>utbnd<sp/>=<sp/>side.isright<sp/>==<sp/>0<sp/>?<sp/>T(interptime(uubndvec[inext],<sp/>uubndvec[iprev],<sp/>1.0,<sp/>itx<sp/>*<sp/>(nbnd<sp/>-<sp/>1)<sp/>-<sp/>iprev))<sp/>:<sp/>T(interptime(vvbndvec[inext],<sp/>vvbndvec[iprev],<sp/>1.0,<sp/>itx<sp/>*<sp/>(nbnd<sp/>-<sp/>1)<sp/>-<sp/>iprev));</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(side.type<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">//<sp/>No<sp/>slip<sp/>==<sp/>no<sp/>friction<sp/>wall</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noslipbnd(zsinside,<sp/>hinside,<sp/>unnew,<sp/>utnew,<sp/>zsnew,<sp/>hnew);</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(side.type<sp/>==<sp/>1)<sp/></highlight><highlight class="comment">//<sp/>neumann<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Nothing<sp/>to<sp/>do<sp/>here?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(side.type<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dirichlet1D(T(XParam.g),<sp/>sign,<sp/>zsbnd,<sp/>zsinside,<sp/>hinside,<sp/>uninside,<sp/>unnew,<sp/>utnew,<sp/>zsnew,<sp/>hnew);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(side.type<sp/>==<sp/>3)</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hnew<sp/>&gt;<sp/>XParam.eps<sp/>&amp;&amp;<sp/>hinside<sp/>&gt;<sp/>XParam.eps)</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ABS1D(T(XParam.g),<sp/>sign,<sp/>zsbnd,<sp/>zsinside,<sp/>hinside,<sp/>utinside,<sp/>unbnd,<sp/>unnew,<sp/>utnew,<sp/>zsnew,<sp/>hnew);</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(side.type<sp/>==<sp/>4)</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ABS1D(T(XParam.g),<sp/>sign,<sp/>zsbnd,<sp/>zsinside,<sp/>hinside,<sp/>utbnd,<sp/>unbnd,<sp/>unnew,<sp/>utnew,<sp/>zsnew,<sp/>hnew);</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>un[i]<sp/>=<sp/>unnew;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ut[i]<sp/>=<sp/>utnew;</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h[i]<sp/>=<sp/>hnew;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zs[i]<sp/>=<sp/>zsnew;</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="919"><highlight class="normal">}</highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>__host__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>bndCPU&lt;float&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="classbndparam" kindref="compound">bndparam</ref><sp/>side,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;float&gt;</ref><sp/>XBlock,<sp/>std::vector&lt;double&gt;<sp/>zsbndvec,<sp/>std::vector&lt;double&gt;<sp/>uubndvec,<sp/>std::vector&lt;double&gt;<sp/>vvbndvec,<sp/><ref refid="structDynForcingP" kindref="compound">DynForcingP&lt;float&gt;</ref><sp/>Atmp,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>zs,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>h,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>un,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>ut);</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>__host__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>bndCPU&lt;double&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="classbndparam" kindref="compound">bndparam</ref><sp/>side,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;double&gt;</ref><sp/>XBlock,<sp/>std::vector&lt;double&gt;<sp/>zsbndvec,<sp/>std::vector&lt;double&gt;<sp/>uubndvec,<sp/>std::vector&lt;double&gt;<sp/>vvbndvec,<sp/><ref refid="structDynForcingP" kindref="compound">DynForcingP&lt;float&gt;</ref><sp/>Atmp,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>zs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>h,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>un,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>ut);</highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight><highlight class="comment">//<sp/>function<sp/>to<sp/>apply<sp/>bnd<sp/>at<sp/>the<sp/>boundary<sp/>with<sp/>masked<sp/>blocked</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight><highlight class="comment">//<sp/>here<sp/>a<sp/>wall<sp/>is<sp/>applied<sp/>in<sp/>the<sp/>halo<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/>__host__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>maskbnd(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;T&gt;</ref><sp/>XBlock,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;T&gt;</ref><sp/>Xev,<sp/>T*zb)</highlight></codeline>
<codeline lineno="927"><highlight class="normal">{</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>halowidth<sp/>=<sp/>XParam.halowidth;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blkmemwidth<sp/>=<sp/>XParam.blkmemwidth;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//unsigned<sp/>int<sp/>blksize<sp/>=<sp/>blkmemwidth<sp/>*<sp/>blkmemwidth;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isright,istop;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>zsinside,zsnew,hnew,vnew,unew,zbnew;</highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isleftbot,<sp/>islefttop,<sp/>istopleft,<sp/>istopright,<sp/>isrighttop,<sp/>isrightbot,<sp/>isbotright,<sp/>isbotleft;</highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>0;<sp/>ibl<sp/>&lt;XBlock.mask.nblk<sp/>;<sp/>ibl++)</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>XBlock.mask.blks[ibl];</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lev<sp/>=<sp/>XBlock.level[ib];</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>delta<sp/>=<sp/>calcres(T(XParam.dx),<sp/>lev);</highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>where<sp/>the<sp/>mask<sp/>applies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>findmaskside(XBlock.mask.side[ibl],<sp/>isleftbot,<sp/>islefttop,<sp/>istopleft,<sp/>istopright,<sp/>isrighttop,<sp/>isrightbot,<sp/>isbotright,<sp/>isbotleft);</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//leftside</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isleftbot<sp/>|<sp/>islefttop<sp/>)</highlight><highlight class="comment">//?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isright<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>istop<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yst<sp/>=<sp/>isleftbot<sp/>?<sp/>0<sp/>:<sp/>ftoi(XParam.blkwidth<sp/>*<sp/>0.5);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ynd<sp/>=<sp/>islefttop<sp/>?<sp/>XParam.blkwidth<sp/>:<sp/>ftoi(XParam.blkwidth<sp/>*<sp/>0.5);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy<sp/>=<sp/>yst;<sp/>iy<sp/>&lt;<sp/>ynd;<sp/>iy++)</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>memloc(halowidth,<sp/>blkmemwidth,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inside<sp/>=<sp/>Inside(halowidth,<sp/>blkmemwidth,<sp/>isright,<sp/>istop,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zsinside<sp/>=<sp/>Xev.zs[inside];</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unew<sp/>=<sp/>Xev.u[i];</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vnew<sp/>=<sp/>Xev.v[i];</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zsnew<sp/>=<sp/>Xev.zs[i];</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hnew<sp/>=<sp/>Xev.h[i];</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zbnew<sp/>=<sp/>zb[i];</highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>halowall(zsinside,<sp/>unew,<sp/>vnew,<sp/>zsnew,<sp/>hnew,<sp/>zbnew);</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xev.u[i]=unew;</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xev.v[i]=vnew;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xev.zs[i]=zsnew;</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xev.h[i]=hnew;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zb[i]=zbnew;</highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//topside</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(istopleft<sp/>|<sp/>istopright)</highlight><highlight class="comment">//?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isright<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>istop<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy<sp/>=<sp/>XParam.blkwidth;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xst<sp/>=<sp/>istopleft<sp/>?<sp/>0<sp/>:<sp/>ftoi(XParam.blkwidth<sp/>*<sp/>0.5);</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xnd<sp/>=<sp/>istopright<sp/>?<sp/>XParam.blkwidth<sp/>:<sp/>ftoi(XParam.blkwidth<sp/>*<sp/>0.5);</highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>xst;<sp/>ix<sp/>&lt;<sp/>xnd;<sp/>ix++)</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>memloc(halowidth,<sp/>blkmemwidth,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inside<sp/>=<sp/>Inside(halowidth,<sp/>blkmemwidth,<sp/>isright,<sp/>istop,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zsinside<sp/>=<sp/>Xev.zs[inside];</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unew<sp/>=<sp/>Xev.u[i];</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vnew<sp/>=<sp/>Xev.v[i];</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zsnew<sp/>=<sp/>Xev.zs[i];</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hnew<sp/>=<sp/>Xev.h[i];</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zbnew<sp/>=<sp/>zb[i];</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>halowall(zsinside,<sp/>unew,<sp/>vnew,<sp/>zsnew,<sp/>hnew,<sp/>zbnew);</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xev.u[i]<sp/>=<sp/>unew;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xev.v[i]<sp/>=<sp/>vnew;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xev.zs[i]<sp/>=<sp/>zsnew;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xev.h[i]<sp/>=<sp/>hnew;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zb[i]<sp/>=<sp/>zbnew;</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//rightside</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isrighttop<sp/>|<sp/>isrightbot)</highlight><highlight class="comment">//?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isright<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>istop<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>XParam.blkwidth;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yst<sp/>=<sp/>isrightbot<sp/>?<sp/>0<sp/>:<sp/>ftoi(XParam.blkwidth<sp/>*<sp/>0.5);</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ynd<sp/>=<sp/>isrighttop<sp/>?<sp/>XParam.blkwidth<sp/>:<sp/>ftoi(XParam.blkwidth<sp/>*<sp/>0.5);</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy<sp/>=<sp/>yst;<sp/>iy<sp/>&lt;<sp/>ynd;<sp/>iy++)</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>memloc(halowidth,<sp/>blkmemwidth,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inside<sp/>=<sp/>Inside(halowidth,<sp/>blkmemwidth,<sp/>isright,<sp/>istop,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zsinside<sp/>=<sp/>Xev.zs[inside];</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unew<sp/>=<sp/>Xev.u[i];</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vnew<sp/>=<sp/>Xev.v[i];</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zsnew<sp/>=<sp/>Xev.zs[i];</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hnew<sp/>=<sp/>Xev.h[i];</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zbnew<sp/>=<sp/>zb[i];</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>halowall(zsinside,<sp/>unew,<sp/>vnew,<sp/>zsnew,<sp/>hnew,<sp/>zbnew);</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xev.u[i]<sp/>=<sp/>unew;</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xev.v[i]<sp/>=<sp/>vnew;</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xev.zs[i]<sp/>=<sp/>zsnew;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xev.h[i]<sp/>=<sp/>hnew;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zb[i]<sp/>=<sp/>zbnew;</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//botside</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isbotright<sp/>|<sp/>isbotleft)</highlight><highlight class="comment">//?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isright<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>istop<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xst<sp/>=<sp/>isbotleft<sp/>?<sp/>0<sp/>:<sp/>ftoi(XParam.blkwidth<sp/>*<sp/>0.5);</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xnd<sp/>=<sp/>isbotright<sp/>?<sp/>XParam.blkwidth<sp/>:ftoi(<sp/>XParam.blkwidth<sp/>*<sp/>0.5);</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>xst;<sp/>ix<sp/>&lt;<sp/>xnd;<sp/>ix++)</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>memloc(halowidth,<sp/>blkmemwidth,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inside<sp/>=<sp/>Inside(halowidth,<sp/>blkmemwidth,<sp/>isright,<sp/>istop,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zsinside<sp/>=<sp/>Xev.zs[inside];</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unew<sp/>=<sp/>Xev.u[i];</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vnew<sp/>=<sp/>Xev.v[i];</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zsnew<sp/>=<sp/>Xev.zs[i];</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hnew<sp/>=<sp/>Xev.h[i];</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zbnew<sp/>=<sp/>zb[i];</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>halowall(zsinside,<sp/>unew,<sp/>vnew,<sp/>zsnew,<sp/>hnew,<sp/>zbnew);</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xev.u[i]<sp/>=<sp/>unew;</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xev.v[i]<sp/>=<sp/>vnew;</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xev.zs[i]<sp/>=<sp/>zsnew;</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xev.h[i]<sp/>=<sp/>hnew;</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zb[i]<sp/>=<sp/>zbnew;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1090"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>__host__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>maskbnd&lt;float&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;float&gt;</ref><sp/>XBlock,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;float&gt;</ref><sp/>Xev,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>zb);</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>__host__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>maskbnd&lt;double&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;double&gt;</ref><sp/>XBlock,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;double&gt;</ref><sp/>Xev,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>zb);</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight><highlight class="comment">//For<sp/>the<sp/>GPU<sp/>version<sp/>we<sp/>apply<sp/>4<sp/>separate<sp/>global<sp/>function<sp/>in<sp/>the<sp/>hope<sp/>to<sp/>increase<sp/>occupancy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/>__global__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>maskbndGPUleft(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;T&gt;</ref><sp/>XBlock,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;T&gt;</ref><sp/>Xev,<sp/>T*<sp/>zb)</highlight></codeline>
<codeline lineno="1096"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>halowidth<sp/>=<sp/>XParam.halowidth;</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blkmemwidth<sp/>=<sp/>XParam.blkmemwidth;</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//unsigned<sp/>int<sp/>blksize<sp/>=<sp/>blkmemwidth<sp/>*<sp/>blkmemwidth;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>blockIdx.x;</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ibl<sp/>&lt;<sp/>XBlock.mask.nblk)</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix,<sp/>iy;</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isright,<sp/>istop;</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>zsinside,<sp/>zsnew,<sp/>hnew,<sp/>vnew,<sp/>unew,<sp/>zbnew;</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>hinside;</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isleftbot,<sp/>islefttop,<sp/>istopleft,<sp/>istopright,<sp/>isrighttop,<sp/>isrightbot,<sp/>isbotright,<sp/>isbotleft;</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>XBlock.mask.blks[ibl];</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>findmaskside(XBlock.mask.side[ibl],<sp/>isleftbot,<sp/>islefttop,<sp/>istopleft,<sp/>istopright,<sp/>isrighttop,<sp/>isrightbot,<sp/>isbotright,<sp/>isbotleft);</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//leftside</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isleftbot<sp/>|<sp/>islefttop)</highlight><highlight class="comment">//?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isright<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>istop<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ix<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iy<sp/>=<sp/>threadIdx.x;</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yst<sp/>=<sp/>isleftbot<sp/>?<sp/>0<sp/>:<sp/>XParam.blkwidth<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ynd<sp/>=<sp/>islefttop<sp/>?<sp/>XParam.blkwidth<sp/>:<sp/>XParam.blkwidth<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iy<sp/>&gt;=<sp/>yst<sp/>&amp;&amp;<sp/>iy<sp/>&lt;<sp/>ynd)</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>memloc(halowidth,<sp/>blkmemwidth,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inside<sp/>=<sp/>Inside(halowidth,<sp/>blkmemwidth,<sp/>isright,<sp/>istop,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zsinside<sp/>=<sp/>Xev.zs[inside];</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hinside<sp/>=<sp/>Xev.h[inside];</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unew<sp/>=<sp/>Xev.u[i];</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vnew<sp/>=<sp/>Xev.v[i];</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zsnew<sp/>=<sp/>Xev.zs[i];</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hnew<sp/>=<sp/>Xev.h[i];</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zbnew<sp/>=<sp/>zb[i];</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//halowall(zsinside,<sp/>unew,<sp/>vnew,<sp/>zsnew,<sp/>hnew,<sp/>zbnew);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//noslipbnd(zsinside,<sp/>hinside,<sp/>unew,<sp/>vnew,<sp/>zsnew,<sp/>hnew);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xev.u[i]<sp/>=<sp/>unew;</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xev.v[i]<sp/>=<sp/>vnew;</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xev.zs[i]<sp/>=<sp/>zsnew;</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xev.h[i]<sp/>=<sp/>hnew;</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zb[i]<sp/>=<sp/>zbnew;</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>__global__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>maskbndGPUleft&lt;float&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;float&gt;</ref><sp/>XBlock,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;float&gt;</ref><sp/>Xev,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>zb);</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>__global__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>maskbndGPUleft&lt;double&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;double&gt;</ref><sp/>XBlock,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;double&gt;</ref><sp/>Xev,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>zb);</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/>__global__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>maskbndGPUFluxleft(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;T&gt;</ref><sp/>XBlock,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;T&gt;</ref><sp/>Xev,<sp/><ref refid="structFluxP" kindref="compound">FluxP&lt;T&gt;</ref><sp/>Flux)</highlight></codeline>
<codeline lineno="1165"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>halowidth<sp/>=<sp/>XParam.halowidth;</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blkmemwidth<sp/>=<sp/>XParam.blkmemwidth;</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//unsigned<sp/>int<sp/>blksize<sp/>=<sp/>blkmemwidth<sp/>*<sp/>blkmemwidth;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>blockIdx.x;</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ibl<sp/>&lt;<sp/>XBlock.mask.nblk)</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix,<sp/>iy;</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isright,<sp/>istop;</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//T<sp/>zsinside,<sp/>zsnew,<sp/>hnew,<sp/>vnew,<sp/>unew,<sp/>zbnew;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//T<sp/>hinside;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isleftbot,<sp/>islefttop,<sp/>istopleft,<sp/>istopright,<sp/>isrighttop,<sp/>isrightbot,<sp/>isbotright,<sp/>isbotleft;</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>XBlock.mask.blks[ibl];</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>findmaskside(XBlock.mask.side[ibl],<sp/>isleftbot,<sp/>islefttop,<sp/>istopleft,<sp/>istopright,<sp/>isrighttop,<sp/>isrightbot,<sp/>isbotright,<sp/>isbotleft);</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//leftside</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isleftbot<sp/>|<sp/>islefttop)</highlight><highlight class="comment">//?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isright<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>istop<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ix<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iy<sp/>=<sp/>threadIdx.x;</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yst<sp/>=<sp/>isleftbot<sp/>?<sp/>0<sp/>:<sp/>XParam.blkwidth<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ynd<sp/>=<sp/>islefttop<sp/>?<sp/>XParam.blkwidth<sp/>:<sp/>XParam.blkwidth<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iy<sp/>&gt;=<sp/>yst<sp/>&amp;&amp;<sp/>iy<sp/>&lt;<sp/>ynd)</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>memloc(halowidth,<sp/>blkmemwidth,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inside<sp/>=<sp/>Inside(halowidth,<sp/>blkmemwidth,<sp/>isright,<sp/>istop,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>zsinside<sp/>=<sp/>Xev.zs[inside];</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>zsi<sp/>=<sp/>Xev.zs[i];</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>hinside<sp/>=<sp/>Xev.h[i];</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>zsbnd<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>qmean<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>factime<sp/>=<sp/>min(T(XParam.dt<sp/>/<sp/>60.0),<sp/>T(1.0));</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>facrel<sp/>=<sp/>T(1.0)<sp/>-<sp/>min(T(XParam.dt<sp/>/<sp/>3600.0),<sp/>T(1.0));</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.aoibnd<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noslipbndQ(Flux.Fhu[inside],<sp/>Flux.Fqux[i],<sp/>Flux.Su[inside]);<sp/></highlight><highlight class="comment">//noslipbndQ(T<sp/>&amp;<sp/>F,<sp/>T<sp/>&amp;<sp/>G,<sp/>T<sp/>&amp;<sp/>S)<sp/>F<sp/>=<sp/>T(0.0);<sp/>S<sp/>=<sp/>G;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ABS1DQ(T<sp/>g,<sp/>T<sp/>sign,<sp/>T<sp/>factime,<sp/>T<sp/>facrel,<sp/>T<sp/>zs,<sp/>T<sp/>zsbnd,<sp/>T<sp/>zsinside,<sp/>T<sp/>h,<sp/>T<sp/>&amp;<sp/>qmean,<sp/>T<sp/>&amp;<sp/>q,<sp/>T<sp/>&amp;<sp/>G,<sp/>T<sp/>&amp;<sp/>S)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ABS1DQ(T<sp/>g,<sp/>T<sp/>sign,<sp/>T<sp/>factime,<sp/>T<sp/>facrel,<sp/>T<sp/>zs,<sp/>T<sp/>zsbnd,<sp/>T<sp/>zsinside,<sp/>T<sp/>h,<sp/>T<sp/>&amp;<sp/>qmean,<sp/>T<sp/>&amp;<sp/>q,<sp/>T<sp/>&amp;<sp/>G,<sp/>T<sp/>&amp;<sp/>S)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.aoibnd<sp/>==<sp/>3)</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hinside<sp/>&gt;<sp/>XParam.eps)</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ABS1DQ(T(XParam.g),<sp/>T(-1.0),<sp/>factime,<sp/>facrel,<sp/>zsi,<sp/>zsbnd,<sp/>zsinside,<sp/>hinside,<sp/>qmean,<sp/>Flux.Fhu[inside],<sp/>Flux.Fqux[i],<sp/>Flux.Su[inside]);</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noslipbndQ(Flux.Fhu[inside],<sp/>Flux.Fqux[i],<sp/>Flux.Su[inside]);</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>__global__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>maskbndGPUFluxleft&lt;float&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;float&gt;</ref><sp/>XBlock,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;float&gt;</ref><sp/>Xev,<sp/><ref refid="structFluxP" kindref="compound">FluxP&lt;float&gt;</ref><sp/>Flux);</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>__global__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>maskbndGPUFluxleft&lt;double&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;double&gt;</ref><sp/>XBlock,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;double&gt;</ref><sp/>Xev,<sp/><ref refid="structFluxP" kindref="compound">FluxP&lt;double&gt;</ref><sp/>Flux);</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/>__global__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>maskbndGPUtop(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;T&gt;</ref><sp/>XBlock,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;T&gt;</ref><sp/>Xev,<sp/>T*<sp/>zb)</highlight></codeline>
<codeline lineno="1240"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>halowidth<sp/>=<sp/>XParam.halowidth;</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blkmemwidth<sp/>=<sp/>XParam.blkmemwidth;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//unsigned<sp/>int<sp/>blksize<sp/>=<sp/>blkmemwidth<sp/>*<sp/>blkmemwidth;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>blockIdx.x;</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ibl<sp/>&lt;<sp/>XBlock.mask.nblk)</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix,<sp/>iy;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isright,<sp/>istop;</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>zsinside,<sp/>zsnew,<sp/>hnew,<sp/>vnew,<sp/>unew,<sp/>zbnew;</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>hinside;</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isleftbot,<sp/>islefttop,<sp/>istopleft,<sp/>istopright,<sp/>isrighttop,<sp/>isrightbot,<sp/>isbotright,<sp/>isbotleft;</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>XBlock.mask.blks[ibl];</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>findmaskside(XBlock.mask.side[ibl],<sp/>isleftbot,<sp/>islefttop,<sp/>istopleft,<sp/>istopright,<sp/>isrighttop,<sp/>isrightbot,<sp/>isbotright,<sp/>isbotleft);</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(istopleft<sp/>|<sp/>istopright)</highlight><highlight class="comment">//?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isright<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>istop<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iy<sp/>=<sp/>XParam.blkwidth;</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ix<sp/>=<sp/>threadIdx.x;</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xst<sp/>=<sp/>istopleft<sp/>?<sp/>0<sp/>:<sp/>XParam.blkwidth<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xnd<sp/>=<sp/>istopright<sp/>?<sp/>XParam.blkwidth<sp/>:<sp/>XParam.blkwidth<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ix<sp/>&gt;=<sp/>xst<sp/>&amp;&amp;<sp/>ix<sp/>&lt;<sp/>xnd)</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>memloc(halowidth,<sp/>blkmemwidth,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inside<sp/>=<sp/>Inside(halowidth,<sp/>blkmemwidth,<sp/>isright,<sp/>istop,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zsinside<sp/>=<sp/>Xev.zs[inside];</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hinside<sp/>=<sp/>Xev.h[inside];</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unew<sp/>=<sp/>Xev.u[i];</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vnew<sp/>=<sp/>Xev.v[i];</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zsnew<sp/>=<sp/>Xev.zs[i];</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hnew<sp/>=<sp/>Xev.h[i];</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zbnew<sp/>=<sp/>zb[i];</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//halowall(zsinside,<sp/>unew,<sp/>vnew,<sp/>zsnew,<sp/>hnew,<sp/>zbnew);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//noslipbnd(zsinside,<sp/>hinside,<sp/>vnew,<sp/>unew,<sp/>zsnew,<sp/>hnew);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xev.u[i]<sp/>=<sp/>unew;</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xev.v[i]<sp/>=<sp/>vnew;</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xev.zs[i]<sp/>=<sp/>zsnew;</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xev.h[i]<sp/>=<sp/>hnew;</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zb[i]<sp/>=<sp/>zbnew;</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>__global__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>maskbndGPUtop&lt;float&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;float&gt;</ref><sp/>XBlock,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;float&gt;</ref><sp/>Xev,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>zb);</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>__global__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>maskbndGPUtop&lt;double&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;double&gt;</ref><sp/>XBlock,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;double&gt;</ref><sp/>Xev,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>zb);</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/>__global__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>maskbndGPUFluxtop(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;T&gt;</ref><sp/>XBlock,<sp/><sp/><ref refid="structFluxP" kindref="compound">FluxP&lt;T&gt;</ref><sp/>Flux)</highlight></codeline>
<codeline lineno="1302"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>halowidth<sp/>=<sp/>XParam.halowidth;</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blkmemwidth<sp/>=<sp/>XParam.blkmemwidth;</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//unsigned<sp/>int<sp/>blksize<sp/>=<sp/>blkmemwidth<sp/>*<sp/>blkmemwidth;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>blockIdx.x;</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ibl<sp/>&lt;<sp/>XBlock.mask.nblk)</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix,<sp/>iy;</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isright,<sp/>istop;</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>hinside;</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isleftbot,<sp/>islefttop,<sp/>istopleft,<sp/>istopright,<sp/>isrighttop,<sp/>isrightbot,<sp/>isbotright,<sp/>isbotleft;</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>XBlock.mask.blks[ibl];</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>findmaskside(XBlock.mask.side[ibl],<sp/>isleftbot,<sp/>islefttop,<sp/>istopleft,<sp/>istopright,<sp/>isrighttop,<sp/>isrightbot,<sp/>isbotright,<sp/>isbotleft);</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(istopleft<sp/>|<sp/>istopright)</highlight><highlight class="comment">//?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isright<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>istop<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iy<sp/>=<sp/>XParam.blkwidth;</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ix<sp/>=<sp/>threadIdx.x;</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xst<sp/>=<sp/>istopleft<sp/>?<sp/>0<sp/>:<sp/>XParam.blkwidth<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xnd<sp/>=<sp/>istopright<sp/>?<sp/>XParam.blkwidth<sp/>:<sp/>XParam.blkwidth<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ix<sp/>&gt;=<sp/>xst<sp/>&amp;&amp;<sp/>ix<sp/>&lt;<sp/>xnd)</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>memloc(halowidth,<sp/>blkmemwidth,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inside<sp/>=<sp/>Inside(halowidth,<sp/>blkmemwidth,<sp/>isright,<sp/>istop,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noslipbndQ(Flux.Fhv[i],<sp/>Flux.Sv[i],<sp/>Flux.Fqvy[inside]);<sp/></highlight><highlight class="comment">//noslipbndQ(T<sp/>&amp;<sp/>F,<sp/>T<sp/>&amp;<sp/>G,<sp/>T<sp/>&amp;<sp/>S)<sp/>F<sp/>=<sp/>T(0.0);<sp/>S<sp/>=<sp/>G;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>__global__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>maskbndGPUFluxtop&lt;float&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;float&gt;</ref><sp/>XBlock,<sp/><ref refid="structFluxP" kindref="compound">FluxP&lt;float&gt;</ref><sp/>Flux);</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>__global__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>maskbndGPUFluxtop&lt;double&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;double&gt;</ref><sp/>XBlock,<sp/><ref refid="structFluxP" kindref="compound">FluxP&lt;double&gt;</ref><sp/>Flux);</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/>__global__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>maskbndGPUright(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;T&gt;</ref><sp/>XBlock,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;T&gt;</ref><sp/>Xev,<sp/>T*<sp/>zb)</highlight></codeline>
<codeline lineno="1350"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>halowidth<sp/>=<sp/>XParam.halowidth;</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blkmemwidth<sp/>=<sp/>XParam.blkmemwidth;</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//unsigned<sp/>int<sp/>blksize<sp/>=<sp/>blkmemwidth<sp/>*<sp/>blkmemwidth;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>blockIdx.x;</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ibl<sp/>&lt;<sp/>XBlock.mask.nblk)</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix,<sp/>iy;</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isright,<sp/>istop;</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>zsinside,<sp/>zsnew,<sp/>hnew,<sp/>vnew,<sp/>unew,<sp/>zbnew;</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>hinside;</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isleftbot,<sp/>islefttop,<sp/>istopleft,<sp/>istopright,<sp/>isrighttop,<sp/>isrightbot,<sp/>isbotright,<sp/>isbotleft;</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>XBlock.mask.blks[ibl];</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>findmaskside(XBlock.mask.side[ibl],<sp/>isleftbot,<sp/>islefttop,<sp/>istopleft,<sp/>istopright,<sp/>isrighttop,<sp/>isrightbot,<sp/>isbotright,<sp/>isbotleft);</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isrighttop<sp/>|<sp/>isrightbot)</highlight><highlight class="comment">//?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isright<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>istop<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ix<sp/>=<sp/>XParam.blkwidth;</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"></highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iy<sp/>=<sp/>threadIdx.x;</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yst<sp/>=<sp/>isrightbot<sp/>?<sp/>0<sp/>:<sp/>XParam.blkwidth<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ynd<sp/>=<sp/>isrighttop<sp/>?<sp/>XParam.blkwidth<sp/>:<sp/>XParam.blkwidth<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iy<sp/>&gt;=<sp/>yst<sp/>&amp;&amp;<sp/>iy<sp/>&lt;<sp/>ynd)</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>memloc(halowidth,<sp/>blkmemwidth,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inside<sp/>=<sp/>Inside(halowidth,<sp/>blkmemwidth,<sp/>isright,<sp/>istop,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zsinside<sp/>=<sp/>Xev.zs[inside];</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hinside<sp/>=<sp/>Xev.h[inside];</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unew<sp/>=<sp/>Xev.u[i];</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vnew<sp/>=<sp/>Xev.v[i];</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zsnew<sp/>=<sp/>Xev.zs[i];</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hnew<sp/>=<sp/>Xev.h[i];</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zbnew<sp/>=<sp/>zb[i];</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//halowall(zsinside,<sp/>unew,<sp/>vnew,<sp/>zsnew,<sp/>hnew,<sp/>zbnew);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//noslipbnd(zsinside,<sp/>hinside,<sp/>unew,<sp/>vnew,<sp/>zsnew,<sp/>hnew);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xev.u[i]<sp/>=<sp/>unew;</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xev.v[i]<sp/>=<sp/>vnew;</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xev.zs[i]<sp/>=<sp/>zsnew;</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xev.h[i]<sp/>=<sp/>hnew;</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zb[i]<sp/>=<sp/>zbnew;</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1408"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>__global__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>maskbndGPUright&lt;float&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;float&gt;</ref><sp/>XBlock,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;float&gt;</ref><sp/>Xev,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>zb);</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>__global__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>maskbndGPUright&lt;double&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;double&gt;</ref><sp/>XBlock,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;double&gt;</ref><sp/>Xev,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>zb);</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/>__global__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>maskbndGPUFluxright(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;T&gt;</ref><sp/>XBlock,<sp/><ref refid="structFluxP" kindref="compound">FluxP&lt;T&gt;</ref><sp/>Flux)</highlight></codeline>
<codeline lineno="1414"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>halowidth<sp/>=<sp/>XParam.halowidth;</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blkmemwidth<sp/>=<sp/>XParam.blkmemwidth;</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//unsigned<sp/>int<sp/>blksize<sp/>=<sp/>blkmemwidth<sp/>*<sp/>blkmemwidth;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>blockIdx.x;</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ibl<sp/>&lt;<sp/>XBlock.mask.nblk)</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix,<sp/>iy;</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"></highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isright,<sp/>istop;</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//T<sp/>zsinside,<sp/>zsnew,<sp/>hnew,<sp/>vnew,<sp/>unew,<sp/>zbnew;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//T<sp/>hinside;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isleftbot,<sp/>islefttop,<sp/>istopleft,<sp/>istopright,<sp/>isrighttop,<sp/>isrightbot,<sp/>isbotright,<sp/>isbotleft;</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>XBlock.mask.blks[ibl];</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>findmaskside(XBlock.mask.side[ibl],<sp/>isleftbot,<sp/>islefttop,<sp/>istopleft,<sp/>istopright,<sp/>isrighttop,<sp/>isrightbot,<sp/>isbotright,<sp/>isbotleft);</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isrighttop<sp/>|<sp/>isrightbot)</highlight><highlight class="comment">//?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isright<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>istop<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ix<sp/>=<sp/>XParam.blkwidth;</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"></highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iy<sp/>=<sp/>threadIdx.x;</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"></highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yst<sp/>=<sp/>isrightbot<sp/>?<sp/>0<sp/>:<sp/>XParam.blkwidth<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ynd<sp/>=<sp/>isrighttop<sp/>?<sp/>XParam.blkwidth<sp/>:<sp/>XParam.blkwidth<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iy<sp/>&gt;=<sp/>yst<sp/>&amp;&amp;<sp/>iy<sp/>&lt;<sp/>ynd)</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>memloc(halowidth,<sp/>blkmemwidth,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inside<sp/>=<sp/>Inside(halowidth,<sp/>blkmemwidth,<sp/>isright,<sp/>istop,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noslipbndQ(Flux.Fhu[i],<sp/>Flux.Su[i],<sp/>Flux.Fqux[inside]);<sp/></highlight><highlight class="comment">//noslipbndQ(T<sp/>&amp;<sp/>F,<sp/>T<sp/>&amp;<sp/>G,<sp/>T<sp/>&amp;<sp/>S)<sp/>F<sp/>=<sp/>T(0.0);<sp/>S<sp/>=<sp/>G;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1458"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>__global__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>maskbndGPUFluxright&lt;float&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;float&gt;</ref><sp/>XBlock,<sp/><ref refid="structFluxP" kindref="compound">FluxP&lt;float&gt;</ref><sp/>Flux);</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>__global__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>maskbndGPUFluxright&lt;double&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;double&gt;</ref><sp/>XBlock,<sp/><ref refid="structFluxP" kindref="compound">FluxP&lt;double&gt;</ref><sp/>Flux);</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/>__global__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>maskbndGPUbot(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;T&gt;</ref><sp/>XBlock,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;T&gt;</ref><sp/>Xev,<sp/>T*<sp/>zb)</highlight></codeline>
<codeline lineno="1463"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>halowidth<sp/>=<sp/>XParam.halowidth;</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blkmemwidth<sp/>=<sp/>XParam.blkmemwidth;</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//unsigned<sp/>int<sp/>blksize<sp/>=<sp/>blkmemwidth<sp/>*<sp/>blkmemwidth;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>blockIdx.x;</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ibl<sp/>&lt;<sp/>XBlock.mask.nblk)</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix,<sp/>iy;</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isright,<sp/>istop;</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"></highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>zsinside,<sp/>zsnew,<sp/>hnew,<sp/>vnew,<sp/>unew,<sp/>zbnew;</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>hinside;</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isleftbot,<sp/>islefttop,<sp/>istopleft,<sp/>istopright,<sp/>isrighttop,<sp/>isrightbot,<sp/>isbotright,<sp/>isbotleft;</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>XBlock.mask.blks[ibl];</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>findmaskside(XBlock.mask.side[ibl],<sp/>isleftbot,<sp/>islefttop,<sp/>istopleft,<sp/>istopright,<sp/>isrighttop,<sp/>isrightbot,<sp/>isbotright,<sp/>isbotleft);</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isbotright<sp/>|<sp/>isbotleft)</highlight><highlight class="comment">//?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isright<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>istop<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iy<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ix<sp/>=<sp/>threadIdx.x;</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xst<sp/>=<sp/>isbotleft<sp/>?<sp/>0<sp/>:<sp/>XParam.blkwidth<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xnd<sp/>=<sp/>isbotright<sp/>?<sp/>XParam.blkwidth<sp/>:<sp/>XParam.blkwidth<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ix<sp/>&gt;=<sp/>xst<sp/>&amp;&amp;<sp/>ix<sp/>&lt;<sp/>xnd)</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>memloc(halowidth,<sp/>blkmemwidth,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inside<sp/>=<sp/>Inside(halowidth,<sp/>blkmemwidth,<sp/>isright,<sp/>istop,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zsinside<sp/>=<sp/>Xev.zs[inside];</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hinside<sp/>=<sp/>Xev.h[inside];</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unew<sp/>=<sp/>Xev.u[i];</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vnew<sp/>=<sp/>Xev.v[i];</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zsnew<sp/>=<sp/>Xev.zs[i];</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hnew<sp/>=<sp/>Xev.h[i];</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zbnew<sp/>=<sp/>zb[i];</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"></highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//halowall(zsinside,<sp/>unew,<sp/>vnew,<sp/>zsnew,<sp/>hnew,<sp/>zbnew);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//noslipbnd(zsinside,<sp/>hinside,<sp/>vnew,<sp/>unew,<sp/>zsnew,<sp/>hnew);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xev.u[i]<sp/>=<sp/>unew;</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xev.v[i]<sp/>=<sp/>vnew;</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xev.zs[i]<sp/>=<sp/>zsnew;</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xev.h[i]<sp/>=<sp/>hnew;</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zb[i]<sp/>=<sp/>zbnew;</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1522"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>__global__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>maskbndGPUbot&lt;float&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;float&gt;</ref><sp/>XBlock,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;float&gt;</ref><sp/>Xev,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>zb);</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>__global__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>maskbndGPUbot&lt;double&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;double&gt;</ref><sp/>XBlock,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;double&gt;</ref><sp/>Xev,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>zb);</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"></highlight></codeline>
<codeline lineno="1526"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/>__global__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>maskbndGPUFluxbot(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;T&gt;</ref><sp/>XBlock,<sp/><ref refid="structFluxP" kindref="compound">FluxP&lt;T&gt;</ref><sp/>Flux)</highlight></codeline>
<codeline lineno="1527"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>halowidth<sp/>=<sp/>XParam.halowidth;</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blkmemwidth<sp/>=<sp/>XParam.blkmemwidth;</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//unsigned<sp/>int<sp/>blksize<sp/>=<sp/>blkmemwidth<sp/>*<sp/>blkmemwidth;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>blockIdx.x;</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ibl<sp/>&lt;<sp/>XBlock.mask.nblk)</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix,<sp/>iy;</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"></highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isright,<sp/>istop;</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"></highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>zsinside,<sp/>zsnew,<sp/>hnew,<sp/>vnew,<sp/>unew,<sp/>zbnew;</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>hinside;</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isleftbot,<sp/>islefttop,<sp/>istopleft,<sp/>istopright,<sp/>isrighttop,<sp/>isrightbot,<sp/>isbotright,<sp/>isbotleft;</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>XBlock.mask.blks[ibl];</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>findmaskside(XBlock.mask.side[ibl],<sp/>isleftbot,<sp/>islefttop,<sp/>istopleft,<sp/>istopright,<sp/>isrighttop,<sp/>isrightbot,<sp/>isbotright,<sp/>isbotleft);</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"></highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isbotright<sp/>|<sp/>isbotleft)</highlight><highlight class="comment">//?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isright<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>istop<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"></highlight></codeline>
<codeline lineno="1551"><highlight class="normal"></highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iy<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ix<sp/>=<sp/>threadIdx.x;</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xst<sp/>=<sp/>isbotleft<sp/>?<sp/>0<sp/>:<sp/>XParam.blkwidth<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xnd<sp/>=<sp/>isbotright<sp/>?<sp/>XParam.blkwidth<sp/>:<sp/>XParam.blkwidth<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ix<sp/>&gt;=<sp/>xst<sp/>&amp;&amp;<sp/>ix<sp/>&lt;<sp/>xnd)</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>memloc(halowidth,<sp/>blkmemwidth,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inside<sp/>=<sp/>Inside(halowidth,<sp/>blkmemwidth,<sp/>isright,<sp/>istop,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"></highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noslipbndQ(Flux.Fhv[inside],<sp/>Flux.Fqvy[i],<sp/>Flux.Sv[inside]);<sp/></highlight><highlight class="comment">//noslipbndQ(T<sp/>&amp;<sp/>F,<sp/>T<sp/>&amp;<sp/>G,<sp/>T<sp/>&amp;<sp/>S)<sp/>F<sp/>=<sp/>T(0.0);<sp/>S<sp/>=<sp/>G;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1564"><highlight class="normal"></highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"></highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>__global__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>maskbndGPUFluxbot&lt;float&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;float&gt;</ref><sp/>XBlock,<sp/><ref refid="structFluxP" kindref="compound">FluxP&lt;float&gt;</ref><sp/>Flux);</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>__global__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>maskbndGPUFluxbot&lt;double&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;double&gt;</ref><sp/>XBlock,<sp/><ref refid="structFluxP" kindref="compound">FluxP&lt;double&gt;</ref><sp/>Flux);</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"></highlight></codeline>
<codeline lineno="1573"><highlight class="normal">__device__<sp/>__host__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>findmaskside(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>side,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>&amp;isleftbot,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&amp;<sp/>islefttop,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&amp;<sp/>istopleft,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&amp;<sp/>istopright,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&amp;<sp/>isrighttop,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&amp;<sp/>isrightbot,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&amp;<sp/>isbotright,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&amp;<sp/>isbotleft)</highlight></codeline>
<codeline lineno="1574"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lb<sp/>=<sp/>0b10000000;</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lt<sp/>=<sp/>0b01000000;</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tl<sp/>=<sp/>0b00100000;</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tr<sp/>=<sp/>0b00010000;</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rt<sp/>=<sp/>0b00001000;</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rb<sp/>=<sp/>0b00000100;</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>br<sp/>=<sp/>0b00000010;</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bl<sp/>=<sp/>0b00000001;</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/>isleftbot<sp/>=<sp/>(side<sp/>&amp;<sp/>lb)<sp/>==<sp/>lb;</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/>islefttop<sp/>=<sp/>(side<sp/>&amp;<sp/>lt)<sp/>==<sp/>lt;</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"></highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/>istopleft<sp/>=<sp/>(side<sp/>&amp;<sp/>tl)<sp/>==<sp/>tl;</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/>istopright<sp/>=<sp/>(side<sp/>&amp;<sp/>tr)<sp/>==<sp/>tr;</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/>isrighttop<sp/>=<sp/>(side<sp/>&amp;<sp/>rt)<sp/>==<sp/>rt;</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/>isrightbot<sp/>=<sp/>(side<sp/>&amp;<sp/>rb)<sp/>==<sp/>rb;</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/>isbotright<sp/>=<sp/>(side<sp/>&amp;<sp/>br)<sp/>==<sp/>br;</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/>isbotleft<sp/>=<sp/>(side<sp/>&amp;<sp/>bl)<sp/>==<sp/>bl;</highlight></codeline>
<codeline lineno="1595"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"></highlight></codeline>
<codeline lineno="1598"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/>__device__<sp/>__host__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>halowall(T<sp/>zsinside,<sp/>T&amp;<sp/>un,<sp/>T&amp;<sp/>ut,<sp/>T&amp;<sp/>zs,<sp/>T&amp;<sp/>h,T&amp;zb)</highlight></codeline>
<codeline lineno="1599"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>is<sp/>used<sp/>to<sp/>make<sp/>a<sp/>wall<sp/>on<sp/>the<sp/>halo<sp/>to<sp/>act<sp/>as<sp/>a<sp/>wall</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>may<sp/>be<sp/>more<sp/>suitable/stable<sp/>than<sp/>the<sp/>noslip<sp/>as<sp/>a<sp/>wall<sp/>boundary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/>un<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/>zs<sp/>=<sp/>zsinside;</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/>ut<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/>h<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/>zb<sp/>=<sp/>zsinside;</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"></highlight></codeline>
<codeline lineno="1611"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/>__device__<sp/>__host__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>noslipbnd(T<sp/>zsinside,T<sp/>hinside,T<sp/>&amp;un,<sp/>T<sp/>&amp;ut,T<sp/>&amp;zs,<sp/>T<sp/>&amp;h)</highlight></codeline>
<codeline lineno="1612"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Basic<sp/>no<sp/>slip<sp/>bnd<sp/>hs<sp/>no<sp/>normal<sp/>velocity<sp/>and<sp/>leaves<sp/>tanegtial<sp/>velocity<sp/>alone<sp/>(maybe<sp/>needs<sp/>a<sp/>wall<sp/>friction<sp/>added<sp/>to<sp/>it?)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/>un<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/>zs<sp/>=<sp/>zsinside;</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ut[i]<sp/>=<sp/>ut[inside];//=0.0?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/>h<sp/>=<sp/>hinside;</highlight><highlight class="comment">//=0.0?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="normal"></highlight></codeline>
<codeline lineno="1620"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/>__device__<sp/>__host__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>noslipbndQ(T&amp;<sp/>F,<sp/>T&amp;<sp/>G,<sp/>T&amp;<sp/>S)</highlight></codeline>
<codeline lineno="1623"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Basic<sp/>no<sp/>slip<sp/>bnd<sp/>hs<sp/>no<sp/>normal<sp/>velocity<sp/>and<sp/>leaves<sp/>tanegtial<sp/>velocity<sp/>alone<sp/>(maybe<sp/>needs<sp/>a<sp/>wall<sp/>friction<sp/>added<sp/>to<sp/>it?)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/>F<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/>S<sp/>=<sp/>G;</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"></highlight></codeline>
<codeline lineno="1631"><highlight class="normal"></highlight></codeline>
<codeline lineno="1632"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/>__device__<sp/>__host__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ABS1D(T<sp/>g,<sp/>T<sp/>sign,<sp/>T<sp/>zsbnd,<sp/>T<sp/>zsinside,<sp/>T<sp/>hinside,<sp/>T<sp/>utbnd,T<sp/>unbnd,<sp/>T&amp;<sp/>un,<sp/>T&amp;<sp/>ut,<sp/>T&amp;<sp/>zs,<sp/>T&amp;<sp/>h)</highlight></codeline>
<codeline lineno="1633"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Absorbing<sp/>1D<sp/>boundary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//When<sp/>nesting<sp/>unbnd<sp/>is<sp/>read<sp/>from<sp/>file.<sp/>when<sp/>unbnd<sp/>is<sp/>not<sp/>known<sp/>assume<sp/>0.<sp/>or<sp/>the<sp/>mean<sp/>of<sp/>un<sp/>over<sp/>a<sp/>certain<sp/>time<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>utbnd<sp/>use<sp/>utinside<sp/>if<sp/>no<sp/>utbnd<sp/>are<sp/>known<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/>un=<sp/>sign<sp/>*<sp/>sqrt(g<sp/>/<sp/>h)<sp/>*<sp/>(zsinside<sp/>-<sp/>zsbnd)<sp/>+<sp/>T(unbnd);</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/>zs<sp/>=<sp/>zsinside;</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/>ut<sp/>=<sp/>T(utbnd);</highlight><highlight class="comment">//ut[inside];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/>h<sp/>=<sp/>hinside;</highlight></codeline>
<codeline lineno="1641"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"></highlight></codeline>
<codeline lineno="1643"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/>__device__<sp/>__host__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ABS1DQ(T<sp/>g,<sp/>T<sp/>sign,<sp/>T<sp/>factime,T<sp/>facrel,T<sp/>zs,<sp/>T<sp/>zsbnd,<sp/>T<sp/>zsinside,<sp/>T<sp/>h,<sp/>T&amp;<sp/>qmean,<sp/>T&amp;<sp/>q,<sp/>T&amp;<sp/>G,<sp/>T&amp;<sp/>S)</highlight></codeline>
<codeline lineno="1644"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Absorbing<sp/>1D<sp/>boundary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//When<sp/>nesting<sp/>unbnd<sp/>is<sp/>read<sp/>from<sp/>file.<sp/>when<sp/>unbnd<sp/>is<sp/>not<sp/>known<sp/>assume<sp/>0.<sp/>or<sp/>the<sp/>mean<sp/>of<sp/>un<sp/>over<sp/>a<sp/>certain<sp/>time<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>utbnd<sp/>use<sp/>utinside<sp/>if<sp/>no<sp/>utbnd<sp/>are<sp/>known<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1648"><highlight class="normal"></highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/>qmean<sp/>=<sp/>h<sp/>&lt;<sp/>T(0.01)<sp/>?<sp/>T(0.0)<sp/>:<sp/>factime*<sp/>q<sp/>+<sp/>facrel<sp/>*<sp/>(T(1.0)<sp/>-<sp/>factime)<sp/>*<sp/>qmean;</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//qmean<sp/>=<sp/>factime<sp/>*<sp/>q<sp/>+<sp/>facrel<sp/>*<sp/>(T(1.0)<sp/>-<sp/>factime)<sp/>*<sp/>qmean;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1653"><highlight class="normal"></highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>un;</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>zn<sp/>=<sp/>max(zsbnd,<sp/>(zs<sp/>-<sp/>h));</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"></highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>hn<sp/>=<sp/>max(h,<sp/>T(0.0001));</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1659"><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Below<sp/>should<sp/>be<sp/>hinside<sp/>?<sp/>or<sp/>h<sp/>at<sp/>Flux<sp/>bnd?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>What<sp/>if<sp/>h<sp/>is<sp/>0?<sp/>then<sp/>q<sp/>and<sp/>qmean<sp/>should<sp/>be<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//un<sp/>=<sp/>sign<sp/>*<sp/>sqrt(g<sp/>/<sp/>h)<sp/>*<sp/>(T(2.0)*(zs<sp/>-<sp/>zsbnd)<sp/>-<sp/>(zsinside<sp/>-<sp/>zsbnd));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//un<sp/>=<sp/>sign*<sp/>sqrt(g<sp/>/<sp/>h)*<sp/>(T(2.0)<sp/>*<sp/>zs<sp/>-<sp/>zsinside<sp/>-<sp/>zsbnd);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/>un<sp/>=<sp/>sign<sp/>*<sp/>sqrt(g<sp/>/<sp/>hn)<sp/>*<sp/>(zs-zn);</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//un<sp/>=<sp/>sign*<sp/>sqrt(g<sp/>/<sp/>h)*<sp/>(zs<sp/>+<sp/>zsinside<sp/>-<sp/>T(2.0)<sp/>*<sp/>zsbnd);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//zs<sp/>=<sp/>zsinside;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//zs<sp/>=<sp/>zsinside;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ut<sp/>=<sp/>T(utbnd);//ut[inside];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//h<sp/>=<sp/>hinside;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1670"><highlight class="normal"></highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/>q<sp/>=<sp/>un<sp/>*<sp/>hn<sp/>+<sp/>qmean;</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"></highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//S<sp/>=<sp/>G;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//G<sp/>=<sp/>S-q;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"></highlight></codeline>
<codeline lineno="1677"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/>__device__<sp/>__host__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Dirichlet1D(T<sp/>g,<sp/>T<sp/>sign,<sp/>T<sp/>zsbnd,<sp/>T<sp/>zsinside,<sp/>T<sp/>hinside,<sp/><sp/>T<sp/>uninside,<sp/>T&amp;<sp/>un,<sp/>T&amp;<sp/>ut,<sp/>T&amp;<sp/>zs,<sp/>T&amp;<sp/>h)</highlight></codeline>
<codeline lineno="1680"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>this<sp/>even<sp/>the<sp/>right<sp/>formulation?.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>I<sp/>don&apos;t<sp/>really<sp/>like<sp/>this<sp/>formulation.<sp/>while<sp/>a<sp/>bit<sp/>less<sp/>dissipative<sp/>then<sp/>abs1D<sp/>with<sp/>0<sp/>unbnd<sp/>(but<sp/>worse<sp/>if<sp/>forcing<sp/>uniside<sp/>with<sp/>0)<sp/>it<sp/>is<sp/>very<sp/>reflective<sp/>an<sp/>not<sp/>stable<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>zbinside<sp/>=<sp/>zsinside<sp/>-<sp/>hinside;</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/>un<sp/>=<sp/>sign<sp/>*<sp/>T(2.0)<sp/>*<sp/>(sqrt(g<sp/>*<sp/>max(hinside,<sp/>T(0.0)))<sp/>-<sp/>sqrt(g<sp/>*<sp/>max(zsbnd<sp/>-<sp/>zbinside,<sp/>T(0.0))))<sp/>+<sp/>uninside;</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/>ut<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/>zs<sp/>=<sp/>zsinside;</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ut[i]<sp/>=<sp/>ut[inside];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/>h<sp/>=<sp/>hinside;</highlight></codeline>
<codeline lineno="1689"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"></highlight></codeline>
<codeline lineno="1691"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/>__device__<sp/>__host__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Dirichlet1Q(T<sp/>g,<sp/>T<sp/>sign,<sp/>T<sp/>zsbnd,<sp/>T<sp/>zsinside,<sp/>T<sp/>hinside,<sp/>T<sp/>uninside,<sp/>T&amp;<sp/>q)</highlight></codeline>
<codeline lineno="1692"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>this<sp/>even<sp/>the<sp/>right<sp/>formulation?.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>I<sp/>don&apos;t<sp/>really<sp/>like<sp/>this<sp/>formulation.<sp/>while<sp/>a<sp/>bit<sp/>less<sp/>dissipative<sp/>then<sp/>abs1D<sp/>with<sp/>0<sp/>unbnd<sp/>(but<sp/>worse<sp/>if<sp/>forcing<sp/>uniside<sp/>with<sp/>0)<sp/>it<sp/>is<sp/>very<sp/>reflective<sp/>an<sp/>not<sp/>stable<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>zbinside<sp/>=<sp/>zsinside<sp/>-<sp/>hinside;</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>un<sp/>=<sp/>sign<sp/>*<sp/>T(2.0)<sp/>*<sp/>(sqrt(g<sp/>*<sp/>max(hinside,<sp/>T(0.0)))<sp/>-<sp/>sqrt(g<sp/>*<sp/>max(zsbnd<sp/>-<sp/>zbinside,<sp/>T(0.0))))<sp/>+<sp/>uninside;</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>ut<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//zs<sp/>=<sp/>zsinside;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ut[i]<sp/>=<sp/>ut[inside];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//h<sp/>=<sp/>hinside;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1701"><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/>q<sp/>=<sp/>un<sp/>*<sp/>hinside;</highlight></codeline>
<codeline lineno="1703"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"></highlight></codeline>
<codeline lineno="1706"><highlight class="normal"></highlight></codeline>
<codeline lineno="1707"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1708"><highlight class="comment">template<sp/>&lt;class<sp/>T&gt;<sp/>__global__<sp/>void<sp/>ABS1D(int<sp/>halowidth,int<sp/>isright,<sp/>int<sp/>istop,<sp/>int<sp/>nbnd,<sp/>T<sp/>g,<sp/>T<sp/>dx,<sp/>T<sp/>xo,<sp/>T<sp/>yo,<sp/>T<sp/>xmax,<sp/>T<sp/>ymax,<sp/>T<sp/>itime,<sp/>cudaTextureObject_t<sp/>texZsBND,<sp/>int*<sp/>bndblck,<sp/>int*<sp/>level,<sp/>T*<sp/>blockxo,<sp/>T*<sp/>blockyo,<sp/>T*<sp/>zs,<sp/>T*<sp/>zb,<sp/>T*<sp/>h,<sp/>T*<sp/>un,<sp/>T*<sp/>ut)</highlight></codeline>
<codeline lineno="1709"><highlight class="comment">{</highlight></codeline>
<codeline lineno="1710"><highlight class="comment"></highlight></codeline>
<codeline lineno="1711"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1712"><highlight class="comment"></highlight></codeline>
<codeline lineno="1713"><highlight class="comment"><sp/><sp/><sp/><sp/>T<sp/>xx,<sp/>yy;</highlight></codeline>
<codeline lineno="1714"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1715"><highlight class="comment"><sp/><sp/><sp/><sp/>T<sp/><sp/>sign,<sp/>umean;</highlight></codeline>
<codeline lineno="1716"><highlight class="comment"><sp/><sp/><sp/><sp/>float<sp/>itx;</highlight></codeline>
<codeline lineno="1717"><highlight class="comment"></highlight></codeline>
<codeline lineno="1718"><highlight class="comment"><sp/><sp/><sp/><sp/>sign<sp/>=<sp/>T(isright)<sp/>+<sp/>T(istop);</highlight></codeline>
<codeline lineno="1719"><highlight class="comment"></highlight></codeline>
<codeline lineno="1720"><highlight class="comment"></highlight></codeline>
<codeline lineno="1721"><highlight class="comment"></highlight></codeline>
<codeline lineno="1722"><highlight class="comment"></highlight></codeline>
<codeline lineno="1723"><highlight class="comment"><sp/><sp/><sp/><sp/>//int<sp/>xplus;</highlight></codeline>
<codeline lineno="1724"><highlight class="comment"><sp/><sp/><sp/><sp/>//float<sp/>hhi;</highlight></codeline>
<codeline lineno="1725"><highlight class="comment"><sp/><sp/><sp/><sp/>float<sp/>zsbnd;</highlight></codeline>
<codeline lineno="1726"><highlight class="comment"><sp/><sp/><sp/><sp/>T<sp/>zsinside;</highlight></codeline>
<codeline lineno="1727"><highlight class="comment"><sp/><sp/><sp/><sp/>T<sp/>levdx=<sp/>calcres(dx,<sp/>level[ib]);</highlight></codeline>
<codeline lineno="1728"><highlight class="comment"><sp/><sp/><sp/><sp/>xx<sp/>=<sp/>blockxo[ib]<sp/>+<sp/>ix<sp/>*<sp/>levdx;</highlight></codeline>
<codeline lineno="1729"><highlight class="comment"><sp/><sp/><sp/><sp/>yy<sp/>=<sp/>blockyo[ib]<sp/>+<sp/>iy<sp/>*<sp/>levdx;</highlight></codeline>
<codeline lineno="1730"><highlight class="comment"></highlight></codeline>
<codeline lineno="1731"><highlight class="comment"></highlight></codeline>
<codeline lineno="1732"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(isright<sp/>==<sp/>0)<sp/>//leftside</highlight></codeline>
<codeline lineno="1733"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1734"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1735"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itx<sp/>=<sp/>(xx<sp/>-<sp/>xo)<sp/>/<sp/>(xmax<sp/>-<sp/>xo)<sp/>*<sp/>(nbnd<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1736"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1737"><highlight class="comment"><sp/><sp/><sp/><sp/>else<sp/></highlight></codeline>
<codeline lineno="1738"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1739"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1740"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itx<sp/>=<sp/>(yy<sp/>-<sp/>yo)<sp/>/<sp/>(ymax<sp/>-<sp/>yo)<sp/>*<sp/>(nbnd<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1741"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1742"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1743"><highlight class="comment"></highlight></codeline>
<codeline lineno="1744"><highlight class="comment"><sp/><sp/><sp/><sp/>umean<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="1745"><highlight class="comment"><sp/><sp/><sp/><sp/>zsbnd<sp/>=<sp/>tex2D(texZsBND,<sp/>itime<sp/>+<sp/>0.5f,<sp/>itx<sp/>+<sp/>0.5f);//<sp/>textures<sp/>use<sp/>pixel<sp/>registration<sp/>so<sp/>index<sp/>of<sp/>0<sp/>is<sp/>actually<sp/>located<sp/>at<sp/>0.5...</highlight></codeline>
<codeline lineno="1746"><highlight class="comment"></highlight></codeline>
<codeline lineno="1747"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(isbnd(isright,<sp/>istop,<sp/>blockDim.x,<sp/>ix,<sp/>iy)<sp/>&amp;&amp;<sp/>zsbnd<sp/>&gt;<sp/>zb[i])</highlight></codeline>
<codeline lineno="1748"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1749"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1750"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zsinside<sp/>=<sp/>zs[inside];</highlight></codeline>
<codeline lineno="1751"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1752"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>un[i]<sp/>=<sp/>sign<sp/>*<sp/>sqrt(g<sp/>/<sp/>h[i])<sp/>*<sp/>(zsinside<sp/>-<sp/>zsbnd)<sp/>+<sp/>umean;</highlight></codeline>
<codeline lineno="1753"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zs[i]<sp/>=<sp/>zsinside;</highlight></codeline>
<codeline lineno="1754"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ut[i]<sp/>=<sp/>ut[inside];</highlight></codeline>
<codeline lineno="1755"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h[i]<sp/>=<sp/>h[inside];</highlight></codeline>
<codeline lineno="1756"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1757"><highlight class="comment">}</highlight></codeline>
<codeline lineno="1758"><highlight class="comment"></highlight></codeline>
<codeline lineno="1759"><highlight class="comment"></highlight></codeline>
<codeline lineno="1760"><highlight class="comment">template<sp/>&lt;class<sp/>T&gt;<sp/>__host__<sp/>void<sp/>ABS1D(Param<sp/>XParam,<sp/>std::vector&lt;double&gt;<sp/>zsbndvec,<sp/>int<sp/>isright,<sp/>int<sp/>istop,<sp/>int<sp/>nbnd,<sp/>T<sp/>itime,<sp/>BlockP&lt;T&gt;<sp/>XBlock,<sp/>int<sp/>*<sp/>bndblk,<sp/>T*<sp/>zs,<sp/>T*<sp/>zb,<sp/>T*<sp/>h,<sp/>T*<sp/>un,<sp/>T*<sp/>ut)</highlight></codeline>
<codeline lineno="1761"><highlight class="comment">{</highlight></codeline>
<codeline lineno="1762"><highlight class="comment"></highlight></codeline>
<codeline lineno="1763"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>ibl<sp/>=<sp/>0;<sp/>ibl<sp/>&lt;<sp/>XParam.nblk;<sp/>ibl++)</highlight></codeline>
<codeline lineno="1764"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1765"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//printf(&quot;bl=%d\tblockxo[bl]=%f\tblockyo[bl]=%f\n&quot;,<sp/>bl,<sp/>blockxo[bl],<sp/>blockyo[bl]);</highlight></codeline>
<codeline lineno="1766"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>ib<sp/>=<sp/>bndblk[ibl];</highlight></codeline>
<codeline lineno="1767"><highlight class="comment"></highlight></codeline>
<codeline lineno="1768"><highlight class="comment"></highlight></codeline>
<codeline lineno="1769"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>iy<sp/>=<sp/>0;<sp/>iy<sp/>&lt;<sp/>XParam.blkwidth;<sp/>iy++)</highlight></codeline>
<codeline lineno="1770"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1771"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>ix<sp/>=<sp/>0;<sp/>ix<sp/>&lt;<sp/>XParam.blkwidth;<sp/>ix++)</highlight></codeline>
<codeline lineno="1772"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1773"><highlight class="comment"></highlight></codeline>
<codeline lineno="1774"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>i<sp/>=<sp/>memloc(XParam.halowidth,<sp/>XParam.blkmemwidth,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="1775"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>inside<sp/>=<sp/>Inside(XParam.halowidth,<sp/>XParam.blkmemwidth,<sp/>isright,<sp/>istop,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="1776"><highlight class="comment"></highlight></codeline>
<codeline lineno="1777"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>left<sp/>bnd:<sp/>isrigit<sp/>=<sp/>-1;<sp/>istop=0;</highlight></codeline>
<codeline lineno="1778"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>right<sp/>bnd:<sp/>isright<sp/>=<sp/>1;<sp/>istop=0;</highlight></codeline>
<codeline lineno="1779"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>bottom<sp/>bnd:<sp/>isright<sp/>=<sp/>0;<sp/>istop=-1;</highlight></codeline>
<codeline lineno="1780"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>top<sp/>bnd:<sp/>isright<sp/>=<sp/>0;<sp/>istop=1;</highlight></codeline>
<codeline lineno="1781"><highlight class="comment"></highlight></codeline>
<codeline lineno="1782"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>xx,<sp/>yy;</highlight></codeline>
<codeline lineno="1783"><highlight class="comment"></highlight></codeline>
<codeline lineno="1784"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/><sp/>sign,<sp/>umean;</highlight></codeline>
<codeline lineno="1785"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>itx;</highlight></codeline>
<codeline lineno="1786"><highlight class="comment"></highlight></codeline>
<codeline lineno="1787"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sign<sp/>=<sp/>T(isright)<sp/>+<sp/>T(istop);</highlight></codeline>
<codeline lineno="1788"><highlight class="comment"></highlight></codeline>
<codeline lineno="1789"><highlight class="comment"></highlight></codeline>
<codeline lineno="1790"><highlight class="comment"></highlight></codeline>
<codeline lineno="1791"><highlight class="comment"></highlight></codeline>
<codeline lineno="1792"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//int<sp/>xplus;</highlight></codeline>
<codeline lineno="1793"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//float<sp/>hhi;</highlight></codeline>
<codeline lineno="1794"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>zsbnd;</highlight></codeline>
<codeline lineno="1795"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>zsinside;</highlight></codeline>
<codeline lineno="1796"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>levdx<sp/>=<sp/>calcres(dx,<sp/>XBlock.level[ib]);</highlight></codeline>
<codeline lineno="1797"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xx<sp/>=<sp/>XBlock.xo[ib]<sp/>+<sp/>ix<sp/>*<sp/>levdx;</highlight></codeline>
<codeline lineno="1798"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yy<sp/>=<sp/>XBlock.yo[ib]<sp/>+<sp/>iy<sp/>*<sp/>levdx;</highlight></codeline>
<codeline lineno="1799"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>nbnd<sp/>=<sp/>zsbndvec.size();</highlight></codeline>
<codeline lineno="1800"><highlight class="comment"></highlight></codeline>
<codeline lineno="1801"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(isright<sp/>==<sp/>0)<sp/>//leftside</highlight></codeline>
<codeline lineno="1802"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1803"><highlight class="comment"></highlight></codeline>
<codeline lineno="1804"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itx<sp/>=<sp/>(xx<sp/>-<sp/>XParam.xo)<sp/>/<sp/>(XParam.xmax<sp/>-<sp/>XParam.xo)<sp/>*<sp/>(nbnd<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1805"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1806"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="1807"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1808"><highlight class="comment"></highlight></codeline>
<codeline lineno="1809"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itx<sp/>=<sp/>(yy<sp/>-<sp/>XParam.yo)<sp/>/<sp/>(XParam.ymax<sp/>-<sp/>XParam.yo)<sp/>*<sp/>(nbnd<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1810"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1811"><highlight class="comment"></highlight></codeline>
<codeline lineno="1812"><highlight class="comment"></highlight></codeline>
<codeline lineno="1813"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>umean<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="1814"><highlight class="comment"></highlight></codeline>
<codeline lineno="1815"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(zsbndvec.size()<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="1816"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1817"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zsbnd<sp/>=<sp/>zsbndvec[0];</highlight></codeline>
<codeline lineno="1818"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1819"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="1820"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1821"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>iprev<sp/>=<sp/>utils::max(utils::min((int)floor(itx),nbnd-2),0);//utils::min(utils::max((int)ceil(itx<sp/>/<sp/>(1<sp/>/<sp/>(zsbndvec.size()<sp/>-<sp/>1))),<sp/>0),<sp/>(int)zsbndvec.size()<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="1822"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>inext<sp/>=<sp/>iprev<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1823"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>here<sp/>interp<sp/>time<sp/>is<sp/>used<sp/>to<sp/>interpolate<sp/>to<sp/>the<sp/>right<sp/>node<sp/>rather<sp/>than<sp/>in<sp/>time...</highlight></codeline>
<codeline lineno="1824"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zsbnd<sp/>=<sp/>interptime(zsbndvec[inext],<sp/>zsbndvec[iprev],<sp/>1.0,<sp/>(itx<sp/>-<sp/>iprev));</highlight></codeline>
<codeline lineno="1825"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1826"><highlight class="comment"></highlight></codeline>
<codeline lineno="1827"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(isbnd(isright,<sp/>istop,<sp/>blockDim.x,<sp/>ix,<sp/>iy)<sp/>&amp;&amp;<sp/>zsbnd<sp/>&gt;<sp/>zb[i])</highlight></codeline>
<codeline lineno="1828"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1829"><highlight class="comment"></highlight></codeline>
<codeline lineno="1830"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zsinside<sp/>=<sp/>zs[inside];</highlight></codeline>
<codeline lineno="1831"><highlight class="comment"></highlight></codeline>
<codeline lineno="1832"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>un[i]<sp/>=<sp/>sign<sp/>*<sp/>sqrt(XParam.g<sp/>/<sp/>h[i])<sp/>*<sp/>(zsinside<sp/>-<sp/>zsbnd)<sp/>+<sp/>umean;</highlight></codeline>
<codeline lineno="1833"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zs[i]<sp/>=<sp/>zsinside;</highlight></codeline>
<codeline lineno="1834"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ut[i]<sp/>=<sp/>ut[inside];</highlight></codeline>
<codeline lineno="1835"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h[i]<sp/>=<sp/>h[inside];</highlight></codeline>
<codeline lineno="1836"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1837"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1838"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1839"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1840"><highlight class="comment">}</highlight></codeline>
<codeline lineno="1841"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1842"><highlight class="normal"></highlight></codeline>
<codeline lineno="1843"><highlight class="normal">__host__<sp/>__device__<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Inside(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>halowidth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blkmemwidth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isright,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>istop,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib)</highlight></codeline>
<codeline lineno="1844"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//int<sp/>bnd,<sp/>bnd_c;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inside;</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"></highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isright<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inside<sp/>=<sp/>memloc(halowidth,<sp/>blkmemwidth,<sp/>ix<sp/>+<sp/>1,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//bnd_c<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//bnd<sp/>=<sp/>ix;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1853"><highlight class="normal"></highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isright<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inside<sp/>=<sp/>memloc(halowidth,<sp/>blkmemwidth,<sp/>ix<sp/>-<sp/>1,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//bnd_c<sp/>=<sp/>blockDim.x<sp/>-<sp/>1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//bnd<sp/>=<sp/>ix;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1860"><highlight class="normal"></highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(istop<sp/>&lt;<sp/>0)</highlight><highlight class="comment">//isright<sp/>must<sp/>be<sp/>==0!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inside<sp/>=<sp/>memloc(halowidth,<sp/>blkmemwidth,<sp/>ix,<sp/>iy<sp/>+<sp/>1,<sp/>ib);</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//bnd_c<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//bnd<sp/>=<sp/>iy;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1867"><highlight class="normal"></highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>istop<sp/>==1<sp/>&amp;&amp;<sp/>isright<sp/>==0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inside<sp/>=<sp/>memloc(halowidth,<sp/>blkmemwidth,<sp/>ix,<sp/>iy<sp/>-<sp/>1,<sp/>ib);</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//bnd_c<sp/>=<sp/>blockDim.y<sp/>-<sp/>1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//bnd<sp/>=<sp/>iy;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1874"><highlight class="normal"></highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>inside;</highlight></codeline>
<codeline lineno="1877"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"></highlight></codeline>
<codeline lineno="1879"><highlight class="normal"></highlight></codeline>
<codeline lineno="1880"><highlight class="normal">__host__<sp/>__device__<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isbnd(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isright,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>istop,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blkwidth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy)</highlight></codeline>
<codeline lineno="1881"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bnd,<sp/>bnd_c;</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//int<sp/>inside;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1884"><highlight class="normal"></highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isright<sp/>&lt;<sp/>0<sp/>||<sp/>istop<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bnd_c<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bnd_c<sp/>=<sp/>blkwidth<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"></highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isright<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bnd<sp/>=<sp/>iy;</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bnd<sp/>=<sp/>ix;</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"></highlight></codeline>
<codeline lineno="1903"><highlight class="normal"></highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(bnd<sp/>==<sp/>bnd_c);</highlight></codeline>
<codeline lineno="1905"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/Boundary.cu"/>
  </compounddef>
</doxygen>

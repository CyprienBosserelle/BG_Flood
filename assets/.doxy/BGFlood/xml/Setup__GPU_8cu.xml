<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="Setup__GPU_8cu" kind="file" language="C++">
    <compoundname>Setup_GPU.cu</compoundname>
    <includes refid="Setup__GPU_8h" local="yes">Setup_GPU.h</includes>
    <incdepgraph>
      <node id="26">
        <label>Arrays.h</label>
        <link refid="Arrays_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>Boundary.h</label>
        <link refid="Boundary_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>ConserveElevation.h</label>
        <link refid="ConserveElevation_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>Forcing.h</label>
        <link refid="Forcing_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>General.h</label>
        <link refid="General_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>Gradients.h</label>
        <link refid="Gradients_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>GridManip.h</label>
        <link refid="GridManip_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>Halo.h</label>
        <link refid="Halo_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>InitEvolv.h</label>
        <link refid="InitEvolv_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>InitialConditions.h</label>
        <link refid="InitialConditions_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>Input.h</label>
        <link refid="Input_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>Kurganov.h</label>
        <link refid="Kurganov_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>MemManagement.h</label>
        <link refid="MemManagement_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>Mesh.h</label>
        <link refid="Mesh_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>Param.h</label>
        <link refid="Param_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>Poly.h</label>
        <link refid="Poly_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>ReadForcing.h</label>
        <link refid="ReadForcing_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>ReadInput.h</label>
        <link refid="ReadInput_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>Read_netcdf.h</label>
        <link refid="Read__netcdf_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/Setup_GPU.cu</label>
        <link refid="Setup__GPU_8cu"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Setup_GPU.h</label>
        <link refid="Setup__GPU_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>Spherical.h</label>
        <link refid="Spherical_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>Updateforcing.h</label>
        <link refid="Updateforcing_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>Util_CPU.h</label>
        <link refid="Util__CPU_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>Write_netcdf.h</label>
        <link refid="Write__netcdf_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>Write_txtlog.h</label>
        <link refid="Write__txtlog_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>utctime.h</label>
        <link refid="utctime_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>algorithm</label>
      </node>
      <node id="10">
        <label>chrono</label>
      </node>
      <node id="9">
        <label>cmath</label>
      </node>
      <node id="11">
        <label>ctime</label>
      </node>
      <node id="4">
        <label>cuda_runtime.h</label>
      </node>
      <node id="5">
        <label>device_launch_parameters.h</label>
      </node>
      <node id="19">
        <label>fstream</label>
      </node>
      <node id="18">
        <label>iomanip</label>
      </node>
      <node id="17">
        <label>iostream</label>
      </node>
      <node id="21">
        <label>limits</label>
      </node>
      <node id="14">
        <label>map</label>
      </node>
      <node id="8">
        <label>math.h</label>
      </node>
      <node id="15">
        <label>netcdf.h</label>
      </node>
      <node id="20">
        <label>sstream</label>
      </node>
      <node id="6">
        <label>stdio.h</label>
      </node>
      <node id="7">
        <label>stdlib.h</label>
      </node>
      <node id="12">
        <label>string</label>
      </node>
      <node id="22">
        <label>thread</label>
      </node>
      <node id="13">
        <label>vector</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="Setup__GPU_8cu_1a58910b2e8b6e26c8882b043f181433e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void SetupGPU</definition>
        <argsstring>(Param &amp;XParam, Model&lt; T &gt; XModel, Forcing&lt; float &gt; &amp;XForcing, Model&lt; T &gt; &amp;XModel_g)</argsstring>
        <name>SetupGPU</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref> &amp;</type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; T &gt;</type>
          <declname>XModel</declname>
        </param>
        <param>
          <type><ref refid="structForcing" kindref="compound">Forcing</ref>&lt; float &gt; &amp;</type>
          <declname>XForcing</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; T &gt; &amp;</type>
          <declname>XModel_g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Setup_GPU.cu" line="6" column="18" bodyfile="src/Setup_GPU.cu" bodystart="6" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="Setup__GPU_8cu_1a5e299f4569617599a6a5551f0a079394" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void SetupGPU&lt; float &gt;</definition>
        <argsstring>(Param &amp;XParam, Model&lt; float &gt; XModel, Forcing&lt; float &gt; &amp;XForcing, Model&lt; float &gt; &amp;XModel_g)</argsstring>
        <name>SetupGPU&lt; float &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref> &amp;</type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; float &gt;</type>
          <declname>XModel</declname>
        </param>
        <param>
          <type><ref refid="structForcing" kindref="compound">Forcing</ref>&lt; float &gt; &amp;</type>
          <declname>XForcing</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; float &gt; &amp;</type>
          <declname>XModel_g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Setup_GPU.cu" line="149" column="10" declfile="src/Setup_GPU.cu" declline="149" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Setup__GPU_8cu_1a265901f2e82555f366a24ec668d5c0e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void SetupGPU&lt; double &gt;</definition>
        <argsstring>(Param &amp;XParam, Model&lt; double &gt; XModel, Forcing&lt; float &gt; &amp;XForcing, Model&lt; double &gt; &amp;XModel_g)</argsstring>
        <name>SetupGPU&lt; double &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref> &amp;</type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; double &gt;</type>
          <declname>XModel</declname>
        </param>
        <param>
          <type><ref refid="structForcing" kindref="compound">Forcing</ref>&lt; float &gt; &amp;</type>
          <declname>XForcing</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; double &gt; &amp;</type>
          <declname>XModel_g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Setup_GPU.cu" line="150" column="10" declfile="src/Setup_GPU.cu" declline="150" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Setup__GPU_8cu_1ad5350c1bad78cfddfe406feecf8ba428" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CUDA_CHECK</definition>
        <argsstring>(cudaError CUDerr)</argsstring>
        <name>CUDA_CHECK</name>
        <param>
          <type>cudaError</type>
          <declname>CUDerr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Setup_GPU.cu" line="153" column="6" bodyfile="src/Setup_GPU.cu" bodystart="153" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="Setup__GPU_8cu_1adf28a707c5f25edf9741584708cda815" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CopytoGPU</definition>
        <argsstring>(int nblk, int blksize, T *z_cpu, T *z_gpu)</argsstring>
        <name>CopytoGPU</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>z_cpu</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>z_gpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Setup_GPU.cu" line="169" column="18" bodyfile="src/Setup_GPU.cu" bodystart="169" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="Setup__GPU_8cu_1a67163058ff44eedca3ad590a2c79219a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void CopytoGPU&lt; bool &gt;</definition>
        <argsstring>(int nblk, int blksize, bool *z_cpu, bool *z_gpu)</argsstring>
        <name>CopytoGPU&lt; bool &gt;</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>z_cpu</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>z_gpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Setup_GPU.cu" line="173" column="10" declfile="src/Setup_GPU.cu" declline="173" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Setup__GPU_8cu_1a55ee5c6700a38855c36ef0cb29592528" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void CopytoGPU&lt; int &gt;</definition>
        <argsstring>(int nblk, int blksize, int *z_cpu, int *z_gpu)</argsstring>
        <name>CopytoGPU&lt; int &gt;</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>z_cpu</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>z_gpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Setup_GPU.cu" line="174" column="10" declfile="src/Setup_GPU.cu" declline="174" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Setup__GPU_8cu_1ae29c388f3726d6a53dd2a70ac86ed03c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void CopytoGPU&lt; float &gt;</definition>
        <argsstring>(int nblk, int blksize, float *z_cpu, float *z_gpu)</argsstring>
        <name>CopytoGPU&lt; float &gt;</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>z_cpu</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>z_gpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Setup_GPU.cu" line="175" column="10" declfile="src/Setup_GPU.cu" declline="175" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Setup__GPU_8cu_1ae1d2f8511f1a8ca4f0acaf7ee2f8efc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void CopytoGPU&lt; double &gt;</definition>
        <argsstring>(int nblk, int blksize, double *z_cpu, double *z_gpu)</argsstring>
        <name>CopytoGPU&lt; double &gt;</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>z_cpu</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>z_gpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Setup_GPU.cu" line="176" column="10" declfile="src/Setup_GPU.cu" declline="176" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Setup__GPU_8cu_1ae8a0cb826b37c1d19965b63d2f87e5f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CopyGPUtoCPU</definition>
        <argsstring>(int nblk, int blksize, T *z_cpu, T *z_gpu)</argsstring>
        <name>CopyGPUtoCPU</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>z_cpu</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>z_gpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Setup_GPU.cu" line="178" column="18" bodyfile="src/Setup_GPU.cu" bodystart="178" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="Setup__GPU_8cu_1aad145f202bc792f4c46d3d781268a02f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void CopyGPUtoCPU&lt; bool &gt;</definition>
        <argsstring>(int nblk, int blksize, bool *z_cpu, bool *z_gpu)</argsstring>
        <name>CopyGPUtoCPU&lt; bool &gt;</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>z_cpu</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>z_gpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Setup_GPU.cu" line="182" column="10" declfile="src/Setup_GPU.cu" declline="182" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Setup__GPU_8cu_1ab520fc374eee095387d418a160d917d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void CopyGPUtoCPU&lt; int &gt;</definition>
        <argsstring>(int nblk, int blksize, int *z_cpu, int *z_gpu)</argsstring>
        <name>CopyGPUtoCPU&lt; int &gt;</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>z_cpu</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>z_gpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Setup_GPU.cu" line="183" column="10" declfile="src/Setup_GPU.cu" declline="183" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Setup__GPU_8cu_1a10fde28f3704462d7060bc37c2b1f5eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void CopyGPUtoCPU&lt; float &gt;</definition>
        <argsstring>(int nblk, int blksize, float *z_cpu, float *z_gpu)</argsstring>
        <name>CopyGPUtoCPU&lt; float &gt;</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>z_cpu</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>z_gpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Setup_GPU.cu" line="184" column="10" declfile="src/Setup_GPU.cu" declline="184" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Setup__GPU_8cu_1af9944f493c981b60ae09dc6392774c13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void CopyGPUtoCPU&lt; double &gt;</definition>
        <argsstring>(int nblk, int blksize, double *z_cpu, double *z_gpu)</argsstring>
        <name>CopyGPUtoCPU&lt; double &gt;</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>z_cpu</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>z_gpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Setup_GPU.cu" line="185" column="10" declfile="src/Setup_GPU.cu" declline="185" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Setup__GPU_8cu_1abfa1285a296992fb8ebb829eba5a1292" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CopytoGPU</definition>
        <argsstring>(int nblk, int blksize, EvolvingP&lt; T &gt; XEv_cpu, EvolvingP&lt; T &gt; XEv_gpu)</argsstring>
        <name>CopytoGPU</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; T &gt;</type>
          <declname>XEv_cpu</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; T &gt;</type>
          <declname>XEv_gpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Setup_GPU.cu" line="187" column="18" bodyfile="src/Setup_GPU.cu" bodystart="187" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="Setup__GPU_8cu_1a8b68c2b0c604984052a1ed1a1bf6a5b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void CopytoGPU&lt; float &gt;</definition>
        <argsstring>(int nblk, int blksize, EvolvingP&lt; float &gt; XEv_cpu, EvolvingP&lt; float &gt; XEv_gpu)</argsstring>
        <name>CopytoGPU&lt; float &gt;</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; float &gt;</type>
          <declname>XEv_cpu</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; float &gt;</type>
          <declname>XEv_gpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Setup_GPU.cu" line="194" column="10" declfile="src/Setup_GPU.cu" declline="194" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Setup__GPU_8cu_1a0dca7ad09d884d44d4c2da5619d7b652" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void CopytoGPU&lt; double &gt;</definition>
        <argsstring>(int nblk, int blksize, EvolvingP&lt; double &gt; XEv_cpu, EvolvingP&lt; double &gt; XEv_gpu)</argsstring>
        <name>CopytoGPU&lt; double &gt;</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; double &gt;</type>
          <declname>XEv_cpu</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; double &gt;</type>
          <declname>XEv_gpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Setup_GPU.cu" line="195" column="10" declfile="src/Setup_GPU.cu" declline="195" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Setup__GPU_8cu_1a739da71548bd71913d14de19325a4d27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CopytoGPU</definition>
        <argsstring>(int nblk, int blksize, EvolvingP_M&lt; T &gt; XEv_cpu, EvolvingP_M&lt; T &gt; XEv_gpu)</argsstring>
        <name>CopytoGPU</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP__M" kindref="compound">EvolvingP_M</ref>&lt; T &gt;</type>
          <declname>XEv_cpu</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP__M" kindref="compound">EvolvingP_M</ref>&lt; T &gt;</type>
          <declname>XEv_gpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Setup_GPU.cu" line="197" column="18" bodyfile="src/Setup_GPU.cu" bodystart="197" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="Setup__GPU_8cu_1a5f766dcae1273267ef7967343685ab4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void CopytoGPU&lt; float &gt;</definition>
        <argsstring>(int nblk, int blksize, EvolvingP_M&lt; float &gt; XEv_cpu, EvolvingP_M&lt; float &gt; XEv_gpu)</argsstring>
        <name>CopytoGPU&lt; float &gt;</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP__M" kindref="compound">EvolvingP_M</ref>&lt; float &gt;</type>
          <declname>XEv_cpu</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP__M" kindref="compound">EvolvingP_M</ref>&lt; float &gt;</type>
          <declname>XEv_gpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Setup_GPU.cu" line="206" column="10" declfile="src/Setup_GPU.cu" declline="206" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Setup__GPU_8cu_1af0d43152486cbda3617baeacddb36834" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void CopytoGPU&lt; double &gt;</definition>
        <argsstring>(int nblk, int blksize, EvolvingP_M&lt; double &gt; XEv_cpu, EvolvingP_M&lt; double &gt; XEv_gpu)</argsstring>
        <name>CopytoGPU&lt; double &gt;</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP__M" kindref="compound">EvolvingP_M</ref>&lt; double &gt;</type>
          <declname>XEv_cpu</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP__M" kindref="compound">EvolvingP_M</ref>&lt; double &gt;</type>
          <declname>XEv_gpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Setup_GPU.cu" line="207" column="10" declfile="src/Setup_GPU.cu" declline="207" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Setup__GPU_8cu_1a4d46e922a59d97bb023dbfe2c78c9e6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CopytoGPU</definition>
        <argsstring>(int nblk, int blksize, GradientsP&lt; T &gt; XGrad_cpu, GradientsP&lt; T &gt; XGrad_gpu)</argsstring>
        <name>CopytoGPU</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type><ref refid="structGradientsP" kindref="compound">GradientsP</ref>&lt; T &gt;</type>
          <declname>XGrad_cpu</declname>
        </param>
        <param>
          <type><ref refid="structGradientsP" kindref="compound">GradientsP</ref>&lt; T &gt;</type>
          <declname>XGrad_gpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Setup_GPU.cu" line="210" column="18" bodyfile="src/Setup_GPU.cu" bodystart="210" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="Setup__GPU_8cu_1aad0bf09022a12efd04d01d165759834f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void CopytoGPU</definition>
        <argsstring>(int nblk, int blksize, GradientsP&lt; float &gt; XGrad_cpu, GradientsP&lt; float &gt; XGrad_gpu)</argsstring>
        <name>CopytoGPU</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type><ref refid="structGradientsP" kindref="compound">GradientsP</ref>&lt; float &gt;</type>
          <declname>XGrad_cpu</declname>
        </param>
        <param>
          <type><ref refid="structGradientsP" kindref="compound">GradientsP</ref>&lt; float &gt;</type>
          <declname>XGrad_gpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Setup_GPU.cu" line="221" column="15" declfile="src/Setup_GPU.cu" declline="221" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="Setup__GPU_8cu_1a87dee59ba0509908e1e2c2f881a0fa0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void CopytoGPU</definition>
        <argsstring>(int nblk, int blksize, GradientsP&lt; double &gt; XGrad_cpu, GradientsP&lt; double &gt; XGrad_gpu)</argsstring>
        <name>CopytoGPU</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type><ref refid="structGradientsP" kindref="compound">GradientsP</ref>&lt; double &gt;</type>
          <declname>XGrad_cpu</declname>
        </param>
        <param>
          <type><ref refid="structGradientsP" kindref="compound">GradientsP</ref>&lt; double &gt;</type>
          <declname>XGrad_gpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Setup_GPU.cu" line="222" column="15" declfile="src/Setup_GPU.cu" declline="222" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="Setup__GPU_8cu_1a3cbf57b4133f3ed8d7d285c453c18d07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CopytoGPU</definition>
        <argsstring>(int nblk, int blksize, Param XParam, Model&lt; T &gt; XModel_cpu, Model&lt; T &gt; XModel_gpu)</argsstring>
        <name>CopytoGPU</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; T &gt;</type>
          <declname>XModel_cpu</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; T &gt;</type>
          <declname>XModel_gpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Setup_GPU.cu" line="224" column="18" bodyfile="src/Setup_GPU.cu" bodystart="224" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="Setup__GPU_8cu_1a82c124b577b29d7e1b9404e78a05d506" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void CopytoGPU&lt; float &gt;</definition>
        <argsstring>(int nblk, int blksize, Param XParam, Model&lt; float &gt; XModel_cpu, Model&lt; float &gt; XModel_gpu)</argsstring>
        <name>CopytoGPU&lt; float &gt;</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; float &gt;</type>
          <declname>XModel_cpu</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; float &gt;</type>
          <declname>XModel_gpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Setup_GPU.cu" line="280" column="10" declfile="src/Setup_GPU.cu" declline="280" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Setup__GPU_8cu_1a95d1e01235985f9b6f8746d623c5d55f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void CopytoGPU&lt; double &gt;</definition>
        <argsstring>(int nblk, int blksize, Param XParam, Model&lt; double &gt; XModel_cpu, Model&lt; double &gt; XModel_gpu)</argsstring>
        <name>CopytoGPU&lt; double &gt;</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; double &gt;</type>
          <declname>XModel_cpu</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; double &gt;</type>
          <declname>XModel_gpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Setup_GPU.cu" line="281" column="10" declfile="src/Setup_GPU.cu" declline="281" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Setup__GPU_8cu_1a488bcc39d7d694d62164aec2649b923d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AllocateTEX</definition>
        <argsstring>(int nx, int ny, TexSetP &amp;Tex, float *input)</argsstring>
        <name>AllocateTEX</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type><ref refid="structTexSetP" kindref="compound">TexSetP</ref> &amp;</type>
          <declname>Tex</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Setup_GPU.cu" line="284" column="6" bodyfile="src/Setup_GPU.cu" bodystart="284" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="Setup__GPU_8cu_1aa9b4f7f39ebc600b9d27e6ee7da444b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AllocateBndTEX</definition>
        <argsstring>(bndparam &amp;side)</argsstring>
        <name>AllocateBndTEX</name>
        <param>
          <type><ref refid="classbndparam" kindref="compound">bndparam</ref> &amp;</type>
          <declname>side</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Setup_GPU.cu" line="311" column="6" bodyfile="src/Setup_GPU.cu" bodystart="311" bodyend="366"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Setup_GPU.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetupGPU(<ref refid="classParam" kindref="compound">Param</ref><sp/>&amp;XParam,<sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref><sp/>XModel,<ref refid="structForcing" kindref="compound">Forcing&lt;float&gt;</ref><sp/>&amp;XForcing,<sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref>&amp;<sp/>XModel_g)</highlight></codeline>
<codeline lineno="7"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.GPUDEVICE<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;Setting<sp/>up<sp/>GPU&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>free_byte;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>total_byte;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudaSetDevice(XParam.GPUDEVICE);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CUDA_CHECK(cudaMemGetInfo(&amp;free_byte,<sp/>&amp;total_byte));</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XParam.GPU_initmem_byte<sp/>=<sp/>total_byte<sp/>-<sp/>free_byte;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Allocate<sp/>memory<sp/>for<sp/>the<sp/>model<sp/>on<sp/>the<sp/>GPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateGPU(XParam.nblkmem,<sp/>XParam.blksize,<sp/>XParam,<sp/>XModel_g);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>arrays<sp/>from<sp/>CPU<sp/>to<sp/>GPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CopytoGPU(XParam.nblkmem,<sp/>XParam.blksize,XParam,<sp/>XModel,<sp/>XModel_g);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fillHaloGPU(XParam,<sp/>XModel_g.blocks,<sp/>XModel_g.evolv);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//=============================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Same<sp/>for<sp/>Bnds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>for<sp/>the<sp/>boundary<sp/>blk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateGPU(XForcing.left.nblk,<sp/>1,<sp/>XForcing.left.blks_g);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//copy<sp/>bnd<sp/>blk<sp/>info<sp/>on<sp/>GPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CopytoGPU(XForcing.left.nblk,<sp/>1,<sp/>XForcing.left.blks,<sp/>XForcing.left.blks_g);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateGPU(XForcing.right.nblk,<sp/>1,<sp/>XForcing.right.blks_g);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CopytoGPU(XForcing.right.nblk,<sp/>1,<sp/>XForcing.right.blks,<sp/>XForcing.right.blks_g);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateGPU(XForcing.top.nblk,<sp/>1,<sp/>XForcing.top.blks_g);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CopytoGPU(XForcing.top.nblk,<sp/>1,<sp/>XForcing.top.blks,<sp/>XForcing.top.blks_g);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateGPU(XForcing.bot.nblk,<sp/>1,<sp/>XForcing.bot.blks_g);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CopytoGPU(XForcing.bot.nblk,<sp/>1,<sp/>XForcing.bot.blks,<sp/>XForcing.bot.blks_g);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>0;<sp/>s<sp/>&lt;<sp/>XForcing.bndseg.size();<sp/>s++)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateGPU(XForcing.bndseg[s].left.nblk,<sp/>1,<sp/>XForcing.bndseg[s].left.blk_g);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CopytoGPU(XForcing.bndseg[s].left.nblk,<sp/>1,<sp/>XForcing.bndseg[s].left.blk,<sp/>XForcing.bndseg[s].left.blk_g);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateGPU(XForcing.bndseg[s].right.nblk,<sp/>1,<sp/>XForcing.bndseg[s].right.blk_g);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CopytoGPU(XForcing.bndseg[s].right.nblk,<sp/>1,<sp/>XForcing.bndseg[s].right.blk,<sp/>XForcing.bndseg[s].right.blk_g);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateGPU(XForcing.bndseg[s].top.nblk,<sp/>1,<sp/>XForcing.bndseg[s].top.blk_g);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CopytoGPU(XForcing.bndseg[s].top.nblk,<sp/>1,<sp/>XForcing.bndseg[s].top.blk,<sp/>XForcing.bndseg[s].top.blk_g);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateGPU(XForcing.bndseg[s].bot.nblk,<sp/>1,<sp/>XForcing.bndseg[s].bot.blk_g);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CopytoGPU(XForcing.bndseg[s].bot.nblk,<sp/>1,<sp/>XForcing.bndseg[s].bot.blk,<sp/>XForcing.bndseg[s].bot.blk_g);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateGPU(XForcing.bndseg[s].left.nblk,<sp/>XParam.blkwidth,<sp/>XForcing.bndseg[s].left.qmean_g);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CopytoGPU(XForcing.bndseg[s].left.nblk,<sp/>XParam.blkwidth,<sp/>XForcing.bndseg[s].left.qmean,<sp/>XForcing.bndseg[s].left.qmean_g);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateGPU(XForcing.bndseg[s].right.nblk,<sp/>XParam.blkwidth,<sp/>XForcing.bndseg[s].right.qmean_g);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CopytoGPU(XForcing.bndseg[s].right.nblk,<sp/>XParam.blkwidth,<sp/>XForcing.bndseg[s].right.qmean,<sp/>XForcing.bndseg[s].right.qmean_g);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateGPU(XForcing.bndseg[s].top.nblk,<sp/>XParam.blkwidth,<sp/>XForcing.bndseg[s].top.qmean_g);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CopytoGPU(XForcing.bndseg[s].top.nblk,<sp/>XParam.blkwidth,<sp/>XForcing.bndseg[s].top.qmean,<sp/>XForcing.bndseg[s].top.qmean_g);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateGPU(XForcing.bndseg[s].bot.nblk,<sp/>XParam.blkwidth,<sp/>XForcing.bndseg[s].bot.qmean_g);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CopytoGPU(XForcing.bndseg[s].bot.nblk,<sp/>XParam.blkwidth,<sp/>XForcing.bndseg[s].bot.qmean,<sp/>XForcing.bndseg[s].bot.qmean_g);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Also<sp/>for<sp/>mask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XModel_g.blocks.mask.nblk<sp/>=<sp/>XModel.blocks.mask.nblk;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateGPU(XModel_g.blocks.mask.nblk,<sp/>1,<sp/>XModel_g.blocks.mask.side);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateGPU(XModel_g.blocks.mask.nblk,<sp/>1,<sp/>XModel_g.blocks.mask.blks);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CopytoGPU(XModel_g.blocks.mask.nblk,<sp/>1,<sp/>XModel.blocks.mask.side,<sp/>XModel_g.blocks.mask.side);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CopytoGPU(XModel_g.blocks.mask.nblk,<sp/>1,<sp/>XModel.blocks.mask.blks,<sp/>XModel_g.blocks.mask.blks);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>things<sp/>are<sp/>quite<sp/>different<sp/>for<sp/>Time<sp/>Series<sp/>output.<sp/>Why<sp/>is<sp/>that?.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.TSnodesout.size()<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateGPU(XModel.bndblk.nblkTs,<sp/>1,<sp/>XModel_g.bndblk.Tsout);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CopytoGPU(XModel.bndblk.nblkTs,<sp/>1,<sp/>XModel.bndblk.Tsout,<sp/>XModel_g.bndblk.Tsout);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>River<sp/>are<sp/>a<sp/>bit<sp/>of<sp/>a<sp/>special<sp/>case<sp/>too</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XForcing.rivers.size()<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XModel_g.bndblk.nblkriver<sp/>=<sp/>XModel.bndblk.nblkriver;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateGPU(XModel.bndblk.nblkriver,<sp/>1,<sp/>XModel_g.bndblk.river);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CopytoGPU(XModel.bndblk.nblkriver,<sp/>1,<sp/>XModel.bndblk.river,<sp/>XModel_g.bndblk.river);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nribmax<sp/>=<sp/>XModel.bndblk.Riverinfo.nribmax;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nburmax<sp/>=<sp/>XModel.bndblk.Riverinfo.nburmax;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XModel_g.bndblk.Riverinfo.nribmax<sp/>=<sp/>nribmax;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XModel_g.bndblk.Riverinfo.nburmax<sp/>=<sp/>nburmax;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateMappedMemGPU(XForcing.rivers.size(),<sp/>1,XParam.GPUDEVICE,<sp/>XModel_g.bndblk.Riverinfo.qnow_g,XModel.bndblk.Riverinfo.qnow);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XModel_g.bndblk.Riverinfo.qnow<sp/>=<sp/>XModel.bndblk.Riverinfo.qnow;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateGPU(nribmax,<sp/>nburmax,<sp/>XModel_g.bndblk.Riverinfo.Xbidir);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateGPU(nribmax,<sp/>nburmax,<sp/>XModel_g.bndblk.Riverinfo.Xridib);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CopytoGPU(nribmax,<sp/>nburmax,<sp/>XModel.bndblk.Riverinfo.Xbidir,<sp/>XModel_g.bndblk.Riverinfo.Xbidir);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CopytoGPU(nribmax,<sp/>nburmax,<sp/>XModel.bndblk.Riverinfo.Xridib,<sp/>XModel_g.bndblk.Riverinfo.Xridib);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateGPU(nribmax,<sp/>nburmax,<sp/>XModel_g.bndblk.Riverinfo.xstart);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateGPU(nribmax,<sp/>nburmax,<sp/>XModel_g.bndblk.Riverinfo.xend);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateGPU(nribmax,<sp/>nburmax,<sp/>XModel_g.bndblk.Riverinfo.ystart);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateGPU(nribmax,<sp/>nburmax,<sp/>XModel_g.bndblk.Riverinfo.yend);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CopytoGPU(nribmax,<sp/>nburmax,<sp/>XModel.bndblk.Riverinfo.xstart,<sp/>XModel_g.bndblk.Riverinfo.xstart);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CopytoGPU(nribmax,<sp/>nburmax,<sp/>XModel.bndblk.Riverinfo.xend,<sp/>XModel_g.bndblk.Riverinfo.xend);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CopytoGPU(nribmax,<sp/>nburmax,<sp/>XModel.bndblk.Riverinfo.ystart,<sp/>XModel_g.bndblk.Riverinfo.ystart);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CopytoGPU(nribmax,<sp/>nburmax,<sp/>XModel.bndblk.Riverinfo.yend,<sp/>XModel_g.bndblk.Riverinfo.yend);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>GPU<sp/>mean<sp/>and<sp/>max<sp/>arrays</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.outmax)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ResetmaxvarGPU(XParam);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.outmean)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ResetmeanvarGPU(XParam);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Initmaparray(XModel_g);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//InitzbgradientGPU(XParam,<sp/>XModel_g);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetupGPU&lt;float&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>&amp;XParam,<sp/><ref refid="structModel" kindref="compound">Model&lt;float&gt;</ref><sp/>XModel,<sp/><ref refid="structForcing" kindref="compound">Forcing&lt;float&gt;</ref>&amp;<sp/>XForcing,<sp/><ref refid="structModel" kindref="compound">Model&lt;float&gt;</ref>&amp;<sp/>XModel_g);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetupGPU&lt;double&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>&amp;XParam,<sp/><ref refid="structModel" kindref="compound">Model&lt;double&gt;</ref><sp/>XModel,<sp/><ref refid="structForcing" kindref="compound">Forcing&lt;float&gt;</ref>&amp;<sp/>XForcing,<sp/><ref refid="structModel" kindref="compound">Model&lt;double&gt;</ref>&amp;<sp/>XModel_g);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CUDA_CHECK(cudaError<sp/>CUDerr)</highlight></codeline>
<codeline lineno="154"><highlight class="normal">{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cudaSuccess<sp/>!=<sp/>CUDerr)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Cuda<sp/>error<sp/>in<sp/>file<sp/>&apos;%s&apos;<sp/>in<sp/>line<sp/>%i<sp/>:<sp/>%s.\n&quot;</highlight><highlight class="normal">,<sp/>\</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__FILE__,<sp/>__LINE__,<sp/>cudaGetErrorString(CUDerr));</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CopytoGPU(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/>T<sp/>*<sp/>z_cpu,<sp/>T*<sp/>z_gpu)</highlight></codeline>
<codeline lineno="170"><highlight class="normal">{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>CUDA_CHECK(cudaMemcpy(z_gpu,<sp/>z_cpu,<sp/>nblk<sp/>*<sp/>blksize<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T),<sp/>cudaMemcpyHostToDevice));</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CopytoGPU&lt;bool&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>z_cpu,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>z_gpu);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CopytoGPU&lt;int&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>z_cpu,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>z_gpu);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CopytoGPU&lt;float&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>z_cpu,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>z_gpu);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CopytoGPU&lt;double&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>z_cpu,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>z_gpu);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CopyGPUtoCPU(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/>T*<sp/>z_cpu,<sp/>T*<sp/>z_gpu)</highlight></codeline>
<codeline lineno="179"><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>CUDA_CHECK(cudaMemcpy(z_cpu,<sp/>z_gpu,<sp/>nblk<sp/>*<sp/>blksize<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T),<sp/>cudaMemcpyDeviceToHost));</highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CopyGPUtoCPU&lt;bool&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>z_cpu,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>z_gpu);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CopyGPUtoCPU&lt;int&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>z_cpu,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>z_gpu);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CopyGPUtoCPU&lt;float&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>z_cpu,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>z_gpu);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CopyGPUtoCPU&lt;double&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>z_cpu,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>z_gpu);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CopytoGPU(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;T&gt;</ref><sp/>XEv_cpu,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;T&gt;</ref><sp/>XEv_gpu)</highlight></codeline>
<codeline lineno="188"><highlight class="normal">{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>CopytoGPU(nblk,<sp/>blksize,<sp/>XEv_cpu.h,<sp/>XEv_gpu.h);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>CopytoGPU(nblk,<sp/>blksize,<sp/>XEv_cpu.zs,<sp/>XEv_gpu.zs);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>CopytoGPU(nblk,<sp/>blksize,<sp/>XEv_cpu.u,<sp/>XEv_gpu.u);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>CopytoGPU(nblk,<sp/>blksize,<sp/>XEv_cpu.v,<sp/>XEv_gpu.v);</highlight></codeline>
<codeline lineno="193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CopytoGPU&lt;float&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;float&gt;</ref><sp/>XEv_cpu,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;float&gt;</ref><sp/>XEv_gpu);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CopytoGPU<sp/>&lt;<sp/>double<sp/>&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;double&gt;</ref><sp/>XEv_cpu,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;double&gt;</ref><sp/>XEv_gpu);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CopytoGPU(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/><ref refid="structEvolvingP__M" kindref="compound">EvolvingP_M&lt;T&gt;</ref><sp/>XEv_cpu,<sp/><ref refid="structEvolvingP__M" kindref="compound">EvolvingP_M&lt;T&gt;</ref><sp/>XEv_gpu)</highlight></codeline>
<codeline lineno="198"><highlight class="normal">{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>CopytoGPU(nblk,<sp/>blksize,<sp/>XEv_cpu.h,<sp/>XEv_gpu.h);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>CopytoGPU(nblk,<sp/>blksize,<sp/>XEv_cpu.zs,<sp/>XEv_gpu.zs);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>CopytoGPU(nblk,<sp/>blksize,<sp/>XEv_cpu.u,<sp/>XEv_gpu.u);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>CopytoGPU(nblk,<sp/>blksize,<sp/>XEv_cpu.v,<sp/>XEv_gpu.v);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>CopytoGPU(nblk,<sp/>blksize,<sp/>XEv_cpu.U,<sp/>XEv_gpu.U);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>CopytoGPU(nblk,<sp/>blksize,<sp/>XEv_cpu.hU,<sp/>XEv_gpu.hU);</highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CopytoGPU&lt;float&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/><ref refid="structEvolvingP__M" kindref="compound">EvolvingP_M&lt;float&gt;</ref><sp/>XEv_cpu,<sp/><ref refid="structEvolvingP__M" kindref="compound">EvolvingP_M&lt;float&gt;</ref><sp/>XEv_gpu);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CopytoGPU<sp/>&lt;<sp/>double<sp/>&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/><ref refid="structEvolvingP__M" kindref="compound">EvolvingP_M&lt;double&gt;</ref><sp/>XEv_cpu,<sp/>EvolvingP_M<sp/>&lt;<sp/>double<sp/>&gt;<sp/><sp/>XEv_gpu);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CopytoGPU(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/><ref refid="structGradientsP" kindref="compound">GradientsP&lt;T&gt;</ref><sp/>XGrad_cpu,<sp/><ref refid="structGradientsP" kindref="compound">GradientsP&lt;T&gt;</ref><sp/>XGrad_gpu)</highlight></codeline>
<codeline lineno="211"><highlight class="normal">{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>CopytoGPU(nblk,<sp/>blksize,<sp/>XGrad_cpu.dhdx,<sp/>XGrad_gpu.dhdx);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>CopytoGPU(nblk,<sp/>blksize,<sp/>XGrad_cpu.dhdy,<sp/>XGrad_gpu.dhdy);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>CopytoGPU(nblk,<sp/>blksize,<sp/>XGrad_cpu.dudx,<sp/>XGrad_gpu.dudx);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>CopytoGPU(nblk,<sp/>blksize,<sp/>XGrad_cpu.dudy,<sp/>XGrad_gpu.dudy);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>CopytoGPU(nblk,<sp/>blksize,<sp/>XGrad_cpu.dvdx,<sp/>XGrad_gpu.dvdx);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>CopytoGPU(nblk,<sp/>blksize,<sp/>XGrad_cpu.dvdy,<sp/>XGrad_gpu.dvdy);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>CopytoGPU(nblk,<sp/>blksize,<sp/>XGrad_cpu.dzsdx,<sp/>XGrad_gpu.dzsdx);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>CopytoGPU(nblk,<sp/>blksize,<sp/>XGrad_cpu.dzsdy,<sp/>XGrad_gpu.dzsdy);</highlight></codeline>
<codeline lineno="220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CopytoGPU(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/><ref refid="structGradientsP" kindref="compound">GradientsP&lt;float&gt;</ref><sp/>XGrad_cpu,<sp/><ref refid="structGradientsP" kindref="compound">GradientsP&lt;float&gt;</ref><sp/>XGrad_gpu);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CopytoGPU(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/><ref refid="structGradientsP" kindref="compound">GradientsP&lt;double&gt;</ref><sp/>XGrad_cpu,<sp/><ref refid="structGradientsP" kindref="compound">GradientsP&lt;double&gt;</ref><sp/>XGrad_gpu);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CopytoGPU(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/><ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref><sp/>XModel_cpu,<sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref><sp/>XModel_gpu)</highlight></codeline>
<codeline lineno="225"><highlight class="normal">{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>CopytoGPU(nblk,<sp/>blksize,<sp/>XModel_cpu.zb,<sp/>XModel_gpu.zb);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>CopytoGPU(nblk,<sp/>blksize,<sp/>XModel_cpu.evolv,<sp/>XModel_gpu.evolv);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//CopytoGPU(nblk,<sp/>blksize,<sp/>XModel_cpu.evolv_o,<sp/>XModel_gpu.evolv_o);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>CopytoGPU(nblk,<sp/>blksize,<sp/>XModel_cpu.evolv_o,<sp/>XModel_gpu.evolv_o);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>CopytoGPU(nblk,<sp/>blksize,<sp/>XModel_cpu.cf,<sp/>XModel_gpu.cf);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>CopytoGPU(nblk,<sp/>blksize,<sp/>XModel_cpu.grad.dzbdx,<sp/>XModel_gpu.grad.dzbdx);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>CopytoGPU(nblk,<sp/>blksize,<sp/>XModel_cpu.grad.dzbdy,<sp/>XModel_gpu.grad.dzbdy);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Block<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>CopytoGPU(nblk,<sp/>1,<sp/>XModel_cpu.blocks.active,<sp/>XModel_gpu.blocks.active);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>CopytoGPU(nblk,<sp/>blksize,<sp/>XModel_cpu.blocks.activeCell,<sp/>XModel_gpu.blocks.activeCell);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>CopytoGPU(nblk,<sp/>1,<sp/>XModel_cpu.blocks.level,<sp/>XModel_gpu.blocks.level);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>CopytoGPU(nblk,<sp/>1,<sp/>XModel_cpu.blocks.xo,<sp/>XModel_gpu.blocks.xo);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>CopytoGPU(nblk,<sp/>1,<sp/>XModel_cpu.blocks.yo,<sp/>XModel_gpu.blocks.yo);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>CopytoGPU(nblk,<sp/>1,<sp/>XModel_cpu.blocks.BotLeft,<sp/>XModel_gpu.blocks.BotLeft);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>CopytoGPU(nblk,<sp/>1,<sp/>XModel_cpu.blocks.BotRight,<sp/>XModel_gpu.blocks.BotRight);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>CopytoGPU(nblk,<sp/>1,<sp/>XModel_cpu.blocks.TopLeft,<sp/>XModel_gpu.blocks.TopLeft);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>CopytoGPU(nblk,<sp/>1,<sp/>XModel_cpu.blocks.TopRight,<sp/>XModel_gpu.blocks.TopRight);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>CopytoGPU(nblk,<sp/>1,<sp/>XModel_cpu.blocks.LeftBot,<sp/>XModel_gpu.blocks.LeftBot);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>CopytoGPU(nblk,<sp/>1,<sp/>XModel_cpu.blocks.LeftTop,<sp/>XModel_gpu.blocks.LeftTop);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>CopytoGPU(nblk,<sp/>1,<sp/>XModel_cpu.blocks.RightBot,<sp/>XModel_gpu.blocks.RightBot);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>CopytoGPU(nblk,<sp/>1,<sp/>XModel_cpu.blocks.RightTop,<sp/>XModel_gpu.blocks.RightTop);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.infiltration)</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CopytoGPU(nblk,<sp/>blksize,<sp/>XModel_cpu.il,<sp/>XModel_gpu.il);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CopytoGPU(nblk,<sp/>blksize,<sp/>XModel_cpu.cl,<sp/>XModel_gpu.cl);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CopytoGPU(nblk,<sp/>blksize,<sp/>XModel_cpu.hgw,<sp/>XModel_gpu.hgw);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.outmax)</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CopytoGPU(nblk,<sp/>blksize,<sp/>XModel_cpu.evmax,<sp/>XModel_gpu.evmax);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.outmean)</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CopytoGPU(nblk,<sp/>blksize,<sp/>XModel_cpu.evmean,<sp/>XModel_gpu.evmean);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.outtwet)</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CopytoGPU(nblk,<sp/>blksize,<sp/>XModel_cpu.wettime,<sp/>XModel_gpu.wettime);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CopytoGPU&lt;float&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/><ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structModel" kindref="compound">Model&lt;float&gt;</ref><sp/>XModel_cpu,<sp/><ref refid="structModel" kindref="compound">Model&lt;float&gt;</ref><sp/>XModel_gpu);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CopytoGPU&lt;double&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/><ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structModel" kindref="compound">Model&lt;double&gt;</ref><sp/>XModel_cpu,<sp/><ref refid="structModel" kindref="compound">Model&lt;double&gt;</ref><sp/>XModel_gpu);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllocateTEX(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/><ref refid="structTexSetP" kindref="compound">TexSetP</ref>&amp;<sp/>Tex,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>input)</highlight></codeline>
<codeline lineno="285"><highlight class="normal">{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>CUDA_CHECK(cudaMallocArray(&amp;Tex.CudArr,<sp/>&amp;Tex.channelDesc,<sp/>nx,<sp/>ny));</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>CUDA_CHECK(cudaMemcpyToArray(Tex.CudArr,<sp/>0,<sp/>0,<sp/>input,<sp/>nx<sp/>*<sp/>ny<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">),<sp/>cudaMemcpyHostToDevice));</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(&amp;Tex.texDesc,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(cudaTextureDesc));</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>Tex.texDesc.addressMode[0]<sp/>=<sp/>cudaAddressModeClamp;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>Tex.texDesc.addressMode[1]<sp/>=<sp/>cudaAddressModeClamp;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>Tex.texDesc.filterMode<sp/>=<sp/>cudaFilterModeLinear;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Tex.texDesc.filterMode<sp/>=<sp/>cudaFilterModePoint;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>Tex.texDesc.normalizedCoords<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(&amp;Tex.resDesc,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(cudaResourceDesc));</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>Tex.resDesc.resType<sp/>=<sp/>cudaResourceTypeArray;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>Tex.resDesc.res.array.array<sp/>=<sp/>Tex.CudArr;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>CUDA_CHECK(cudaCreateTextureObject(&amp;Tex.tex,<sp/>&amp;Tex.resDesc,<sp/>&amp;Tex.texDesc,<sp/>NULL));</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//CUDA_CHECK(cudaBindTextureToArray(Tex,<sp/>zca,<sp/>cCFD));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal">}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllocateBndTEX(<ref refid="classbndparam" kindref="compound">bndparam</ref><sp/>&amp;<sp/>side)</highlight></codeline>
<codeline lineno="312"><highlight class="normal">{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbndtimes<sp/>=<sp/>(int)side.data.size();</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbndvec<sp/>=<sp/>(int)side.data[0].wlevs.size();</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>lWLS;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>lWLS<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)malloc(nbndtimes<sp/>*<sp/>nbndvec<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibndv<sp/>=<sp/>0;<sp/>ibndv<sp/>&lt;<sp/>nbndvec;<sp/>ibndv++)</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibndt<sp/>=<sp/>0;<sp/>ibndt<sp/>&lt;<sp/>nbndtimes;<sp/>ibndt++)</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lWLS[ibndt<sp/>+<sp/>ibndv<sp/>*<sp/>nbndtimes]<sp/>=<sp/>(float)side.data[ibndt].wlevs[ibndv];</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateTEX(nbndtimes,<sp/>nbndvec,<sp/>side.GPU.WLS,<sp/>lWLS);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>case<sp/>of<sp/>Nesting<sp/>U<sp/>and<sp/>V<sp/>are<sp/>also<sp/>prescribed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>uu<sp/>information<sp/>is<sp/>available<sp/>in<sp/>the<sp/>boundary<sp/>we<sp/>can<sp/>assume<sp/>it<sp/>is<sp/>a<sp/>nesting<sp/>type<sp/>of<sp/>bnd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbndvecuu<sp/>=<sp/>(int)side.data[0].uuvel.size();</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nbndvecuu<sp/>==<sp/>nbndvec)</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibndv<sp/>=<sp/>0;<sp/>ibndv<sp/>&lt;<sp/>nbndvec;<sp/>ibndv++)</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibndt<sp/>=<sp/>0;<sp/>ibndt<sp/>&lt;<sp/>nbndtimes;<sp/>ibndt++)</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lWLS[ibndt<sp/>+<sp/>ibndv<sp/>*<sp/>nbndtimes]<sp/>=<sp/>(float)side.data[ibndt].uuvel[ibndv];</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateTEX(nbndtimes,<sp/>nbndvec,<sp/>side.GPU.Uvel,<sp/>lWLS);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//V<sp/>velocity<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbndvecvv<sp/>=<sp/>(int)side.data[0].vvvel.size();</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nbndvecvv<sp/>==<sp/>nbndvec)</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibndv<sp/>=<sp/>0;<sp/>ibndv<sp/>&lt;<sp/>nbndvec;<sp/>ibndv++)</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibndt<sp/>=<sp/>0;<sp/>ibndt<sp/>&lt;<sp/>nbndtimes;<sp/>ibndt++)</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lWLS[ibndt<sp/>+<sp/>ibndv<sp/>*<sp/>nbndtimes]<sp/>=<sp/>(float)side.data[ibndt].vvvel[ibndv];</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateTEX(nbndtimes,<sp/>nbndvec,<sp/>side.GPU.Vvel,<sp/>lWLS);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>free(lWLS);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/Setup_GPU.cu"/>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="Write__txtlog_8cpp" kind="file" language="C++">
    <compoundname>Write_txtlog.cpp</compoundname>
    <includes refid="Write__txtlog_8h" local="yes">Write_txtlog.h</includes>
    <incdepgraph>
      <node id="3">
        <label>General.h</label>
        <link refid="General_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>Input.h</label>
        <link refid="Input_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>Param.h</label>
        <link refid="Param_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/Write_txtlog.cpp</label>
        <link refid="Write__txtlog_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Write_txtlog.h</label>
        <link refid="Write__txtlog_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>algorithm</label>
      </node>
      <node id="10">
        <label>chrono</label>
      </node>
      <node id="9">
        <label>cmath</label>
      </node>
      <node id="11">
        <label>ctime</label>
      </node>
      <node id="4">
        <label>cuda_runtime.h</label>
      </node>
      <node id="5">
        <label>device_launch_parameters.h</label>
      </node>
      <node id="19">
        <label>fstream</label>
      </node>
      <node id="18">
        <label>iomanip</label>
      </node>
      <node id="17">
        <label>iostream</label>
      </node>
      <node id="21">
        <label>limits</label>
      </node>
      <node id="14">
        <label>map</label>
      </node>
      <node id="8">
        <label>math.h</label>
      </node>
      <node id="15">
        <label>netcdf.h</label>
      </node>
      <node id="20">
        <label>sstream</label>
      </node>
      <node id="6">
        <label>stdio.h</label>
      </node>
      <node id="7">
        <label>stdlib.h</label>
      </node>
      <node id="12">
        <label>string</label>
      </node>
      <node id="22">
        <label>thread</label>
      </node>
      <node id="13">
        <label>vector</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="Write__txtlog_8cpp_1a952fb8894d8841da2c243c1523e32f71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void log</definition>
        <argsstring>(std::string text)</argsstring>
        <name>log</name>
        <param>
          <type>std::string</type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Write_txtlog.cpp" line="22" column="6" bodyfile="src/Write_txtlog.cpp" bodystart="22" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="Write__txtlog_8cpp_1a2a943ddae08dfb41fce1f81ff1ecd357" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void create_logfile</definition>
        <argsstring>()</argsstring>
        <name>create_logfile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Write_txtlog.cpp" line="30" column="6" bodyfile="src/Write_txtlog.cpp" bodystart="30" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="Write__txtlog_8cpp_1a8dc4c812702060e9a2a9d3983daf9cbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void write_text_to_log_file</definition>
        <argsstring>(std::string text)</argsstring>
        <name>write_text_to_log_file</name>
        <param>
          <type>std::string</type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Write_txtlog.cpp" line="88" column="6" bodyfile="src/Write_txtlog.cpp" bodystart="88" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="Write__txtlog_8cpp_1a6f38f0571f7488a284105de78d6375c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SaveParamtolog</definition>
        <argsstring>(Param XParam)</argsstring>
        <name>SaveParamtolog</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Write_txtlog.cpp" line="96" column="6" bodyfile="src/Write_txtlog.cpp" bodystart="96" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="Write__txtlog_8cpp_1a67d938e5b26cbb85e146d04b94b977ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void saveparam2netCDF</definition>
        <argsstring>(int ncid, int bgfid, Param XParam)</argsstring>
        <name>saveparam2netCDF</name>
        <param>
          <type>int</type>
          <declname>ncid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bgfid</declname>
        </param>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Write_txtlog.cpp" line="219" column="6" bodyfile="src/Write_txtlog.cpp" bodystart="219" bodyend="419"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//Copyright<sp/>(C)<sp/>2018<sp/>Bosserelle<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//This<sp/>program<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//the<sp/>Free<sp/>Software<sp/>Foundation.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//along<sp/>with<sp/>this<sp/>program.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Write_txtlog.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>log(std::string<sp/>text)</highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>text<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>write_text_to_log_file(text);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>create_logfile()</highlight></codeline>
<codeline lineno="31"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>the<sp/>log<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ofstream<sp/>log_file(</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;BG_log.txt&quot;</highlight><highlight class="normal">,<sp/>std::ios_base::out<sp/>|<sp/>std::ios_base::trunc);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>log_file.close();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Logfile<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//auto<sp/>n<sp/>=<sp/>std::chrono::system_clock::now();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//auto<sp/>in_time_t<sp/>=<sp/>std::chrono::system_clock::to_time_t(n);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::tm<sp/>buf;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//localtime_s(&amp;buf,<sp/>&amp;in_time_t);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>std::put_time(&amp;buf,<sp/>&quot;%Y-%m-%d<sp/>%X&quot;)<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/><sp/><sp/>auto<sp/>now<sp/>=<sp/>std::chrono::system_clock::now();</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/><sp/><sp/>auto<sp/>in_time_t<sp/>=<sp/>std::chrono::system_clock::to_time_t(now);</highlight></codeline>
<codeline lineno="47"><highlight class="comment"></highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>std::put_time(std::localtime(&amp;in_time_t),<sp/>&quot;%Y-%m-%d<sp/>%X&quot;);</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/><sp/>std::time_t<sp/>now<sp/>=<sp/>std::chrono::system_clock::to_time_t(std::chrono::system_clock::now());</highlight></codeline>
<codeline lineno="53"><highlight class="comment"></highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/><sp/>std::string<sp/>s(30,<sp/>&apos;\0&apos;);</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/><sp/>std::tm<sp/>buf;</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/><sp/>struct<sp/>tm<sp/>*<sp/>timeinfo;</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/><sp/><sp/>std::localtime_s(&amp;buf,<sp/>&amp;now);</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/><sp/><sp/>//std::time_t<sp/>rawtime;</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/><sp/><sp/>//timeinfo<sp/>=<sp/>localtime(&amp;rawtime);</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/><sp/><sp/>std::strftime(&amp;s[0],<sp/>s.size(),<sp/>&quot;%Y-%m-%d<sp/>%H:%M:%S&quot;,<sp/>&amp;timeinfo);</highlight></codeline>
<codeline lineno="61"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//strftime(buffer,<sp/>80,<sp/>&quot;%d-%m-%Y<sp/>%H:%M:%S&quot;,<sp/>timeinfo);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::string<sp/>strtimenow(buffer);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>time_t<sp/>rawtime;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm*<sp/>timeinfo;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[80];</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>time(&amp;rawtime);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>timeinfo<sp/>=<sp/>localtime(&amp;rawtime);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>strftime(buffer,<sp/>80,<sp/></highlight><highlight class="stringliteral">&quot;%d-%m-%Y<sp/>%H:%M:%S&quot;</highlight><highlight class="normal">,<sp/>timeinfo);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>strtimenow(buffer);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;#################################&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;BG_Flood<sp/>v0.95&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;#################################&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//log(&quot;model<sp/>started<sp/>at<sp/>&quot;<sp/>+<sp/>ss.str());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;#################################&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;#&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;model<sp/>started<sp/>at<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>strtimenow);</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write_text_to_log_file(std::string<sp/>text)</highlight></codeline>
<codeline lineno="89"><highlight class="normal">{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ofstream<sp/>log_file(</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;BG_log.txt&quot;</highlight><highlight class="normal">,<sp/>std::ios_base::out<sp/>|<sp/>std::ios_base::app);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>log_file<sp/>&lt;&lt;<sp/>text<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>log_file.close();<sp/></highlight><highlight class="comment">//destructor<sp/>implicitly<sp/>does<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SaveParamtolog(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam)</highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>bring<sp/>in<sp/>Xforcing<sp/>info<sp/>too!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal">{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;###################################&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;###<sp/>Summary<sp/>of<sp/>model<sp/>parameters<sp/>###&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;###################################&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;#<sp/>Bathymetry<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//write_text_to_log_file(&quot;bathy<sp/>=<sp/>&quot;<sp/>+<sp/>XParam.Bathymetry.inputfile<sp/>+<sp/>&quot;;&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;posdown<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(XParam.posdown)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//write_text_to_log_file(&quot;nx<sp/>=<sp/>&quot;<sp/>+<sp/>std::to_string(XParam.nx)<sp/>+<sp/>&quot;;&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//write_text_to_log_file(&quot;ny<sp/>=<sp/>&quot;<sp/>+<sp/>std::to_string(XParam.ny)<sp/>+<sp/>&quot;;&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;dx<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(XParam.dx)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;delta<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(XParam.delta)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;grdalpha<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(XParam.grdalpha*180.0<sp/>/<sp/>pi)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;xo<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(XParam.xo)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;yo<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(XParam.yo)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;xmax<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(XParam.xo)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;ymax<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(XParam.yo)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;gpudevice<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(XParam.GPUDEVICE)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;#<sp/>Flow<sp/>parameters&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;eps<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(XParam.eps)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;cf<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(XParam.cf)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;theta<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(XParam.theta)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;Cd<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(XParam.Cd)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;#<sp/>Timekeeping<sp/>parameters&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;CFL<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(XParam.CFL)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;totaltime<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(XParam.totaltime)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;;<sp/>#<sp/>Start<sp/>time&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;endtime<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(XParam.endtime)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;outputtimestep<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(XParam.outputtimestep)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>alloutvars<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nvar<sp/>=<sp/>0;<sp/>nvar<sp/>&lt;<sp/>XParam.outvars.size();<sp/>nvar++)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nvar<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alloutvars<sp/>=<sp/>alloutvars<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alloutvars<sp/>=<sp/>alloutvars<sp/>+<sp/>XParam.outvars[nvar];</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;outvars<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>alloutvars<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;#<sp/>Files&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!XParam.outzone.empty())</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>o<sp/>=<sp/>0;<sp/>o<sp/>&lt;<sp/>XParam.outzone.size();<sp/>o++)</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;outzonefile<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>XParam.outzone[o].outname<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(XParam.outzone[o].xstart)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(XParam.outzone[o].xend)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(XParam.outzone[o].ystart)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(XParam.outzone[o].yend)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;outfile<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>XParam.outfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;smallnc<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(XParam.smallnc)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;;<sp/>#if<sp/>smallnc==1<sp/>all<sp/>Output<sp/>are<sp/>scaled<sp/>and<sp/>saved<sp/>as<sp/>a<sp/>short<sp/>int&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.smallnc<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;scalefactor<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(XParam.scalefactor)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;addoffset<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(XParam.addoffset)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!XParam.TSnodesout.empty())</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>o<sp/>=<sp/>0;<sp/>o<sp/>&lt;<sp/>XParam.TSnodesout.size();<sp/>o++)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;TSOfile<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>XParam.TSnodesout[o].outname<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(XParam.TSnodesout[o].x)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(XParam.TSnodesout[o].y)+</highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//write_text_to_log_file(&quot;TSnode<sp/>=<sp/>&quot;<sp/>+<sp/>std::to_string(XParam.TSnodesout[o].i)<sp/>+<sp/>&quot;,&quot;<sp/>+<sp/>std::to_string(XParam.TSnodesout[o].j)<sp/>+<sp/>&quot;;&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;#<sp/>Boundaries&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;#<sp/>0:wall;<sp/>1:<sp/>Neumann<sp/>(Default);<sp/>2:Dirichlet<sp/>(zs);<sp/>3:<sp/>abs1d<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/><sp/><sp/><sp/>//write_text_to_log_file(&quot;right<sp/>=<sp/>&quot;<sp/>+<sp/>std::to_string(XParam.rightbnd.type)<sp/>+<sp/>&quot;;&quot;);</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/><sp/><sp/><sp/>//write_text_to_log_file(&quot;left<sp/>=<sp/>&quot;<sp/>+<sp/>std::to_string(XParam.leftbnd.type)<sp/>+<sp/>&quot;;&quot;);</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/><sp/><sp/><sp/>//write_text_to_log_file(&quot;top<sp/>=<sp/>&quot;<sp/>+<sp/>std::to_string(XParam.topbnd.type)<sp/>+<sp/>&quot;;&quot;);</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/><sp/><sp/><sp/>//write_text_to_log_file(&quot;bot<sp/>=<sp/>&quot;<sp/>+<sp/>std::to_string(XParam.botbnd.type)<sp/>+<sp/>&quot;;&quot;);</highlight></codeline>
<codeline lineno="186"><highlight class="comment"></highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(!XParam.rightbnd.inputfile.empty())</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_text_to_log_file(&quot;rightbndfile<sp/>=<sp/>&quot;<sp/>+<sp/>XParam.rightbnd.inputfile<sp/>+<sp/>&quot;;&quot;);</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(!XParam.leftbnd.inputfile.empty())</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_text_to_log_file(&quot;leftbndfile<sp/>=<sp/>&quot;<sp/>+<sp/>XParam.leftbnd.inputfile<sp/>+<sp/>&quot;;&quot;);</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(!XParam.topbnd.inputfile.empty())</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_text_to_log_file(&quot;topbndfile<sp/>=<sp/>&quot;<sp/>+<sp/>XParam.topbnd.inputfile<sp/>+<sp/>&quot;;&quot;);</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(!XParam.botbnd.inputfile.empty())</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_text_to_log_file(&quot;botbndfile<sp/>=<sp/>&quot;<sp/>+<sp/>XParam.botbnd.inputfile<sp/>+<sp/>&quot;;&quot;);</highlight></codeline>
<codeline lineno="195"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/><sp/><sp/><sp/>std::string<sp/>rightbndfile;</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/><sp/><sp/><sp/>std::string<sp/>leftbndfile;</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/><sp/><sp/><sp/>std::string<sp/>topbndfile;</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/><sp/><sp/><sp/>std::string<sp/>botbndfile;</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//hot<sp/>start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!XParam.hotstartfile.empty())</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;hotstartfile<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>XParam.hotstartfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;hotstep<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(XParam.hotstep)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;#<sp/>Others&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;g<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(XParam.g)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;rho<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(XParam.rho)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>write_text_to_log_file(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>saveparam2netCDF(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ncid,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bgfid,<sp/><ref refid="classParam" kindref="compound">Param</ref><sp/>XParam)</highlight></codeline>
<codeline lineno="220"><highlight class="normal">{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status,<sp/>boolanswer;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//status<sp/>=<sp/>nc_put_att_text(ncid,<sp/>bgfid,<sp/>&quot;grid_mapping_name&quot;,<sp/>crsname.size(),<sp/>crsname.c_str());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//status<sp/>=<sp/>nc_put_att_float(ncid,<sp/>bgfid,<sp/>&quot;longitude_of_prime_meridian&quot;,<sp/>NC_FLOAT,<sp/>1,<sp/>&amp;primemeridian);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;XParam.test);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_double(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;g&quot;</highlight><highlight class="normal">,<sp/>NC_DOUBLE,<sp/>1,<sp/>&amp;XParam.g);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_double(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;rho&quot;</highlight><highlight class="normal">,<sp/>NC_DOUBLE,<sp/>1,<sp/>&amp;XParam.rho);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_double(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;eps&quot;</highlight><highlight class="normal">,<sp/>NC_DOUBLE,<sp/>1,<sp/>&amp;XParam.eps);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_double(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;CFL&quot;</highlight><highlight class="normal">,<sp/>NC_DOUBLE,<sp/>1,<sp/>&amp;XParam.CFL);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_double(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;theta&quot;</highlight><highlight class="normal">,<sp/>NC_DOUBLE,<sp/>1,<sp/>&amp;XParam.theta);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_double(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;VelThreshold&quot;</highlight><highlight class="normal">,<sp/>NC_DOUBLE,<sp/>1,<sp/>&amp;XParam.VelThreshold);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;frictionmodel&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;XParam.frictionmodel);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_double(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;Cd&quot;</highlight><highlight class="normal">,<sp/>NC_DOUBLE,<sp/>1,<sp/>&amp;XParam.Cd);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_double(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;Pa2m&quot;</highlight><highlight class="normal">,<sp/>NC_DOUBLE,<sp/>1,<sp/>&amp;XParam.Pa2m);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_double(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;Paref&quot;</highlight><highlight class="normal">,<sp/>NC_DOUBLE,<sp/>1,<sp/>&amp;XParam.Paref);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_double(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;lat&quot;</highlight><highlight class="normal">,<sp/>NC_DOUBLE,<sp/>1,<sp/>&amp;XParam.lat);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>boolanswer<sp/>=<sp/>XParam.windforcing;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;windforcing&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;boolanswer);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>boolanswer<sp/>=<sp/>XParam.atmpforcing;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;atmpforcing&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;boolanswer);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>boolanswer<sp/>=<sp/>XParam.rainforcing;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;rainforcing&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;boolanswer);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>boolanswer<sp/>=<sp/>XParam.infiltration;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;infiltration&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;boolanswer);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>boolanswer<sp/>=<sp/>XParam.conserveElevation;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;conserveElevation&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;boolanswer);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>boolanswer<sp/>=<sp/>XParam.wetdryfix;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;wetdryfix&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;boolanswer);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>boolanswer<sp/>=<sp/>XParam.leftbnd;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;leftbnd&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;boolanswer);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>boolanswer<sp/>=<sp/>XParam.rightbnd;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;rightbnd&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;boolanswer);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>boolanswer<sp/>=<sp/>XParam.topbnd;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;topbnd&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;boolanswer);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>boolanswer<sp/>=<sp/>XParam.botbnd;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;botbnd&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;boolanswer);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cf<sp/>=<sp/>0.0001;<sp/></highlight><highlight class="comment">//<sp/>Bottom<sp/>friction<sp/>coefficient<sp/>for<sp/>flow<sp/>model<sp/>(if<sp/>constant)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;GPUDEVICE&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;XParam.GPUDEVICE);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;doubleprecision&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;XParam.doubleprecision);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;engine&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;XParam.engine);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_double(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;dx&quot;</highlight><highlight class="normal">,<sp/>NC_DOUBLE,<sp/>1,<sp/>&amp;XParam.dx);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_double(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;delta&quot;</highlight><highlight class="normal">,<sp/>NC_DOUBLE,<sp/>1,<sp/>&amp;XParam.delta);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_double(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;xo&quot;</highlight><highlight class="normal">,<sp/>NC_DOUBLE,<sp/>1,<sp/>&amp;XParam.xo);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_double(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;yo&quot;</highlight><highlight class="normal">,<sp/>NC_DOUBLE,<sp/>1,<sp/>&amp;XParam.yo);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_double(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;xmax&quot;</highlight><highlight class="normal">,<sp/>NC_DOUBLE,<sp/>1,<sp/>&amp;XParam.xmax);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_double(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;ymax&quot;</highlight><highlight class="normal">,<sp/>NC_DOUBLE,<sp/>1,<sp/>&amp;XParam.ymax);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_double(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;grdalpha&quot;</highlight><highlight class="normal">,<sp/>NC_DOUBLE,<sp/>1,<sp/>&amp;XParam.grdalpha);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;nx&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;XParam.nx);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;ny&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;XParam.ny);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;nblk&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;XParam.nblk);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;blkwidth&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;XParam.blkwidth);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;blkmemwidth&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;XParam.blkmemwidth);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;blksize&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;XParam.blksize);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;halowidth&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;XParam.halowidth);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;posdown&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;XParam.posdown);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>boolanswer<sp/>=<sp/>XParam.spherical;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;spherical&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;boolanswer);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_double(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;Radius&quot;</highlight><highlight class="normal">,<sp/>NC_DOUBLE,<sp/>1,<sp/>&amp;XParam.Radius);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_double(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;mask&quot;</highlight><highlight class="normal">,<sp/>NC_DOUBLE,<sp/>1,<sp/>&amp;XParam.mask);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;initlevel&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;XParam.initlevel);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;maxlevel&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;XParam.maxlevel);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;minlevel&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;XParam.minlevel);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;nblkmem&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;XParam.nblkmem);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;navailblk&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;XParam.navailblk);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_double(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;membuffer&quot;</highlight><highlight class="normal">,<sp/>NC_DOUBLE,<sp/>1,<sp/>&amp;XParam.membuffer);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_double(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;outputtimestep&quot;</highlight><highlight class="normal">,<sp/>NC_DOUBLE,<sp/>1,<sp/>&amp;XParam.outputtimestep);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_double(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;endtime&quot;</highlight><highlight class="normal">,<sp/>NC_DOUBLE,<sp/>1,<sp/>&amp;XParam.endtime);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_double(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;totaltime&quot;</highlight><highlight class="normal">,<sp/>NC_DOUBLE,<sp/>1,<sp/>&amp;XParam.totaltime);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_double(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;dtinit&quot;</highlight><highlight class="normal">,<sp/>NC_DOUBLE,<sp/>1,<sp/>&amp;XParam.dtinit);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_double(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;dtmin&quot;</highlight><highlight class="normal">,<sp/>NC_DOUBLE,<sp/>1,<sp/>&amp;XParam.dtmin);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_double(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;zsinit&quot;</highlight><highlight class="normal">,<sp/>NC_DOUBLE,<sp/>1,<sp/>&amp;XParam.zsinit);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_double(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;zsoffset&quot;</highlight><highlight class="normal">,<sp/>NC_DOUBLE,<sp/>1,<sp/>&amp;XParam.zsoffset);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_text(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;hotstartfile&quot;</highlight><highlight class="normal">,<sp/>XParam.hotstartfile.size(),<sp/>XParam.hotstartfile.c_str());</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;hotstep&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;XParam.hotstep);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_double(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;wet_threshold<sp/>&quot;</highlight><highlight class="normal">,<sp/>NC_DOUBLE,<sp/>1,<sp/>&amp;XParam.wet_threshold);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;maxTSstorage&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;XParam.maxTSstorage);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>boolanswer<sp/>=<sp/>XParam.resetmax;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;resetmax&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;boolanswer);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>boolanswer<sp/>=<sp/>XParam.outmax;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;outmax&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;boolanswer);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>boolanswer<sp/>=<sp/>XParam.outmean;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;outmean&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;boolanswer);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>boolanswer<sp/>=<sp/>XParam.outtwet;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;outtwet&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;boolanswer);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;outishift&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;XParam.outishift);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;outjshift&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;XParam.outjshift);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;nrivers&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;XParam.nrivers);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;nblkriver&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;XParam.nblkriver);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;nbndblkleft&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;XParam.nbndblkleft);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;nbndblkright&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;XParam.nbndblkright);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;nbndblktop&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;XParam.nbndblktop);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;nbndblkbot&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;XParam.nbndblkbot);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;nmaskblk&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;XParam.nmaskblk);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;smallnc&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;XParam.smallnc);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_float(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;scalefactor&quot;</highlight><highlight class="normal">,<sp/>NC_FLOAT,<sp/>1,<sp/>&amp;XParam.scalefactor);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_float(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;addoffset&quot;</highlight><highlight class="normal">,<sp/>NC_FLOAT,<sp/>1,<sp/>&amp;XParam.addoffset);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_double(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;deformmaxtime&quot;</highlight><highlight class="normal">,<sp/>NC_DOUBLE,<sp/>1,<sp/>&amp;XParam.deformmaxtime);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>boolanswer<sp/>=<sp/>XParam.rainbnd;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;rainbnd&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;boolanswer);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_text(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;AdaptCrit&quot;</highlight><highlight class="normal">,<sp/>XParam.AdaptCrit.size(),<sp/>XParam.AdaptCrit.c_str());</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_text(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;Adapt_arg1&quot;</highlight><highlight class="normal">,<sp/>XParam.Adapt_arg1.size(),<sp/>XParam.Adapt_arg1.c_str());</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_text(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;Adapt_arg2&quot;</highlight><highlight class="normal">,<sp/>XParam.Adapt_arg2.size(),<sp/>XParam.Adapt_arg2.c_str());</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_text(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;Adapt_arg3&quot;</highlight><highlight class="normal">,<sp/>XParam.Adapt_arg3.size(),<sp/>XParam.Adapt_arg3.c_str());</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_text(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;Adapt_arg4&quot;</highlight><highlight class="normal">,<sp/>XParam.Adapt_arg4.size(),<sp/>XParam.Adapt_arg4.c_str());</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_text(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;Adapt_arg5&quot;</highlight><highlight class="normal">,<sp/>XParam.Adapt_arg5.size(),<sp/>XParam.Adapt_arg5.c_str());</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_int(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;adaptmaxiteration&quot;</highlight><highlight class="normal">,<sp/>NC_INT,<sp/>1,<sp/>&amp;XParam.adaptmaxiteration);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_text(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;reftime&quot;</highlight><highlight class="normal">,<sp/>XParam.reftime.size(),<sp/>XParam.reftime.c_str());</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>allouvars;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>XParam.outvars.size();<sp/>i++)</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allouvars<sp/>=<sp/>allouvars<sp/>+<sp/>XParam.outvars[i];</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>(XParam.outvars.size()<sp/>-<sp/>1))</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allouvars<sp/>=<sp/>allouvars<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_text(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;outvars&quot;</highlight><highlight class="normal">,<sp/>allouvars.size(),<sp/>allouvars.c_str());</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>nc_put_att_text(ncid,<sp/>bgfid,<sp/></highlight><highlight class="stringliteral">&quot;outfile&quot;</highlight><highlight class="normal">,<sp/>XParam.outfile.size(),<sp/>XParam.outfile.c_str());</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="401"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="402"><highlight class="comment"><sp/><sp/><sp/><sp/>std::vector&lt;TSoutnode&gt;<sp/>TSnodesout;</highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="404"><highlight class="comment"></highlight></codeline>
<codeline lineno="405"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="406"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="407"><highlight class="comment"></highlight></codeline>
<codeline lineno="408"><highlight class="comment"><sp/><sp/><sp/><sp/>std::vector&lt;outzoneP&gt;<sp/>outzone;</highlight></codeline>
<codeline lineno="409"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="410"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>deformation<sp/>forcing<sp/>for<sp/>tsunami<sp/>generation</highlight></codeline>
<codeline lineno="411"><highlight class="comment"><sp/><sp/><sp/><sp/>//std::vector&lt;deformmap&gt;<sp/>deform;</highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="413"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/><sp/><sp/><sp/>std::string<sp/>AdaptCrit;</highlight></codeline>
<codeline lineno="415"><highlight class="comment"><sp/><sp/><sp/><sp/>int*<sp/>AdaptCrit_funct_pointer;</highlight></codeline>
<codeline lineno="416"><highlight class="comment"></highlight></codeline>
<codeline lineno="417"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="418"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/Write_txtlog.cpp"/>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="GridManip_8cu" kind="file" language="C++">
    <compoundname>GridManip.cu</compoundname>
    <includes refid="GridManip_8h" local="yes">GridManip.h</includes>
    <incdepgraph>
      <node id="27">
        <label>Arrays.h</label>
        <link refid="Arrays_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>Boundary.h</label>
        <link refid="Boundary_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>ConserveElevation.h</label>
        <link refid="ConserveElevation_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>Forcing.h</label>
        <link refid="Forcing_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>General.h</label>
        <link refid="General_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>Gradients.h</label>
        <link refid="Gradients_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/GridManip.cu</label>
        <link refid="GridManip_8cu"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>GridManip.h</label>
        <link refid="GridManip_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>Halo.h</label>
        <link refid="Halo_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>InitEvolv.h</label>
        <link refid="InitEvolv_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>InitialConditions.h</label>
        <link refid="InitialConditions_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>Input.h</label>
        <link refid="Input_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>Kurganov.h</label>
        <link refid="Kurganov_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>MemManagement.h</label>
        <link refid="MemManagement_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>Mesh.h</label>
        <link refid="Mesh_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>Param.h</label>
        <link refid="Param_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>Poly.h</label>
        <link refid="Poly_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>ReadForcing.h</label>
        <link refid="ReadForcing_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>ReadInput.h</label>
        <link refid="ReadInput_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>Read_netcdf.h</label>
        <link refid="Read__netcdf_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>Setup_GPU.h</label>
        <link refid="Setup__GPU_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>Spherical.h</label>
        <link refid="Spherical_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>Updateforcing.h</label>
        <link refid="Updateforcing_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>Util_CPU.h</label>
        <link refid="Util__CPU_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>Write_netcdf.h</label>
        <link refid="Write__netcdf_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>Write_txtlog.h</label>
        <link refid="Write__txtlog_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>utctime.h</label>
        <link refid="utctime_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>algorithm</label>
      </node>
      <node id="10">
        <label>chrono</label>
      </node>
      <node id="9">
        <label>cmath</label>
      </node>
      <node id="11">
        <label>ctime</label>
      </node>
      <node id="4">
        <label>cuda_runtime.h</label>
      </node>
      <node id="5">
        <label>device_launch_parameters.h</label>
      </node>
      <node id="19">
        <label>fstream</label>
      </node>
      <node id="18">
        <label>iomanip</label>
      </node>
      <node id="17">
        <label>iostream</label>
      </node>
      <node id="21">
        <label>limits</label>
      </node>
      <node id="14">
        <label>map</label>
      </node>
      <node id="8">
        <label>math.h</label>
      </node>
      <node id="15">
        <label>netcdf.h</label>
      </node>
      <node id="20">
        <label>sstream</label>
      </node>
      <node id="6">
        <label>stdio.h</label>
      </node>
      <node id="7">
        <label>stdlib.h</label>
      </node>
      <node id="12">
        <label>string</label>
      </node>
      <node id="22">
        <label>thread</label>
      </node>
      <node id="13">
        <label>vector</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="GridManip_8cu_1aae52a483f7b7909be19d40bd3ac4fa6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void InitArrayBUQ</definition>
        <argsstring>(Param XParam, BlockP&lt; F &gt; XBlock, T initval, T *&amp;Arr)</argsstring>
        <name>InitArrayBUQ</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; F &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>T</type>
          <declname>initval</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>Arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="29" column="19" bodyfile="src/GridManip.cu" bodystart="29" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1aee5d7058754f94ac04fe3bab492a920d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void InitArrayBUQ&lt; float, float &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; float &gt; XBlock, float initval, float *&amp;Arr)</argsstring>
        <name>InitArrayBUQ&lt; float, float &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; float &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>float</type>
          <declname>initval</declname>
        </param>
        <param>
          <type>float *&amp;</type>
          <declname>Arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="48" column="10" declfile="src/GridManip.cu" declline="48" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1a6f9e138c54b4130a9f587ccb47b86f52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void InitArrayBUQ&lt; double, float &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; float &gt; XBlock, double initval, double *&amp;Arr)</argsstring>
        <name>InitArrayBUQ&lt; double, float &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; float &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>double</type>
          <declname>initval</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>Arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="49" column="10" declfile="src/GridManip.cu" declline="49" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1a4583ba08f6606fdc9ad6eba712d80b87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void InitArrayBUQ&lt; int, float &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; float &gt; XBlock, int initval, int *&amp;Arr)</argsstring>
        <name>InitArrayBUQ&lt; int, float &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; float &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>int</type>
          <declname>initval</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>Arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="50" column="10" declfile="src/GridManip.cu" declline="50" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1a5b8934b83ca631473d140700a32650a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void InitArrayBUQ&lt; bool, float &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; float &gt; XBlock, bool initval, bool *&amp;Arr)</argsstring>
        <name>InitArrayBUQ&lt; bool, float &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; float &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>initval</declname>
        </param>
        <param>
          <type>bool *&amp;</type>
          <declname>Arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="51" column="10" declfile="src/GridManip.cu" declline="51" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1ab9fe084b621a6361e7275a032cce2253" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void InitArrayBUQ&lt; float, double &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; double &gt; XBlock, float initval, float *&amp;Arr)</argsstring>
        <name>InitArrayBUQ&lt; float, double &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; double &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>float</type>
          <declname>initval</declname>
        </param>
        <param>
          <type>float *&amp;</type>
          <declname>Arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="53" column="10" declfile="src/GridManip.cu" declline="53" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1adfc5d8cf92eb17e1c9242f67e3b1ffce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void InitArrayBUQ&lt; double, double &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; double &gt; XBlock, double initval, double *&amp;Arr)</argsstring>
        <name>InitArrayBUQ&lt; double, double &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; double &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>double</type>
          <declname>initval</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>Arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="54" column="10" declfile="src/GridManip.cu" declline="54" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1a7cfb9f6f2e9261dbd76c7c16286d1021" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void InitArrayBUQ&lt; int, double &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; double &gt; XBlock, int initval, int *&amp;Arr)</argsstring>
        <name>InitArrayBUQ&lt; int, double &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; double &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>int</type>
          <declname>initval</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>Arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="55" column="10" declfile="src/GridManip.cu" declline="55" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1a34f1dd305861e9b7ca2ab14758096dec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void InitArrayBUQ&lt; bool, double &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; double &gt; XBlock, bool initval, bool *&amp;Arr)</argsstring>
        <name>InitArrayBUQ&lt; bool, double &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; double &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>initval</declname>
        </param>
        <param>
          <type>bool *&amp;</type>
          <declname>Arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="56" column="10" declfile="src/GridManip.cu" declline="56" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1ab2b99ebfa98d229b030f7e7e6a5cc48f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void InitBlkBUQ</definition>
        <argsstring>(Param XParam, BlockP&lt; F &gt; XBlock, T initval, T *&amp;Arr)</argsstring>
        <name>InitBlkBUQ</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; F &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>T</type>
          <declname>initval</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>Arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="60" column="20" bodyfile="src/GridManip.cu" bodystart="60" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1a38256618f048ef2cc10c8dab1558abc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void InitBlkBUQ&lt; bool, float &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; float &gt; XBlock, bool initval, bool *&amp;Arr)</argsstring>
        <name>InitBlkBUQ&lt; bool, float &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; float &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>initval</declname>
        </param>
        <param>
          <type>bool *&amp;</type>
          <declname>Arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="73" column="10" declfile="src/GridManip.cu" declline="73" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1a29b36b07ef13050e8d8545b93a81cdd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void InitBlkBUQ&lt; int, float &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; float &gt; XBlock, int initval, int *&amp;Arr)</argsstring>
        <name>InitBlkBUQ&lt; int, float &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; float &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>int</type>
          <declname>initval</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>Arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="74" column="10" declfile="src/GridManip.cu" declline="74" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1ab615934e2a0e853d2985b8c3072b82cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void InitBlkBUQ&lt; float, float &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; float &gt; XBlock, float initval, float *&amp;Arr)</argsstring>
        <name>InitBlkBUQ&lt; float, float &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; float &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>float</type>
          <declname>initval</declname>
        </param>
        <param>
          <type>float *&amp;</type>
          <declname>Arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="75" column="10" declfile="src/GridManip.cu" declline="75" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1ab87d447640108881dc39243e54279fca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void InitBlkBUQ&lt; double, float &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; float &gt; XBlock, double initval, double *&amp;Arr)</argsstring>
        <name>InitBlkBUQ&lt; double, float &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; float &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>double</type>
          <declname>initval</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>Arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="76" column="10" declfile="src/GridManip.cu" declline="76" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1ad4320b5ecfbe78ff868f81c65de13360" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void InitBlkBUQ&lt; bool, double &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; double &gt; XBlock, bool initval, bool *&amp;Arr)</argsstring>
        <name>InitBlkBUQ&lt; bool, double &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; double &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>initval</declname>
        </param>
        <param>
          <type>bool *&amp;</type>
          <declname>Arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="78" column="10" declfile="src/GridManip.cu" declline="78" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1a85deb30447fa2d2c654bf942c6d971ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void InitBlkBUQ&lt; int, double &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; double &gt; XBlock, int initval, int *&amp;Arr)</argsstring>
        <name>InitBlkBUQ&lt; int, double &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; double &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>int</type>
          <declname>initval</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>Arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="79" column="10" declfile="src/GridManip.cu" declline="79" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1ab64edc381e501ae7f3d1b49fcf2651b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void InitBlkBUQ&lt; float, double &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; double &gt; XBlock, float initval, float *&amp;Arr)</argsstring>
        <name>InitBlkBUQ&lt; float, double &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; double &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>float</type>
          <declname>initval</declname>
        </param>
        <param>
          <type>float *&amp;</type>
          <declname>Arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="80" column="10" declfile="src/GridManip.cu" declline="80" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1a88305d647c2fccdae01525e6aa6bf92e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void InitBlkBUQ&lt; double, double &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; double &gt; XBlock, double initval, double *&amp;Arr)</argsstring>
        <name>InitBlkBUQ&lt; double, double &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; double &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>double</type>
          <declname>initval</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>Arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="81" column="10" declfile="src/GridManip.cu" declline="81" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1a401030b3e187ee3c25536445ed9274e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CopyArrayBUQ</definition>
        <argsstring>(Param XParam, BlockP&lt; F &gt; XBlock, T *source, T *&amp;dest)</argsstring>
        <name>CopyArrayBUQ</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; F &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>source</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="84" column="19" bodyfile="src/GridManip.cu" bodystart="84" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1aafcf0ecdd35e6be6071375292078e032" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void CopyArrayBUQ&lt; bool, float &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; float &gt; XBlock, bool *source, bool *&amp;dest)</argsstring>
        <name>CopyArrayBUQ&lt; bool, float &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; float &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>source</declname>
        </param>
        <param>
          <type>bool *&amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="103" column="10" declfile="src/GridManip.cu" declline="103" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1a168e3313e01727f7fbbe4c0559348743" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void CopyArrayBUQ&lt; int, float &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; float &gt; XBlock, int *source, int *&amp;dest)</argsstring>
        <name>CopyArrayBUQ&lt; int, float &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; float &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>source</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="104" column="10" declfile="src/GridManip.cu" declline="104" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1a95cd400f124b8a15c686c6b3e54c7b1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void CopyArrayBUQ&lt; float, float &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; float &gt; XBlock, float *source, float *&amp;dest)</argsstring>
        <name>CopyArrayBUQ&lt; float, float &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; float &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>source</declname>
        </param>
        <param>
          <type>float *&amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="105" column="10" declfile="src/GridManip.cu" declline="105" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1a3882059aabb5284c389c121af53f5906" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void CopyArrayBUQ&lt; double, float &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; float &gt; XBlock, double *source, double *&amp;dest)</argsstring>
        <name>CopyArrayBUQ&lt; double, float &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; float &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>source</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="106" column="10" declfile="src/GridManip.cu" declline="106" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1ab6a1951cbc91a2ea38939c96c9128c79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void CopyArrayBUQ&lt; bool, double &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; double &gt; XBlock, bool *source, bool *&amp;dest)</argsstring>
        <name>CopyArrayBUQ&lt; bool, double &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; double &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>source</declname>
        </param>
        <param>
          <type>bool *&amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="108" column="10" declfile="src/GridManip.cu" declline="108" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1a8bf584343ba4113bd5553bb9ac93bfe9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void CopyArrayBUQ&lt; int, double &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; double &gt; XBlock, int *source, int *&amp;dest)</argsstring>
        <name>CopyArrayBUQ&lt; int, double &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; double &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>source</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="109" column="10" declfile="src/GridManip.cu" declline="109" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1aa2b908a74e90cfef81a773a986830e77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void CopyArrayBUQ&lt; float, double &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; double &gt; XBlock, float *source, float *&amp;dest)</argsstring>
        <name>CopyArrayBUQ&lt; float, double &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; double &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>source</declname>
        </param>
        <param>
          <type>float *&amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="110" column="10" declfile="src/GridManip.cu" declline="110" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1a67d082532bea641d7493b7118380d342" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void CopyArrayBUQ&lt; double, double &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; double &gt; XBlock, double *source, double *&amp;dest)</argsstring>
        <name>CopyArrayBUQ&lt; double, double &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; double &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>source</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="111" column="10" declfile="src/GridManip.cu" declline="111" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1ad209e9ddcf81ccf9f732db5e8bb8428e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CopyArrayBUQ</definition>
        <argsstring>(Param XParam, BlockP&lt; T &gt; XBlock, EvolvingP&lt; T &gt; source, EvolvingP&lt; T &gt; &amp;dest)</argsstring>
        <name>CopyArrayBUQ</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; T &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; T &gt;</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; T &gt; &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="114" column="18" bodyfile="src/GridManip.cu" bodystart="114" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1a6afc4e6ad8c61355e22f59d996e04d9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void CopyArrayBUQ&lt; float &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; float &gt; XBlock, EvolvingP&lt; float &gt; source, EvolvingP&lt; float &gt; &amp;dest)</argsstring>
        <name>CopyArrayBUQ&lt; float &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; float &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; float &gt;</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; float &gt; &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="121" column="10" declfile="src/GridManip.cu" declline="121" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1ac02a95e02468b3060efa3a23c5531ae3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void CopyArrayBUQ&lt; double &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; double &gt; XBlock, EvolvingP&lt; double &gt; source, EvolvingP&lt; double &gt; &amp;dest)</argsstring>
        <name>CopyArrayBUQ&lt; double &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; double &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; double &gt;</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; double &gt; &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="122" column="10" declfile="src/GridManip.cu" declline="122" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1ac823ba38d576d0d82917f2a7680153da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CopyArrayBUQ</definition>
        <argsstring>(Param XParam, BlockP&lt; T &gt; XBlock, EvolvingP&lt; T &gt; source, EvolvingP_M&lt; T &gt; &amp;dest)</argsstring>
        <name>CopyArrayBUQ</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; T &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; T &gt;</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP__M" kindref="compound">EvolvingP_M</ref>&lt; T &gt; &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="124" column="18" bodyfile="src/GridManip.cu" bodystart="124" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1aa44f1ca914c0cb6dcc464148c66c029b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void CopyArrayBUQ&lt; float &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; float &gt; XBlock, EvolvingP&lt; float &gt; source, EvolvingP_M&lt; float &gt; &amp;dest)</argsstring>
        <name>CopyArrayBUQ&lt; float &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; float &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; float &gt;</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP__M" kindref="compound">EvolvingP_M</ref>&lt; float &gt; &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="148" column="10" declfile="src/GridManip.cu" declline="148" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1a897202f0823f24146e9e585485562daa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void CopyArrayBUQ&lt; double &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; double &gt; XBlock, EvolvingP&lt; double &gt; source, EvolvingP_M&lt; double &gt; &amp;dest)</argsstring>
        <name>CopyArrayBUQ&lt; double &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; double &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; double &gt;</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP__M" kindref="compound">EvolvingP_M</ref>&lt; double &gt; &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="149" column="10" declfile="src/GridManip.cu" declline="149" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1a2c53af2a95f3a86427f93b440f40ddd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void setedges</definition>
        <argsstring>(Param XParam, BlockP&lt; T &gt; XBlock, T *&amp;zb)</argsstring>
        <name>setedges</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; T &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>zb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="152" column="19" bodyfile="src/GridManip.cu" bodystart="152" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1a5e95fd52a623afa68a876c4ec01f7e37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void setedges&lt; float &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; float &gt; XBlock, float *&amp;zb)</argsstring>
        <name>setedges&lt; float &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; float &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>float *&amp;</type>
          <declname>zb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="179" column="10" declfile="src/GridManip.cu" declline="179" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1afcf85cfa2468be7605f70398d3601de9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void setedges&lt; double &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; double &gt; XBlock, double *&amp;zb)</argsstring>
        <name>setedges&lt; double &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; double &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>zb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="180" column="10" declfile="src/GridManip.cu" declline="180" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1a32731b207471202aefce52a8635323f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void setedgessideLR</definition>
        <argsstring>(Param XParam, int ib, int blkA, int blkB, int iread, int iwrite, T *&amp;zb)</argsstring>
        <name>setedgessideLR</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ib</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blkA</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blkB</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iread</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iwrite</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>zb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="182" column="19" bodyfile="src/GridManip.cu" bodystart="182" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1a551ad361823a970ae5f445bb50d1df8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void setedgessideBT</definition>
        <argsstring>(Param XParam, int ib, int blkA, int blkB, int jread, int jwrite, T *&amp;zb)</argsstring>
        <name>setedgessideBT</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ib</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blkA</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blkB</declname>
        </param>
        <param>
          <type>int</type>
          <declname>jread</declname>
        </param>
        <param>
          <type>int</type>
          <declname>jwrite</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>zb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="202" column="19" bodyfile="src/GridManip.cu" bodystart="202" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1a1a76ee388dcb58bf18462c45c9e81dc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void interp2BUQ</definition>
        <argsstring>(Param XParam, BlockP&lt; T &gt; XBlock, F forcing, T *&amp;z)</argsstring>
        <name>interp2BUQ</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; T &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>F</type>
          <declname>forcing</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="223" column="20" bodyfile="src/GridManip.cu" bodystart="223" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1a8d2dacf98e015e7da85be9ac986e1203" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void interp2BUQ&lt; float, StaticForcingP&lt; float &gt; &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; float &gt; XBlock, StaticForcingP&lt; float &gt; forcing, float *&amp;z)</argsstring>
        <name>interp2BUQ&lt; float, StaticForcingP&lt; float &gt; &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; float &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="structStaticForcingP" kindref="compound">StaticForcingP</ref>&lt; float &gt;</type>
          <declname>forcing</declname>
        </param>
        <param>
          <type>float *&amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="250" column="10" declfile="src/GridManip.cu" declline="250" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1acadf72e0c0fd5fd563de5f27392a4040" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void interp2BUQ&lt; double, StaticForcingP&lt; float &gt; &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; double &gt; XBlock, StaticForcingP&lt; float &gt; forcing, double *&amp;z)</argsstring>
        <name>interp2BUQ&lt; double, StaticForcingP&lt; float &gt; &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; double &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="structStaticForcingP" kindref="compound">StaticForcingP</ref>&lt; float &gt;</type>
          <declname>forcing</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="251" column="10" declfile="src/GridManip.cu" declline="251" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1aac738694eaf1f159c757da905e7d8680" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void interp2BUQ&lt; float, deformmap&lt; float &gt; &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; float &gt; XBlock, deformmap&lt; float &gt; forcing, float *&amp;z)</argsstring>
        <name>interp2BUQ&lt; float, deformmap&lt; float &gt; &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; float &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="classdeformmap" kindref="compound">deformmap</ref>&lt; float &gt;</type>
          <declname>forcing</declname>
        </param>
        <param>
          <type>float *&amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="254" column="10" declfile="src/GridManip.cu" declline="254" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1a6764051c3179e8fbcf76c1a0c064d6bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void interp2BUQ&lt; double, deformmap&lt; float &gt; &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; double &gt; XBlock, deformmap&lt; float &gt; forcing, double *&amp;z)</argsstring>
        <name>interp2BUQ&lt; double, deformmap&lt; float &gt; &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; double &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="classdeformmap" kindref="compound">deformmap</ref>&lt; float &gt;</type>
          <declname>forcing</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="255" column="10" declfile="src/GridManip.cu" declline="255" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1a5af92e5b530e995f2aaa81ab1504cbeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void interp2BUQ&lt; float, DynForcingP&lt; float &gt; &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; float &gt; XBlock, DynForcingP&lt; float &gt; forcing, float *&amp;z)</argsstring>
        <name>interp2BUQ&lt; float, DynForcingP&lt; float &gt; &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; float &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="structDynForcingP" kindref="compound">DynForcingP</ref>&lt; float &gt;</type>
          <declname>forcing</declname>
        </param>
        <param>
          <type>float *&amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="256" column="10" declfile="src/GridManip.cu" declline="256" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1aa5109365275057062e925800b58042b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void interp2BUQ&lt; double, DynForcingP&lt; float &gt; &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; double &gt; XBlock, DynForcingP&lt; float &gt; forcing, double *&amp;z)</argsstring>
        <name>interp2BUQ&lt; double, DynForcingP&lt; float &gt; &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; double &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type><ref refid="structDynForcingP" kindref="compound">DynForcingP</ref>&lt; float &gt;</type>
          <declname>forcing</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="257" column="10" declfile="src/GridManip.cu" declline="257" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1a11386462ca195bafbb95ab5358c69863" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void interp2BUQ</definition>
        <argsstring>(Param XParam, BlockP&lt; T &gt; XBlock, std::vector&lt; StaticForcingP&lt; float &gt; &gt; forcing, T *z)</argsstring>
        <name>interp2BUQ</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; T &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="structStaticForcingP" kindref="compound">StaticForcingP</ref>&lt; float &gt; &gt;</type>
          <declname>forcing</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="259" column="18" bodyfile="src/GridManip.cu" bodystart="259" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1a768267a64fd12ebaf28313a9712e11e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void interp2BUQ&lt; float &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; float &gt; XBlock, std::vector&lt; StaticForcingP&lt; float &gt; &gt; forcing, float *z)</argsstring>
        <name>interp2BUQ&lt; float &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; float &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="structStaticForcingP" kindref="compound">StaticForcingP</ref>&lt; float &gt; &gt;</type>
          <declname>forcing</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="318" column="10" declfile="src/GridManip.cu" declline="318" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1a7a6d9d6ee21ffbdfe1daa66083e20370" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void interp2BUQ&lt; double &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; double &gt; XBlock, std::vector&lt; StaticForcingP&lt; float &gt; &gt; forcing, double *z)</argsstring>
        <name>interp2BUQ&lt; double &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; double &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="structStaticForcingP" kindref="compound">StaticForcingP</ref>&lt; float &gt; &gt;</type>
          <declname>forcing</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="319" column="10" declfile="src/GridManip.cu" declline="319" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1a21e34043eba5a823525041e78302851b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T interp2BUQ</definition>
        <argsstring>(T x, T y, T dx, F forcing)</argsstring>
        <name>interp2BUQ</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <param>
          <type>T</type>
          <declname>y</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>F</type>
          <declname>forcing</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="322" column="17" bodyfile="src/GridManip.cu" bodystart="322" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1aac3c88d5ba2164dbfcd61e5693840ee4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T blockmean</definition>
        <argsstring>(T x, T y, T dx, F forcing)</argsstring>
        <name>blockmean</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <param>
          <type>T</type>
          <declname>y</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>F</type>
          <declname>forcing</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="337" column="17" bodyfile="src/GridManip.cu" bodystart="337" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1a6ef807f08f9ab5df6f2fed0ca99649a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T interp2BUQ</definition>
        <argsstring>(T x, T y, F forcing)</argsstring>
        <name>interp2BUQ</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <param>
          <type>T</type>
          <declname>y</declname>
        </param>
        <param>
          <type>F</type>
          <declname>forcing</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="381" column="17" bodyfile="src/GridManip.cu" bodystart="381" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1a9af35b24257991d3b9becd4bf89ceef7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template float</type>
        <definition>template float interp2BUQ&lt; float, StaticForcingP&lt; float &gt; &gt;</definition>
        <argsstring>(float x, float y, StaticForcingP&lt; float &gt; forcing)</argsstring>
        <name>interp2BUQ&lt; float, StaticForcingP&lt; float &gt; &gt;</name>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structStaticForcingP" kindref="compound">StaticForcingP</ref>&lt; float &gt;</type>
          <declname>forcing</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="417" column="10" declfile="src/GridManip.cu" declline="417" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1a1518210d8cee4b196ff97020d221ef95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template double</type>
        <definition>template double interp2BUQ&lt; double, StaticForcingP&lt; float &gt; &gt;</definition>
        <argsstring>(double x, double y, StaticForcingP&lt; float &gt; forcing)</argsstring>
        <name>interp2BUQ&lt; double, StaticForcingP&lt; float &gt; &gt;</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structStaticForcingP" kindref="compound">StaticForcingP</ref>&lt; float &gt;</type>
          <declname>forcing</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="418" column="10" declfile="src/GridManip.cu" declline="418" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1a0a53b08d2c7eeeca73ee61a72cd463ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template float</type>
        <definition>template float interp2BUQ&lt; float, StaticForcingP&lt; int &gt; &gt;</definition>
        <argsstring>(float x, float y, StaticForcingP&lt; int &gt; forcing)</argsstring>
        <name>interp2BUQ&lt; float, StaticForcingP&lt; int &gt; &gt;</name>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structStaticForcingP" kindref="compound">StaticForcingP</ref>&lt; int &gt;</type>
          <declname>forcing</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="419" column="10" declfile="src/GridManip.cu" declline="419" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1acac0c46146dc9ffc8caaa87254001431" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template double</type>
        <definition>template double interp2BUQ&lt; double, StaticForcingP&lt; int &gt; &gt;</definition>
        <argsstring>(double x, double y, StaticForcingP&lt; int &gt; forcing)</argsstring>
        <name>interp2BUQ&lt; double, StaticForcingP&lt; int &gt; &gt;</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structStaticForcingP" kindref="compound">StaticForcingP</ref>&lt; int &gt;</type>
          <declname>forcing</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="420" column="10" declfile="src/GridManip.cu" declline="420" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1a39685c584601da569fe13be079d13303" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template float</type>
        <definition>template float interp2BUQ&lt; float, deformmap&lt; float &gt; &gt;</definition>
        <argsstring>(float x, float y, deformmap&lt; float &gt; forcing)</argsstring>
        <name>interp2BUQ&lt; float, deformmap&lt; float &gt; &gt;</name>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classdeformmap" kindref="compound">deformmap</ref>&lt; float &gt;</type>
          <declname>forcing</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="421" column="10" declfile="src/GridManip.cu" declline="421" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1a503dab5a950e1eef4cba9efc3aa6412d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template double</type>
        <definition>template double interp2BUQ&lt; double, deformmap&lt; float &gt; &gt;</definition>
        <argsstring>(double x, double y, deformmap&lt; float &gt; forcing)</argsstring>
        <name>interp2BUQ&lt; double, deformmap&lt; float &gt; &gt;</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classdeformmap" kindref="compound">deformmap</ref>&lt; float &gt;</type>
          <declname>forcing</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="422" column="10" declfile="src/GridManip.cu" declline="422" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1a17a442b7eb731cfd6082c2a843470a14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template float</type>
        <definition>template float interp2BUQ&lt; float, DynForcingP&lt; float &gt; &gt;</definition>
        <argsstring>(float x, float y, DynForcingP&lt; float &gt; forcing)</argsstring>
        <name>interp2BUQ&lt; float, DynForcingP&lt; float &gt; &gt;</name>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structDynForcingP" kindref="compound">DynForcingP</ref>&lt; float &gt;</type>
          <declname>forcing</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="423" column="10" declfile="src/GridManip.cu" declline="423" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1aaa2a7b76d839660e4701290cc7100999" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template double</type>
        <definition>template double interp2BUQ&lt; double, DynForcingP&lt; float &gt; &gt;</definition>
        <argsstring>(double x, double y, DynForcingP&lt; float &gt; forcing)</argsstring>
        <name>interp2BUQ&lt; double, DynForcingP&lt; float &gt; &gt;</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structDynForcingP" kindref="compound">DynForcingP</ref>&lt; float &gt;</type>
          <declname>forcing</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="424" column="10" declfile="src/GridManip.cu" declline="424" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1a242cf7787fb7c176e5a784ddfb3aea7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void InterpstepCPU</definition>
        <argsstring>(int nx, int ny, int hdstep, F totaltime, F hddt, T *&amp;Ux, T *Uo, T *Un)</argsstring>
        <name>InterpstepCPU</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>int</type>
          <declname>hdstep</declname>
        </param>
        <param>
          <type>F</type>
          <declname>totaltime</declname>
        </param>
        <param>
          <type>F</type>
          <declname>hddt</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>Ux</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>Uo</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>Un</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="427" column="20" bodyfile="src/GridManip.cu" bodystart="427" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1a2a8222b4fcc052f038fab40fe1e92062" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void InterpstepCPU&lt; int, float &gt;</definition>
        <argsstring>(int nx, int ny, int hdstep, float totaltime, float hddt, int *&amp;Ux, int *Uo, int *Un)</argsstring>
        <name>InterpstepCPU&lt; int, float &gt;</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>int</type>
          <declname>hdstep</declname>
        </param>
        <param>
          <type>float</type>
          <declname>totaltime</declname>
        </param>
        <param>
          <type>float</type>
          <declname>hddt</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>Ux</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>Uo</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>Un</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="448" column="10" declfile="src/GridManip.cu" declline="448" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1aaae11994614eb607faca714261a7a90b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void InterpstepCPU&lt; float, float &gt;</definition>
        <argsstring>(int nx, int ny, int hdstep, float totaltime, float hddt, float *&amp;Ux, float *Uo, float *Un)</argsstring>
        <name>InterpstepCPU&lt; float, float &gt;</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>int</type>
          <declname>hdstep</declname>
        </param>
        <param>
          <type>float</type>
          <declname>totaltime</declname>
        </param>
        <param>
          <type>float</type>
          <declname>hddt</declname>
        </param>
        <param>
          <type>float *&amp;</type>
          <declname>Ux</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>Uo</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>Un</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="449" column="10" declfile="src/GridManip.cu" declline="449" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1a2dac09cd3db0009c5e2232a6101fc745" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void InterpstepCPU&lt; double, float &gt;</definition>
        <argsstring>(int nx, int ny, int hdstep, float totaltime, float hddt, double *&amp;Ux, double *Uo, double *Un)</argsstring>
        <name>InterpstepCPU&lt; double, float &gt;</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>int</type>
          <declname>hdstep</declname>
        </param>
        <param>
          <type>float</type>
          <declname>totaltime</declname>
        </param>
        <param>
          <type>float</type>
          <declname>hddt</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>Ux</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>Uo</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>Un</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="450" column="10" declfile="src/GridManip.cu" declline="450" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1ae59509f989aae400a8399fa19f7cc0b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void InterpstepCPU&lt; int, double &gt;</definition>
        <argsstring>(int nx, int ny, int hdstep, double totaltime, double hddt, int *&amp;Ux, int *Uo, int *Un)</argsstring>
        <name>InterpstepCPU&lt; int, double &gt;</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>int</type>
          <declname>hdstep</declname>
        </param>
        <param>
          <type>double</type>
          <declname>totaltime</declname>
        </param>
        <param>
          <type>double</type>
          <declname>hddt</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>Ux</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>Uo</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>Un</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="451" column="10" declfile="src/GridManip.cu" declline="451" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1a04d05e14653fded15c21215c9d70819f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void InterpstepCPU&lt; float, double &gt;</definition>
        <argsstring>(int nx, int ny, int hdstep, double totaltime, double hddt, float *&amp;Ux, float *Uo, float *Un)</argsstring>
        <name>InterpstepCPU&lt; float, double &gt;</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>int</type>
          <declname>hdstep</declname>
        </param>
        <param>
          <type>double</type>
          <declname>totaltime</declname>
        </param>
        <param>
          <type>double</type>
          <declname>hddt</declname>
        </param>
        <param>
          <type>float *&amp;</type>
          <declname>Ux</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>Uo</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>Un</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="452" column="10" declfile="src/GridManip.cu" declline="452" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1a023f8b0a1c8bfd5949d1383da480b437" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void InterpstepCPU&lt; double, double &gt;</definition>
        <argsstring>(int nx, int ny, int hdstep, double totaltime, double hddt, double *&amp;Ux, double *Uo, double *Un)</argsstring>
        <name>InterpstepCPU&lt; double, double &gt;</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>int</type>
          <declname>hdstep</declname>
        </param>
        <param>
          <type>double</type>
          <declname>totaltime</declname>
        </param>
        <param>
          <type>double</type>
          <declname>hddt</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>Ux</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>Uo</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>Un</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="453" column="10" declfile="src/GridManip.cu" declline="453" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1aa7ab41e494c64dd0a64e7e3305406d5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>__global__ void</type>
        <definition>__global__ void InterpstepGPU</definition>
        <argsstring>(int nx, int ny, T totaltime, T beforetime, T aftertime, T *Ux, T *Uo, T *Un)</argsstring>
        <name>InterpstepGPU</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>T</type>
          <declname>totaltime</declname>
        </param>
        <param>
          <type>T</type>
          <declname>beforetime</declname>
        </param>
        <param>
          <type>T</type>
          <declname>aftertime</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>Ux</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>Uo</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>Un</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Ums[tx]</para>
<para>Ums[tx]</para>
        </inbodydescription>
        <location file="src/GridManip.cu" line="456" column="29" bodyfile="src/GridManip.cu" bodystart="456" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1a303ce4ab14cd9767ceaad23960df5e4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template __global__ void</type>
        <definition>template __global__ void InterpstepGPU&lt; float &gt;</definition>
        <argsstring>(int nx, int ny, float totaltime, float beforetime, float aftertime, float *Ux, float *Uo, float *Un)</argsstring>
        <name>InterpstepGPU&lt; float &gt;</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>float</type>
          <declname>totaltime</declname>
        </param>
        <param>
          <type>float</type>
          <declname>beforetime</declname>
        </param>
        <param>
          <type>float</type>
          <declname>aftertime</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>Ux</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>Uo</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>Un</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="478" column="21" declfile="src/GridManip.cu" declline="478" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1a00f850ccca97b85a220bb85993bcb6f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template __global__ void</type>
        <definition>template __global__ void InterpstepGPU&lt; double &gt;</definition>
        <argsstring>(int nx, int ny, double totaltime, double beforetime, double aftertime, double *Ux, double *Uo, double *Un)</argsstring>
        <name>InterpstepGPU&lt; double &gt;</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>double</type>
          <declname>totaltime</declname>
        </param>
        <param>
          <type>double</type>
          <declname>beforetime</declname>
        </param>
        <param>
          <type>double</type>
          <declname>aftertime</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>Ux</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>Uo</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>Un</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="479" column="21" declfile="src/GridManip.cu" declline="479" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1a152ff9652c67512fa8d890a539ffc4ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Copy2CartCPU</definition>
        <argsstring>(int nx, int ny, T *dest, T *src)</argsstring>
        <name>Copy2CartCPU</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="483" column="18" bodyfile="src/GridManip.cu" bodystart="483" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1ac999f982b339b3045e912eeac4e287e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void Copy2CartCPU&lt; int &gt;</definition>
        <argsstring>(int nx, int ny, int *dest, int *src)</argsstring>
        <name>Copy2CartCPU&lt; int &gt;</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="493" column="10" declfile="src/GridManip.cu" declline="493" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1ac51f55e5e2f0af7df3940c47db8489f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void Copy2CartCPU&lt; bool &gt;</definition>
        <argsstring>(int nx, int ny, bool *dest, bool *src)</argsstring>
        <name>Copy2CartCPU&lt; bool &gt;</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="494" column="10" declfile="src/GridManip.cu" declline="494" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1a9df51c3a35aa64ca463a29bd3503eb12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void Copy2CartCPU&lt; float &gt;</definition>
        <argsstring>(int nx, int ny, float *dest, float *src)</argsstring>
        <name>Copy2CartCPU&lt; float &gt;</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="495" column="10" declfile="src/GridManip.cu" declline="495" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="GridManip_8cu_1ae49d36f64bd6ad0e2ca7ca8d88d19692" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void Copy2CartCPU&lt; double &gt;</definition>
        <argsstring>(int nx, int ny, double *dest, double *src)</argsstring>
        <name>Copy2CartCPU&lt; double &gt;</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GridManip.cu" line="496" column="10" declfile="src/GridManip.cu" declline="496" declcolumn="10"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//Copyright<sp/>(C)<sp/>2018<sp/>Bosserelle<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>code<sp/>contains<sp/>an<sp/>adaptation<sp/>of<sp/>the<sp/>St<sp/>Venant<sp/>equation<sp/>from<sp/>Basilisk<sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://basilisk.fr/src/saint-venant.h<sp/>and<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>S.<sp/>Popinet.<sp/>Quadtree-adaptive<sp/>tsunami<sp/>modelling.<sp/>Ocean<sp/>Dynamics,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>doi:<sp/>61(9)<sp/>:<sp/>1261<sp/>-<sp/>1285,<sp/>2011<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//This<sp/>program<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//the<sp/>Free<sp/>Software<sp/>Foundation.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//along<sp/>with<sp/>this<sp/>program.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GridManip.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>F&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InitArrayBUQ(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;F&gt;</ref><sp/>XBlock,<sp/><sp/>T<sp/>initval,<sp/>T*&amp;<sp/>Arr)</highlight></codeline>
<codeline lineno="30"><highlight class="normal">{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib,<sp/>n;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>0;<sp/>ibl<sp/>&lt;<sp/>XParam.nblk;<sp/>ibl++)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ib<sp/>=<sp/>XBlock.active[ibl];</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>XParam.blkwidth;<sp/>j++)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>XParam.blkwidth;<sp/>i++)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//n<sp/>=<sp/>(i<sp/>+<sp/>XParam.halowidth)<sp/>+<sp/>(j<sp/>+<sp/>XParam.halowidth)<sp/>*<sp/>XParam.blkmemwidth<sp/>+<sp/>ib<sp/>*<sp/>XParam.blksize;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>memloc(XParam,<sp/>i,<sp/>j,<sp/>ib);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Arr[n]<sp/>=<sp/>initval;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InitArrayBUQ&lt;float,float&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;float&gt;</ref><sp/>XBlock,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>initval,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*&amp;<sp/>Arr);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InitArrayBUQ&lt;double,<sp/>float&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;float&gt;</ref><sp/>XBlock,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>initval,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*&amp;<sp/>Arr);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InitArrayBUQ&lt;int,<sp/>float&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;float&gt;</ref><sp/>XBlock,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>initval,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*&amp;<sp/>Arr);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InitArrayBUQ&lt;bool,<sp/>float&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;float&gt;</ref><sp/>XBlock,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>initval,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*&amp;<sp/>Arr);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InitArrayBUQ&lt;float,<sp/>double&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;double&gt;</ref><sp/>XBlock,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>initval,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*&amp;<sp/>Arr);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InitArrayBUQ&lt;double,<sp/>double&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;double&gt;</ref><sp/>XBlock,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>initval,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*&amp;<sp/>Arr);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InitArrayBUQ&lt;int,<sp/>double&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;double&gt;</ref><sp/>XBlock,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>initval,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*&amp;<sp/>Arr);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InitArrayBUQ&lt;bool,<sp/>double&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;double&gt;</ref><sp/>XBlock,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>initval,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*&amp;<sp/>Arr);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>F&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InitBlkBUQ(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;F&gt;</ref><sp/>XBlock,<sp/>T<sp/>initval,<sp/>T*&amp;<sp/>Arr)</highlight></codeline>
<codeline lineno="61"><highlight class="normal">{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>0;<sp/>ibl<sp/>&lt;<sp/>XParam.nblk;<sp/>ibl++)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ib<sp/>=<sp/>XBlock.active[ibl];</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Arr[ib]<sp/>=<sp/>initval;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InitBlkBUQ&lt;bool,<sp/>float&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;float&gt;</ref><sp/>XBlock,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>initval,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*&amp;<sp/>Arr);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InitBlkBUQ&lt;int,<sp/>float&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;float&gt;</ref><sp/>XBlock,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>initval,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*&amp;<sp/>Arr);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InitBlkBUQ&lt;float,<sp/>float&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;float&gt;</ref><sp/>XBlock,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>initval,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*&amp;<sp/>Arr);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InitBlkBUQ&lt;double,<sp/>float&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;float&gt;</ref><sp/>XBlock,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>initval,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*&amp;<sp/>Arr);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InitBlkBUQ&lt;bool,<sp/>double&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;double&gt;</ref><sp/>XBlock,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>initval,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*&amp;<sp/>Arr);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InitBlkBUQ&lt;int,<sp/>double&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;double&gt;</ref><sp/>XBlock,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>initval,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*&amp;<sp/>Arr);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InitBlkBUQ&lt;float,<sp/>double&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;double&gt;</ref><sp/>XBlock,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>initval,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*&amp;<sp/>Arr);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InitBlkBUQ&lt;double,<sp/>double&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;double&gt;</ref><sp/>XBlock,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>initval,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*&amp;<sp/>Arr);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>F&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CopyArrayBUQ(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<ref refid="structBlockP" kindref="compound">BlockP&lt;F&gt;</ref><sp/>XBlock,<sp/>T*<sp/>source,<sp/>T*<sp/>&amp;<sp/>dest)</highlight></codeline>
<codeline lineno="85"><highlight class="normal">{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib,n;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>0;<sp/>ibl<sp/>&lt;<sp/>XParam.nblk;<sp/>ibl++)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ib<sp/>=<sp/>XBlock.active[ibl];</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>XParam.blkwidth;<sp/>j++)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>XParam.blkwidth;<sp/>i++)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>(i<sp/>+<sp/>XParam.halowidth)<sp/>+<sp/>(j<sp/>+<sp/>XParam.halowidth)<sp/>*<sp/>XParam.blkmemwidth<sp/>+<sp/>ib<sp/>*<sp/>XParam.blksize;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest[n]<sp/>=<sp/>source[n];</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CopyArrayBUQ&lt;bool,<sp/>float&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;float&gt;</ref><sp/>XBlock,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>source,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*&amp;<sp/>dest);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CopyArrayBUQ&lt;int,<sp/>float&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;float&gt;</ref><sp/>XBlock,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>source,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*&amp;<sp/>dest);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CopyArrayBUQ&lt;float,<sp/>float&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;float&gt;</ref><sp/>XBlock,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>source,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*&amp;<sp/>dest);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CopyArrayBUQ&lt;double,<sp/>float&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;float&gt;</ref><sp/>XBlock,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>source,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*&amp;<sp/>dest);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CopyArrayBUQ&lt;bool,<sp/>double&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;double&gt;</ref><sp/>XBlock,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>source,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*&amp;<sp/>dest);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CopyArrayBUQ&lt;int,<sp/>double&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;double&gt;</ref><sp/>XBlock,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>source,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*&amp;<sp/>dest);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CopyArrayBUQ&lt;float,<sp/>double&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;double&gt;</ref><sp/>XBlock,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>source,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*&amp;<sp/>dest);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CopyArrayBUQ&lt;double,<sp/>double&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;double&gt;</ref><sp/>XBlock,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>source,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*&amp;<sp/>dest);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CopyArrayBUQ(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;T&gt;</ref><sp/>XBlock,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;T&gt;</ref><sp/>source,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;T&gt;</ref>&amp;<sp/>dest)</highlight></codeline>
<codeline lineno="115"><highlight class="normal">{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>CopyArrayBUQ(XParam,<sp/>XBlock,<sp/>source.h,<sp/>dest.h);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>CopyArrayBUQ(XParam,<sp/>XBlock,<sp/>source.u,<sp/>dest.u);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>CopyArrayBUQ(XParam,<sp/>XBlock,<sp/>source.v,<sp/>dest.v);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>CopyArrayBUQ(XParam,<sp/>XBlock,<sp/>source.zs,<sp/>dest.zs);</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CopyArrayBUQ&lt;float&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;float&gt;</ref><sp/>XBlock,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;float&gt;</ref><sp/>source,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;float&gt;</ref>&amp;<sp/>dest);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CopyArrayBUQ&lt;double&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;double&gt;</ref><sp/>XBlock,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;double&gt;</ref><sp/>source,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;double&gt;</ref>&amp;<sp/>dest);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CopyArrayBUQ(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;T&gt;</ref><sp/>XBlock,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;T&gt;</ref><sp/>source,<sp/><ref refid="structEvolvingP__M" kindref="compound">EvolvingP_M&lt;T&gt;</ref>&amp;<sp/>dest)</highlight></codeline>
<codeline lineno="125"><highlight class="normal">{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>CopyArrayBUQ(XParam,<sp/>XBlock,<sp/>source.h,<sp/>dest.h);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>CopyArrayBUQ(XParam,<sp/>XBlock,<sp/>source.u,<sp/>dest.u);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>CopyArrayBUQ(XParam,<sp/>XBlock,<sp/>source.v,<sp/>dest.v);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>CopyArrayBUQ(XParam,<sp/>XBlock,<sp/>source.zs,<sp/>dest.zs);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>U<sp/>and<sp/>hU:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib,<sp/>n;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>0;<sp/>ibl<sp/>&lt;<sp/>XParam.nblk;<sp/>ibl++)</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ib<sp/>=<sp/>XBlock.active[ibl];</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>XParam.blkwidth;<sp/>j++)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>XParam.blkwidth;<sp/>i++)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>(i<sp/>+<sp/>XParam.halowidth)<sp/>+<sp/>(j<sp/>+<sp/>XParam.halowidth)<sp/>*<sp/>XParam.blkmemwidth<sp/>+<sp/>ib<sp/>*<sp/>XParam.blksize;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest.U[n]<sp/>=<sp/>sqrt((source.u[n]*source.u[n])<sp/>+<sp/>(source.v[n]*source.v[n]));</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest.hU[n]<sp/>=<sp/>source.h[n]<sp/>*<sp/>dest.U[n];</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CopyArrayBUQ&lt;float&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;float&gt;</ref><sp/>XBlock,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;float&gt;</ref><sp/>source,<sp/><ref refid="structEvolvingP__M" kindref="compound">EvolvingP_M&lt;float&gt;</ref>&amp;<sp/>dest);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CopyArrayBUQ&lt;double&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;double&gt;</ref><sp/>XBlock,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;double&gt;</ref><sp/>source,<sp/><ref refid="structEvolvingP__M" kindref="compound">EvolvingP_M&lt;double&gt;</ref>&amp;<sp/>dest);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setedges(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;T&gt;</ref><sp/>XBlock,<sp/>T<sp/>*&amp;zb)</highlight></codeline>
<codeline lineno="153"><highlight class="normal">{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>template<sp/>&lt;class<sp/>T&gt;<sp/>void<sp/>setedges(int<sp/>nblk,<sp/>int<sp/>nx,<sp/>int<sp/>ny,<sp/>double<sp/>xo,<sp/>double<sp/>yo,<sp/>double<sp/>dx,<sp/>int<sp/>*<sp/>leftblk,<sp/>int<sp/>*rightblk,<sp/>int<sp/>*<sp/>topblk,<sp/>int*<sp/>botblk,<sp/>double<sp/>*blockxo,<sp/>double<sp/>*<sp/>blockyo,<sp/>T<sp/>*&amp;zb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>here<sp/>the<sp/>bathy<sp/>of<sp/>the<sp/>outter<sp/>most<sp/>cells<sp/>of<sp/>the<sp/>domain<sp/>are<sp/>&quot;set&quot;<sp/>to<sp/>the<sp/>same<sp/>value<sp/>as<sp/>the<sp/>second<sp/>outter<sp/>most.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>also<sp/>applies<sp/>to<sp/>the<sp/>blocks<sp/>with<sp/>no<sp/>neighbour</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bl<sp/>=<sp/>0;<sp/>bl<sp/>&lt;<sp/>XParam.nblk;<sp/>bl++)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>XBlock.active[bl];</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>check<sp/>each<sp/>corner<sp/>of<sp/>each<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;bl=%i\t<sp/>ib=%i\t,LB=%i\t,LT=%i\t,RB=%i\t,RT=%i\t,TL=%i\t,TR=%i\t,BL=%i\t,BR=%i\n<sp/>&quot;,<sp/>bl,<sp/>ib,<sp/>XBlock.LeftBot[ib],<sp/>XBlock.LeftTop[ib],<sp/>XBlock.RightBot[ib],<sp/>XBlock.RightTop[ib],<sp/>XBlock.TopLeft[ib],<sp/>XBlock.TopRight[ib],<sp/>XBlock.BotLeft[ib],<sp/>XBlock.BotRight[ib]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setedgessideLR(XParam,<sp/>ib,<sp/>XBlock.LeftBot[ib],<sp/>XBlock.LeftTop[ib],<sp/>1,<sp/>0,<sp/>zb);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setedgessideLR(XParam,<sp/>ib,<sp/>XBlock.RightBot[ib],<sp/>XBlock.RightTop[ib],<sp/>XParam.blkwidth<sp/>-<sp/>2,<sp/>XParam.blkwidth<sp/>-<sp/>1,<sp/>zb);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Top</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setedgessideBT(XParam,<sp/>ib,<sp/>XBlock.TopLeft[ib],<sp/>XBlock.TopRight[ib],<sp/>XParam.blkwidth<sp/>-<sp/>2,<sp/>XParam.blkwidth<sp/>-<sp/>1,<sp/>zb);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Bot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setedgessideBT(XParam,<sp/>ib,<sp/>XBlock.BotLeft[ib],<sp/>XBlock.BotRight[ib],<sp/>1,<sp/>0,<sp/>zb);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setedges&lt;float&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;float&gt;</ref><sp/>XBlock,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*&amp;<sp/>zb);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setedges&lt;double&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;double&gt;</ref><sp/>XBlock,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*&amp;<sp/>zb);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setedgessideLR(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blkA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blkB,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iread,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iwrite,<sp/>T*&amp;<sp/>zb)</highlight></codeline>
<codeline lineno="183"><highlight class="normal">{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blkA<sp/>==<sp/>ib<sp/>||<sp/>blkA<sp/>==<sp/>ib)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>k;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jstart,<sp/>jend;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jstart<sp/>=<sp/>(blkA<sp/>==<sp/>ib)<sp/>?<sp/>0<sp/>:<sp/>XParam.blkwidth<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jend<sp/>=<sp/>(blkB<sp/>==<sp/>ib)<sp/>?<sp/>XParam.blkwidth<sp/>:<sp/>XParam.blkwidth<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>jstart;<sp/>j<sp/>&lt;<sp/>jend;<sp/>j++)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>value<sp/>at<sp/>n<sp/>and<sp/>write<sp/>at<sp/>k</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>(iread<sp/>+<sp/>XParam.halowidth)<sp/>+<sp/>(j<sp/>+<sp/>XParam.halowidth)<sp/>*<sp/>XParam.blkmemwidth<sp/>+<sp/>ib<sp/>*<sp/>XParam.blksize;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>(iwrite<sp/>+<sp/>XParam.halowidth)<sp/>+<sp/>(j<sp/>+<sp/>XParam.halowidth)<sp/>*<sp/>XParam.blkmemwidth<sp/>+<sp/>ib<sp/>*<sp/>XParam.blksize;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zb[k]<sp/>=<sp/>zb[n];</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setedgessideBT(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blkA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blkB,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jread,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jwrite,<sp/>T*&amp;<sp/>zb)</highlight></codeline>
<codeline lineno="203"><highlight class="normal">{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blkA<sp/>==<sp/>ib<sp/>||<sp/>blkB<sp/>==<sp/>ib)</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>k;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>istart,<sp/>iend;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>istart<sp/>=<sp/>(blkA<sp/>==<sp/>ib)<sp/>?<sp/>0<sp/>:<sp/>XParam.blkwidth<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iend<sp/>=<sp/>(blkB<sp/>==<sp/>ib)<sp/>?<sp/>XParam.blkwidth<sp/>:<sp/>XParam.blkwidth<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>istart;<sp/>i<sp/>&lt;<sp/>iend;<sp/>i++)</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>value<sp/>at<sp/>n<sp/>and<sp/>write<sp/>at<sp/>k</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>(i<sp/>+<sp/>XParam.halowidth)<sp/>+<sp/>(jread<sp/>+<sp/>XParam.halowidth)<sp/>*<sp/>XParam.blkmemwidth<sp/>+<sp/>ib<sp/>*<sp/>XParam.blksize;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>(i<sp/>+<sp/>XParam.halowidth)<sp/>+<sp/>(jwrite<sp/>+<sp/>XParam.halowidth)<sp/>*<sp/>XParam.blkmemwidth<sp/>+<sp/>ib<sp/>*<sp/>XParam.blksize;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zb[k]<sp/>=<sp/>zb[n];</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>F&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>interp2BUQ(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;T&gt;</ref><sp/>XBlock,<sp/>F<sp/>forcing,<sp/>T*&amp;<sp/>z)</highlight></codeline>
<codeline lineno="224"><highlight class="normal">{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>interpolates<sp/>the<sp/>values<sp/>in<sp/>bathy<sp/>maps<sp/>or<sp/>roughness<sp/>map<sp/>to<sp/>cf<sp/>using<sp/>a<sp/>bilinear<sp/>interpolation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>0;<sp/>ibl<sp/>&lt;<sp/>XParam.nblk;<sp/>ibl++)</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;bl=%d\tblockxo[bl]=%f\tblockyo[bl]=%f\n&quot;,<sp/>bl,<sp/>blockxo[bl],<sp/>blockyo[bl]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>XBlock.active[ibl];</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>blkdx<sp/>=<sp/>calcres(XParam.dx,<sp/>XBlock.level[ib]);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>XParam.blkwidth;<sp/>j++)</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>XParam.blkwidth;<sp/>i++)</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>(i+XParam.halowidth)<sp/>+<sp/>(j+XParam.halowidth)<sp/>*<sp/>XParam.blkmemwidth<sp/>+<sp/>ib<sp/>*<sp/>XParam.blksize;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>T(XParam.xo<sp/>+<sp/>XBlock.xo[ib]<sp/>+<sp/>i<sp/>*<sp/>blkdx);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>T(XParam.yo<sp/>+<sp/>XBlock.yo[ib]<sp/>+<sp/>j<sp/>*<sp/>blkdx);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z[n]<sp/>=<sp/>interp2BUQ(x,<sp/>y,<sp/>T(blkdx),<sp/>forcing);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>interp2BUQ&lt;float,<sp/>StaticForcingP&lt;float&gt;&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;float&gt;</ref><sp/>XBlock,<sp/><ref refid="structStaticForcingP" kindref="compound">StaticForcingP&lt;float&gt;</ref><sp/>forcing,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*&amp;<sp/>z);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>interp2BUQ&lt;double,<sp/>StaticForcingP&lt;float&gt;&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;double&gt;</ref><sp/>XBlock,<sp/><ref refid="structStaticForcingP" kindref="compound">StaticForcingP&lt;float&gt;</ref><sp/>forcing,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*&amp;<sp/>z);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment">//template<sp/>void<sp/>interp2BUQ&lt;float,<sp/>StaticForcingP&lt;float&gt;&gt;(Param<sp/>XParam,<sp/>BlockP&lt;float&gt;<sp/>XBlock,<sp/>std::vector&lt;StaticForcingP&lt;float&gt;&gt;<sp/>forcing,<sp/>float*&amp;<sp/>z);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment">//template<sp/>void<sp/>interp2BUQ&lt;double,<sp/>StaticForcingP&lt;float&gt;&gt;(Param<sp/>XParam,<sp/>BlockP&lt;double&gt;<sp/>XBlock,<sp/>StaticForcingP&lt;float&gt;<sp/>forcing,<sp/>double*&amp;<sp/>z);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>interp2BUQ&lt;float,<sp/>deformmap&lt;float&gt;&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;float&gt;</ref><sp/>XBlock,<sp/><ref refid="classdeformmap" kindref="compound">deformmap&lt;float&gt;</ref><sp/>forcing,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*&amp;<sp/>z);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>interp2BUQ&lt;double,<sp/>deformmap&lt;float&gt;&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;double&gt;</ref><sp/>XBlock,<sp/><ref refid="classdeformmap" kindref="compound">deformmap&lt;float&gt;</ref><sp/>forcing,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*&amp;<sp/>z);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>interp2BUQ&lt;float,<sp/>DynForcingP&lt;float&gt;&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;float&gt;</ref><sp/>XBlock,<sp/><ref refid="structDynForcingP" kindref="compound">DynForcingP&lt;float&gt;</ref><sp/>forcing,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*&amp;<sp/>z);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>interp2BUQ&lt;double,<sp/>DynForcingP&lt;float&gt;&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;double&gt;</ref><sp/>XBlock,<sp/><ref refid="structDynForcingP" kindref="compound">DynForcingP&lt;float&gt;</ref><sp/>forcing,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*&amp;<sp/>z);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>interp2BUQ(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;T&gt;</ref><sp/>XBlock,<sp/>std::vector&lt;<ref refid="structStaticForcingP" kindref="compound">StaticForcingP&lt;float&gt;</ref>&gt;<sp/>forcing,<sp/>T*<sp/>z)</highlight></codeline>
<codeline lineno="260"><highlight class="normal">{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>interpolates<sp/>the<sp/>values<sp/>in<sp/>bathy<sp/>maps<sp/>or<sp/>roughness<sp/>map<sp/>to<sp/>cf<sp/>using<sp/>a<sp/>bilinear<sp/>interpolation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>0;<sp/>ibl<sp/>&lt;<sp/>XParam.nblk;<sp/>ibl++)</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;bl=%d\tblockxo[bl]=%f\tblockyo[bl]=%f\n&quot;,<sp/>bl,<sp/>blockxo[bl],<sp/>blockyo[bl]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>XBlock.active[ibl];</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>blkdx<sp/>=<sp/>calcres(XParam.dx,<sp/>XBlock.level[ib]);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>XParam.blkwidth;<sp/>j++)</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>XParam.blkwidth;<sp/>i++)</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>(i<sp/>+<sp/>XParam.halowidth)<sp/>+<sp/>(j<sp/>+<sp/>XParam.halowidth)<sp/>*<sp/>XParam.blkmemwidth<sp/>+<sp/>ib<sp/>*<sp/>XParam.blksize;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>T(XParam.xo<sp/>+<sp/>XBlock.xo[ib]<sp/>+<sp/>i<sp/>*<sp/>blkdx);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>T(XParam.yo<sp/>+<sp/>XBlock.yo[ib]<sp/>+<sp/>j<sp/>*<sp/>blkdx);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Interpolate<sp/>to<sp/>fill<sp/>in<sp/>values<sp/>from<sp/>the<sp/>whole<sp/>domain<sp/>(even<sp/>if<sp/>the<sp/>domain<sp/>outspan<sp/>the<sp/>domain<sp/>fo<sp/>the<sp/>bathy)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z[n]<sp/>=<sp/>interp2BUQ(x,<sp/>y,<sp/>T(blkdx),<sp/>forcing[0]);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>interpolat<sp/>to<sp/>other<sp/>grids</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(forcing.size()<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nf<sp/>=<sp/>1;<sp/>nf<sp/>&lt;<sp/>forcing.size();<sp/>nf++)</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;=<sp/>forcing[nf].xo<sp/>&amp;&amp;<sp/>x<sp/>&lt;=<sp/>forcing[nf].xmax<sp/>&amp;&amp;<sp/>y<sp/>&gt;=<sp/>forcing[nf].yo<sp/>&amp;&amp;<sp/>y<sp/>&lt;=<sp/>forcing[nf].ymax)</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>interpval=<sp/>interp2BUQ(x,<sp/>y,<sp/>T(blkdx),<sp/>forcing[nf]);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(isnan(interpval))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>log(&quot;NAN<sp/>detected&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isnan(interpval))</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z[n]<sp/>=<sp/>interp2BUQ(x,<sp/>y,<sp/>T(blkdx),<sp/>forcing[nf]);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>z[n]<sp/>=<sp/>-999.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>log(&quot;NAN<sp/>detected:<sp/>Z=&quot;+std::to_string(z[n]));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>interp2BUQ&lt;float&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;float&gt;</ref><sp/>XBlock,<sp/>std::vector&lt;<ref refid="structStaticForcingP" kindref="compound">StaticForcingP&lt;float&gt;</ref>&gt;<sp/>forcing,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>z);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>interp2BUQ&lt;double&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;double&gt;</ref><sp/>XBlock,<sp/>std::vector&lt;<ref refid="structStaticForcingP" kindref="compound">StaticForcingP&lt;float&gt;</ref>&gt;<sp/>forcing,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>z);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>F&gt;<sp/>T<sp/>interp2BUQ(T<sp/>x,<sp/>T<sp/>y,<sp/>T<sp/>dx,<sp/>F<sp/>forcing)</highlight></codeline>
<codeline lineno="323"><highlight class="normal">{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>z;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dx<sp/>&lt;=<sp/>T(forcing.dx))<sp/></highlight><highlight class="comment">//<sp/>bilinear<sp/>interpolation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>interp2BUQ(x,<sp/>y,<sp/>forcing);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//blockmean<sp/>interpolation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>blockmean(x,<sp/>y,<sp/>dx,<sp/>forcing);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>z;</highlight></codeline>
<codeline lineno="334"><highlight class="normal">}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>F&gt;<sp/>T<sp/>blockmean(T<sp/>x,<sp/>T<sp/>y,T<sp/>dx,<sp/>F<sp/>forcing)</highlight></codeline>
<codeline lineno="338"><highlight class="normal">{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xmin,<sp/>xmax,<sp/>ymin,<sp/>ymax;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>z;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>imin,imax,jmin,jmax,ni,<sp/>nj,cfi,cfj;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>xmin<sp/>=<sp/>x<sp/>-<sp/>dx<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>xmax<sp/>=<sp/>x<sp/>+<sp/>dx<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>ymin<sp/>=<sp/>y<sp/>-<sp/>dx<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>ymax<sp/>=<sp/>y<sp/>+<sp/>dx<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>imin<sp/>=<sp/>max(ftoi(floor((xmin<sp/>-<sp/>forcing.xo)<sp/>/<sp/>forcing.dx)),<sp/>0);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>imax<sp/>=<sp/>min(ftoi(floor((xmax<sp/>-<sp/>forcing.xo)<sp/>/<sp/>forcing.dx)),<sp/>forcing.nx<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>jmin<sp/>=<sp/>max(ftoi(floor((ymin<sp/>-<sp/>forcing.yo)<sp/>/<sp/>forcing.dy)),<sp/>0);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>jmax<sp/>=<sp/>min(ftoi(floor((ymax<sp/>-<sp/>forcing.yo)<sp/>/<sp/>forcing.dy)),<sp/>forcing.ny<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;imin=%d;<sp/>imax=%d,<sp/>jmin=%d,<sp/>jmax=%d\t&quot;,imin,<sp/>imax,<sp/>jmin,<sp/>jmax);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>ni<sp/>=<sp/>max(imax<sp/>-<sp/>imin<sp/>+<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>nj<sp/>=<sp/>max(jmax<sp/>-<sp/>jmin<sp/>+<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;ni=%d;<sp/>nj=%d\n&quot;,<sp/>ni,<sp/>nj);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>z<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ni;<sp/>i++)</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nj;<sp/>j++)</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cfi<sp/>=<sp/>min(imin<sp/>+<sp/>i,<sp/>forcing.nx<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cfj<sp/>=<sp/>min(jmin<sp/>+<sp/>j,<sp/>forcing.ny<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>z<sp/>+<sp/>forcing.val[cfi<sp/>+<sp/>cfj<sp/>*<sp/>forcing.nx];</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>z<sp/>=<sp/>z<sp/>/<sp/>(ni<sp/>*<sp/>nj);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>z;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>F&gt;<sp/>T<sp/>interp2BUQ(T<sp/>x,<sp/>T<sp/>y,<sp/>F<sp/>forcing)</highlight></codeline>
<codeline lineno="382"><highlight class="normal">{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//this<sp/>is<sp/>safer!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xi,<sp/>yi;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>xi<sp/>=<sp/>utils::max(utils::min(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(x),<sp/>forcing.xmax),<sp/>forcing.xo);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>yi<sp/>=<sp/>utils::max(utils::min(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(y),<sp/>forcing.ymax),<sp/>forcing.yo);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cells<sp/>that<sp/>falls<sp/>off<sp/>this<sp/>domain<sp/>are<sp/>assigned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x1,<sp/>x2,<sp/>y1,<sp/>y2;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>q11,<sp/>q12,<sp/>q21,<sp/>q22;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cfi,<sp/>cfip,<sp/>cfj,<sp/>cfjp;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>cfi<sp/>=<sp/>utils::min(utils::max((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)floor((xi<sp/>-<sp/>forcing.xo)<sp/>/<sp/>forcing.dx),<sp/>0),<sp/>forcing.nx<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>cfip<sp/>=<sp/>cfi<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>forcing.xo<sp/>+<sp/>forcing.dx<sp/>*<sp/>cfi;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>x2<sp/>=<sp/>forcing.xo<sp/>+<sp/>forcing.dx<sp/>*<sp/>cfip;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>cfj<sp/>=<sp/>utils::min(utils::max((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)floor((yi<sp/>-<sp/>forcing.yo)<sp/>/<sp/>forcing.dy),<sp/>0),<sp/>forcing.ny<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>cfjp<sp/>=<sp/>cfj<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>forcing.yo<sp/>+<sp/>forcing.dy<sp/>*<sp/>cfj;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>y2<sp/>=<sp/>forcing.yo<sp/>+<sp/>forcing.dy<sp/>*<sp/>cfjp;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>q11<sp/>=<sp/>forcing.val[cfi<sp/>+<sp/>cfj<sp/>*<sp/>forcing.nx];</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>q12<sp/>=<sp/>forcing.val[cfi<sp/>+<sp/>cfjp<sp/>*<sp/>forcing.nx];</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>q21<sp/>=<sp/>forcing.val[cfip<sp/>+<sp/>cfj<sp/>*<sp/>forcing.nx];</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>q22<sp/>=<sp/>forcing.val[cfip<sp/>+<sp/>cfjp<sp/>*<sp/>forcing.nx];</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>T(BilinearInterpolation(q11,<sp/>q12,<sp/>q21,<sp/>q22,<sp/>x1,<sp/>x2,<sp/>y1,<sp/>y2,<sp/>xi,<sp/>yi));</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal">}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>interp2BUQ&lt;float,<sp/>StaticForcingP&lt;float&gt;&gt;(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y,<sp/><ref refid="structStaticForcingP" kindref="compound">StaticForcingP&lt;float&gt;</ref><sp/>forcing);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>interp2BUQ&lt;double,<sp/>StaticForcingP&lt;float&gt;&gt;(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,<sp/><ref refid="structStaticForcingP" kindref="compound">StaticForcingP&lt;float&gt;</ref><sp/>forcing);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>interp2BUQ&lt;float,<sp/>StaticForcingP&lt;int&gt;&gt;(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y,<sp/><ref refid="structStaticForcingP" kindref="compound">StaticForcingP&lt;int&gt;</ref><sp/>forcing);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>interp2BUQ&lt;double,<sp/>StaticForcingP&lt;int&gt;&gt;(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,<sp/><ref refid="structStaticForcingP" kindref="compound">StaticForcingP&lt;int&gt;</ref><sp/>forcing);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>interp2BUQ&lt;float,<sp/>deformmap&lt;float&gt;&gt;(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y,<sp/><ref refid="classdeformmap" kindref="compound">deformmap&lt;float&gt;</ref><sp/>forcing);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>interp2BUQ&lt;double,<sp/>deformmap&lt;float&gt;&gt;(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,<sp/><ref refid="classdeformmap" kindref="compound">deformmap&lt;float&gt;</ref><sp/>forcing);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>interp2BUQ&lt;float,<sp/>DynForcingP&lt;float&gt;&gt;(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y,<sp/><ref refid="structDynForcingP" kindref="compound">DynForcingP&lt;float&gt;</ref><sp/>forcing);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>interp2BUQ&lt;double,<sp/>DynForcingP&lt;float&gt;&gt;(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,<sp/><ref refid="structDynForcingP" kindref="compound">DynForcingP&lt;float&gt;</ref><sp/>forcing);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>F&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InterpstepCPU(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hdstep,<sp/>F<sp/>totaltime,<sp/>F<sp/>hddt,<sp/>T<sp/>*&amp;Ux,<sp/>T<sp/>*Uo,<sp/>T<sp/>*Un)</highlight></codeline>
<codeline lineno="428"><highlight class="normal">{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//float<sp/>fac<sp/>=<sp/>1.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>Uxo,<sp/>Uxn;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Ums[tx]=Umask[ix];*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nx;<sp/>i++)</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>ny;<sp/>j++)</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uxo<sp/>=<sp/>Uo[i<sp/>+<sp/>nx*j];</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uxn<sp/>=<sp/>Un[i<sp/>+<sp/>nx*j];</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ux[i<sp/>+<sp/>nx*j]<sp/>=<sp/>T(Uxo<sp/>+<sp/>(totaltime<sp/>-<sp/>hddt*hdstep)*(Uxn<sp/>-<sp/>Uxo)<sp/>/<sp/>hddt);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InterpstepCPU&lt;int,float&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hdstep,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>totaltime,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>hddt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*&amp;Ux,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Uo,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Un);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InterpstepCPU&lt;float,<sp/>float&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hdstep,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>totaltime,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>hddt,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*&amp;Ux,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*Uo,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*Un);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InterpstepCPU&lt;double,<sp/>float&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hdstep,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>totaltime,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>hddt,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*&amp;Ux,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*Uo,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*Un);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InterpstepCPU&lt;int,<sp/>double&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hdstep,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>totaltime,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>hddt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*&amp;<sp/>Ux,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>Uo,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>Un);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InterpstepCPU&lt;float,<sp/>double&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hdstep,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>totaltime,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>hddt,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*&amp;<sp/>Ux,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>Uo,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>Un);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InterpstepCPU&lt;double,<sp/>double&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hdstep,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>totaltime,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>hddt,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*&amp;<sp/>Ux,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>Uo,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>Un);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/>__global__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InterpstepGPU(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/>T<sp/>totaltime,<sp/>T<sp/>beforetime,<sp/>T<sp/>aftertime,<sp/>T*Ux,<sp/>T*<sp/>Uo,<sp/>T*<sp/>Un)</highlight></codeline>
<codeline lineno="457"><highlight class="normal">{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>blockIdx.x<sp/>*<sp/>blockDim.x<sp/>+<sp/>threadIdx.x;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy<sp/>=<sp/>blockIdx.y<sp/>*<sp/>blockDim.y<sp/>+<sp/>threadIdx.y;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tx<sp/>=<sp/>threadIdx.x;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ty<sp/>=<sp/>threadIdx.y;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>__shared__<sp/>T<sp/>Uxo[16][16];</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>__shared__<sp/>T<sp/>Uxn[16][16];</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>__shared__<sp/>float<sp/>Ums[16];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>hddt<sp/>=<sp/>aftertime<sp/>-<sp/>beforetime;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ix<sp/>&lt;<sp/>nx<sp/>&amp;&amp;<sp/>iy<sp/>&lt;<sp/>ny)</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uxo[tx][ty]<sp/>=<sp/>Uo[ix<sp/>+<sp/>nx<sp/>*<sp/>iy];</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uxn[tx][ty]<sp/>=<sp/>Un[ix<sp/>+<sp/>nx<sp/>*<sp/>iy];</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ux[ix<sp/>+<sp/>nx<sp/>*<sp/>iy]<sp/>=<sp/>Uxo[tx][ty]<sp/>+<sp/>(totaltime<sp/>-<sp/>beforetime)<sp/>*<sp/>(Uxn[tx][ty]<sp/>-<sp/>Uxo[tx][ty])<sp/>/<sp/>(hddt);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal">}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="comment">//template<sp/>__global__<sp/>void<sp/>InterpstepGPU&lt;int&gt;(int<sp/>nx,<sp/>int<sp/>ny,<sp/>int<sp/>hdstp,<sp/>T<sp/>totaltime,<sp/>T<sp/>hddt,<sp/>T*<sp/>Ux,<sp/>T*<sp/>Uo,<sp/>T*<sp/>Un);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>__global__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InterpstepGPU&lt;float&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>totaltime,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>beforetime,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>aftertime,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>Ux,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>Uo,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>Un);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>__global__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InterpstepGPU&lt;double&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>totaltime,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>beforetime,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>aftertime,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>Ux,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>Uo,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>Un);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Copy2CartCPU(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/>T*<sp/>dest,<sp/>T*<sp/>src)</highlight></codeline>
<codeline lineno="484"><highlight class="normal">{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nx;<sp/>i++)</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>ny;<sp/>j++)</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest[i<sp/>+<sp/>nx<sp/>*<sp/>j]<sp/>=<sp/>src[i<sp/>+<sp/>nx<sp/>*<sp/>j];</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="492"><highlight class="normal">}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Copy2CartCPU&lt;int&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>dest,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>src);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Copy2CartCPU&lt;bool&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>dest,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>src);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Copy2CartCPU&lt;float&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>dest,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>src);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Copy2CartCPU&lt;double&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>dest,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>src);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/GridManip.cu"/>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="Poly_8cu" kind="file" language="C++">
    <compoundname>Poly.cu</compoundname>
    <includes refid="Poly_8h" local="yes">Poly.h</includes>
    <incdepgraph>
      <node id="28">
        <label>Arrays.h</label>
        <link refid="Arrays_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>Boundary.h</label>
        <link refid="Boundary_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>ConserveElevation.h</label>
        <link refid="ConserveElevation_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>Forcing.h</label>
        <link refid="Forcing_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>General.h</label>
        <link refid="General_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>Gradients.h</label>
        <link refid="Gradients_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>GridManip.h</label>
        <link refid="GridManip_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>Halo.h</label>
        <link refid="Halo_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>InitEvolv.h</label>
        <link refid="InitEvolv_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>InitialConditions.h</label>
        <link refid="InitialConditions_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>Input.h</label>
        <link refid="Input_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>Kurganov.h</label>
        <link refid="Kurganov_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>MemManagement.h</label>
        <link refid="MemManagement_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>Mesh.h</label>
        <link refid="Mesh_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>Param.h</label>
        <link refid="Param_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/Poly.cu</label>
        <link refid="Poly_8cu"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Poly.h</label>
        <link refid="Poly_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>ReadForcing.h</label>
        <link refid="ReadForcing_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>ReadInput.h</label>
        <link refid="ReadInput_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>Read_netcdf.h</label>
        <link refid="Read__netcdf_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>Setup_GPU.h</label>
        <link refid="Setup__GPU_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>Spherical.h</label>
        <link refid="Spherical_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>Updateforcing.h</label>
        <link refid="Updateforcing_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>Util_CPU.h</label>
        <link refid="Util__CPU_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>Write_netcdf.h</label>
        <link refid="Write__netcdf_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>Write_txtlog.h</label>
        <link refid="Write__txtlog_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>utctime.h</label>
        <link refid="utctime_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>algorithm</label>
      </node>
      <node id="10">
        <label>chrono</label>
      </node>
      <node id="9">
        <label>cmath</label>
      </node>
      <node id="11">
        <label>ctime</label>
      </node>
      <node id="4">
        <label>cuda_runtime.h</label>
      </node>
      <node id="5">
        <label>device_launch_parameters.h</label>
      </node>
      <node id="19">
        <label>fstream</label>
      </node>
      <node id="18">
        <label>iomanip</label>
      </node>
      <node id="17">
        <label>iostream</label>
      </node>
      <node id="21">
        <label>limits</label>
      </node>
      <node id="14">
        <label>map</label>
      </node>
      <node id="8">
        <label>math.h</label>
      </node>
      <node id="15">
        <label>netcdf.h</label>
      </node>
      <node id="20">
        <label>sstream</label>
      </node>
      <node id="6">
        <label>stdio.h</label>
      </node>
      <node id="7">
        <label>stdlib.h</label>
      </node>
      <node id="12">
        <label>string</label>
      </node>
      <node id="22">
        <label>thread</label>
      </node>
      <node id="13">
        <label>vector</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="Poly_8cu_1a01ace063b76167aa01c3bf0db94bbe1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>int isLeft</definition>
        <argsstring>(T P0x, T P0y, T P1x, T P1y, T P2x, T P2y)</argsstring>
        <name>isLeft</name>
        <param>
          <type>T</type>
          <declname>P0x</declname>
        </param>
        <param>
          <type>T</type>
          <declname>P0y</declname>
        </param>
        <param>
          <type>T</type>
          <declname>P1x</declname>
        </param>
        <param>
          <type>T</type>
          <declname>P1y</declname>
        </param>
        <param>
          <type>T</type>
          <declname>P2x</declname>
        </param>
        <param>
          <type>T</type>
          <declname>P2y</declname>
        </param>
        <briefdescription>
<para>isLeft(): tests if a point is Left|On|Right of an infinite line. </para>
        </briefdescription>
        <detaileddescription>
<sect2 id="Poly_8cu_1autotoc_md15">
<title>Description</title>
</sect2>
<sect1 id="Poly_8cu_1autotoc_md16">
<title>a Point is defined by its coordinates {int x, y;}</title>
<para>isLeft(): tests if a point is Left|On|Right of an infinite line. Input: three points P0, P1, and P2 Return: &gt;0 for P2 left of the line through P0 and P1 =0 for P2 on the line &lt;0 for P2 right of the line See: Algorithm 1 &quot;Area of Triangles and Polygons&quot;</para>
<sect2 id="Poly_8cu_1autotoc_md17">
<title>Where does this come from:</title>
<para>Copyright 2000 softSurfer, 2012 Dan Sunday </para>
<sect3 id="Poly_8cu_1autotoc_md18">
<title>Original Licence</title>
<para>This code may be freely used and modified for any purpose providing that this copyright notice is included with it. SoftSurfer makes no warranty for this code, and cannot be held liable for any real or imagined damage resulting from its use. Users of this code must verify correctness for their application. Code modified to fit the use in DisperGPU </para>
</sect3>
</sect2>
</sect1>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Poly.cu" line="54" column="15" bodyfile="src/Poly.cu" bodystart="54" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="Poly_8cu_1ac33dfb106e791cf74e166cde5a52e876" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int cn_PnPoly</definition>
        <argsstring>(T Px, T Py, F *Vx, F *Vy, int n)</argsstring>
        <name>cn_PnPoly</name>
        <param>
          <type>T</type>
          <declname>Px</declname>
        </param>
        <param>
          <type>T</type>
          <declname>Py</declname>
        </param>
        <param>
          <type>F *</type>
          <declname>Vx</declname>
        </param>
        <param>
          <type>F *</type>
          <declname>Vy</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>cn_PnPoly(): crossing number test for a point in a polygon </para>
        </briefdescription>
        <detaileddescription>
<sect2 id="Poly_8cu_1autotoc_md19">
<title>Description</title>
<para>cn_PnPoly(): crossing number test for a point in a polygon Input: P = a point, V[] = vertex points of a polygon V[n+1] with V[n]=V[0] Return: 0 = outside, 1 = inside</para>
</sect2>
<sect2 id="Poly_8cu_1autotoc_md20">
<title>Where does this come from:</title>
<para>Copyright 2000 softSurfer, 2012 Dan Sunday </para>
<sect3 id="Poly_8cu_1autotoc_md21">
<title>Original Licence</title>
<para>This code may be freely used and modified for any purpose providing that this copyright notice is included with it. SoftSurfer makes no warranty for this code, and cannot be held liable for any real or imagined damage resulting from its use. Users of this code must verify correctness for their application. Code modified to fit the use in DisperGPU</para>
<para>This code is patterned after [Franklin, 2000] </para>
</sect3>
</sect2>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Poly.cu" line="82" column="19" bodyfile="src/Poly.cu" bodystart="82" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="Poly_8cu_1a26344a138da1b14b78397ad09d6b0024" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int wn_PnPoly</definition>
        <argsstring>(T Px, T Py, T *Vx, T *Vy, unsigned int n)</argsstring>
        <name>wn_PnPoly</name>
        <param>
          <type>T</type>
          <declname>Px</declname>
        </param>
        <param>
          <type>T</type>
          <declname>Py</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>Vx</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>Vy</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>winding number test for a point in a polygon </para>
        </briefdescription>
        <detaileddescription>
<sect2 id="Poly_8cu_1autotoc_md22">
<title>Description</title>
<para>wn_PnPoly(): winding number test for a point in a polygon Input: P = a point, V[] = vertex points of a polygon V[n+1] with V[n]=V[0] Return: wn = the winding number (=0 only when P is outside)</para>
</sect2>
<sect2 id="Poly_8cu_1autotoc_md23">
<title>Where does this come from:</title>
<para>Copyright 2000 softSurfer, 2012 Dan Sunday </para>
<sect3 id="Poly_8cu_1autotoc_md24">
<title>Original Licence</title>
<para>This code may be freely used and modified for any purpose providing that this copyright notice is included with it. SoftSurfer makes no warranty for this code, and cannot be held liable for any real or imagined damage resulting from its use. Users of this code must verify correctness for their application. Code modified to fit the use in DisperGPU </para>
</sect3>
</sect2>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Poly.cu" line="121" column="17" bodyfile="src/Poly.cu" bodystart="121" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="Poly_8cu_1a716f3869119a8a87911ad1f5cfada940" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int wn_PnPoly</definition>
        <argsstring>(T Px, T Py, Polygon Poly)</argsstring>
        <name>wn_PnPoly</name>
        <param>
          <type>T</type>
          <declname>Px</declname>
        </param>
        <param>
          <type>T</type>
          <declname>Py</declname>
        </param>
        <param>
          <type><ref refid="classPolygon" kindref="compound">Polygon</ref></type>
          <declname>Poly</declname>
        </param>
        <briefdescription>
<para>winding number test for a point in a polygon </para>
        </briefdescription>
        <detaileddescription>
<sect2 id="Poly_8h_1autotoc_md25">
<title>Description</title>
<para>wn_PnPoly(): winding number test for a point in a polygon Input: P = a point, V[] = vertex points of a polygon V[n+1] with V[n]=V[0] Return: wn = the winding number (=0 only when P is outside)</para>
</sect2>
<sect2 id="Poly_8h_1autotoc_md26">
<title>Where does this come from:</title>
<para>Copyright 2000 softSurfer, 2012 Dan Sunday </para>
<sect3 id="Poly_8h_1autotoc_md27">
<title>Original Licence</title>
<para>This code may be freely used and modified for any purpose providing that this copyright notice is included with it. SoftSurfer makes no warranty for this code, and cannot be held liable for any real or imagined damage resulting from its use. Users of this code must verify correctness for their application. Code modified to fit the use in DisperGPU </para>
</sect3>
</sect2>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Poly.cu" line="161" column="17" bodyfile="src/Poly.cu" bodystart="161" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="Poly_8cu_1aa75a9976acd3316389203962e3b49687" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template int</type>
        <definition>template int wn_PnPoly&lt; float &gt;</definition>
        <argsstring>(float Px, float Py, Polygon Poly)</argsstring>
        <name>wn_PnPoly&lt; float &gt;</name>
        <param>
          <type>float</type>
          <declname>Px</declname>
        </param>
        <param>
          <type>float</type>
          <declname>Py</declname>
        </param>
        <param>
          <type><ref refid="classPolygon" kindref="compound">Polygon</ref></type>
          <declname>Poly</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Poly.cu" line="180" column="10" declfile="src/Poly.cu" declline="180" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Poly_8cu_1ade4caf6d4accbbbf36963f248a3890c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template int</type>
        <definition>template int wn_PnPoly&lt; double &gt;</definition>
        <argsstring>(double Px, double Py, Polygon Poly)</argsstring>
        <name>wn_PnPoly&lt; double &gt;</name>
        <param>
          <type>double</type>
          <declname>Px</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Py</declname>
        </param>
        <param>
          <type><ref refid="classPolygon" kindref="compound">Polygon</ref></type>
          <declname>Poly</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Poly.cu" line="181" column="10" declfile="src/Poly.cu" declline="181" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Poly_8cu_1a0b6b1c685a658f30a3b9b9324116e472" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classPolygon" kindref="compound">Polygon</ref></type>
        <definition>Polygon CounterCWPoly</definition>
        <argsstring>(Polygon Poly)</argsstring>
        <name>CounterCWPoly</name>
        <param>
          <type><ref refid="classPolygon" kindref="compound">Polygon</ref></type>
          <declname>Poly</declname>
        </param>
        <briefdescription>
<para>check polygon handedness and reverse if necessary. </para>
        </briefdescription>
        <detaileddescription>
<sect2 id="Poly_8h_1autotoc_md28">
<title>Description</title>
<para>check polygon handedness and enforce left-handesness (Counter-clockwise). This function is used to ensure the right polygon handedness for the winding number inpoly (using the isleft()) </para>
</sect2>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Poly.cu" line="194" column="9" bodyfile="src/Poly.cu" bodystart="194" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="Poly_8cu_1a5a924cd959c0fd5aa4a7fb41a3b4854a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classVertex" kindref="compound">Vertex</ref></type>
        <definition>Vertex VertAdd</definition>
        <argsstring>(Vertex A, Vertex B)</argsstring>
        <name>VertAdd</name>
        <param>
          <type><ref refid="classVertex" kindref="compound">Vertex</ref></type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classVertex" kindref="compound">Vertex</ref></type>
          <declname>B</declname>
        </param>
        <briefdescription>
<para><ref refid="classVertex" kindref="compound">Vertex</ref> Add. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Poly.cu" line="232" column="8" bodyfile="src/Poly.cu" bodystart="232" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="Poly_8cu_1a8c09c4426eace301b7cafe4e29c9aa80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classVertex" kindref="compound">Vertex</ref></type>
        <definition>Vertex VertSub</definition>
        <argsstring>(Vertex A, Vertex B)</argsstring>
        <name>VertSub</name>
        <param>
          <type><ref refid="classVertex" kindref="compound">Vertex</ref></type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classVertex" kindref="compound">Vertex</ref></type>
          <declname>B</declname>
        </param>
        <briefdescription>
<para><ref refid="classVertex" kindref="compound">Vertex</ref> Substract. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Poly.cu" line="244" column="8" bodyfile="src/Poly.cu" bodystart="244" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="Poly_8cu_1a677760e0b4ff2efcf26e1e73b969409d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double dotprod</definition>
        <argsstring>(Vertex A, Vertex B)</argsstring>
        <name>dotprod</name>
        <param>
          <type><ref refid="classVertex" kindref="compound">Vertex</ref></type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classVertex" kindref="compound">Vertex</ref></type>
          <declname>B</declname>
        </param>
        <briefdescription>
<para><ref refid="classVertex" kindref="compound">Vertex</ref> dot product. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Poly.cu" line="256" column="8" bodyfile="src/Poly.cu" bodystart="256" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="Poly_8cu_1ae420a7753f03de4f5d9e926bd531e88a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double xprod</definition>
        <argsstring>(Vertex A, Vertex B)</argsstring>
        <name>xprod</name>
        <param>
          <type><ref refid="classVertex" kindref="compound">Vertex</ref></type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classVertex" kindref="compound">Vertex</ref></type>
          <declname>B</declname>
        </param>
        <briefdescription>
<para><ref refid="classVertex" kindref="compound">Vertex</ref> cross-product. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Poly.cu" line="266" column="8" bodyfile="src/Poly.cu" bodystart="266" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="Poly_8cu_1af2897c454c4a1d01e410ec44b17286d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SegmentIntersect</definition>
        <argsstring>(Polygon P, Polygon Q)</argsstring>
        <name>SegmentIntersect</name>
        <param>
          <type><ref refid="classPolygon" kindref="compound">Polygon</ref></type>
          <declname>P</declname>
        </param>
        <param>
          <type><ref refid="classPolygon" kindref="compound">Polygon</ref></type>
          <declname>Q</declname>
        </param>
        <briefdescription>
<para>Intersection between segments. </para>
        </briefdescription>
        <detaileddescription>
<sect2 id="Poly_8cu_1autotoc_md29">
<title>Description</title>
<para>Check whether 2 polygon segment intersect. <ref refid="classPolygon" kindref="compound">Polygon</ref> P and Q are only 2 vertex long each. i.e. they represent a segment each.</para>
</sect2>
<sect2 id="Poly_8cu_1autotoc_md30">
<title>Where does this come from:</title>
<para><ulink url="https://stackoverflow.com/questions/563198/how-do-you-detect-where-two-line-segments-intersect">https://stackoverflow.com/questions/563198/how-do-you-detect-where-two-line-segments-intersect</ulink> Best answer from Gareth Rees </para>
</sect2>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Poly.cu" line="284" column="6" bodyfile="src/Poly.cu" bodystart="284" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="Poly_8cu_1a5b7e685d5640969e9748c0f9c6a7c9b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool PolygonIntersect</definition>
        <argsstring>(Polygon P, Polygon Q)</argsstring>
        <name>PolygonIntersect</name>
        <param>
          <type><ref refid="classPolygon" kindref="compound">Polygon</ref></type>
          <declname>P</declname>
        </param>
        <param>
          <type><ref refid="classPolygon" kindref="compound">Polygon</ref></type>
          <declname>Q</declname>
        </param>
        <briefdescription>
<para>Intersection between 2 polygons. </para>
        </briefdescription>
        <detaileddescription>
<sect2 id="Poly_8cu_1autotoc_md31">
<title>Description</title>
<para>Check whether 2 polygons intersect. The function checks whether each segment of <ref refid="classPolygon" kindref="compound">Polygon</ref> P intersect any segment of Poly Q. if an intersect is detected theh loops are broken and true is returned. </para>
</sect2>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Poly.cu" line="361" column="6" bodyfile="src/Poly.cu" bodystart="361" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="Poly_8cu_1af9ab73ec676dff49cec8287499b88175" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool blockinpoly</definition>
        <argsstring>(T xo, T yo, T dx, int blkwidth, Polygon Poly)</argsstring>
        <name>blockinpoly</name>
        <param>
          <type>T</type>
          <declname>xo</declname>
        </param>
        <param>
          <type>T</type>
          <declname>yo</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blkwidth</declname>
        </param>
        <param>
          <type><ref refid="classPolygon" kindref="compound">Polygon</ref></type>
          <declname>Poly</declname>
        </param>
        <briefdescription>
<para>check whether a block is inside or intersectin a polygon </para>
        </briefdescription>
        <detaileddescription>
<sect2 id="Poly_8h_1autotoc_md32">
<title>Description</title>
<para>Check whether a block is inside or intersectin a polygon</para>
</sect2>
<sect2 id="Poly_8h_1autotoc_md33">
<title>Usage blockinpoly( blockxo,  blockyo,  blockdx, blkwidth, Polygon)</title>
</sect2>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Poly.cu" line="401" column="18" bodyfile="src/Poly.cu" bodystart="401" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="Poly_8cu_1ae2fd429ff0b15862aed412ed7a588c74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template bool</type>
        <definition>template bool blockinpoly&lt; float &gt;</definition>
        <argsstring>(float xo, float yo, float dx, int blkwidth, Polygon Poly)</argsstring>
        <name>blockinpoly&lt; float &gt;</name>
        <param>
          <type>float</type>
          <declname>xo</declname>
        </param>
        <param>
          <type>float</type>
          <declname>yo</declname>
        </param>
        <param>
          <type>float</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blkwidth</declname>
        </param>
        <param>
          <type><ref refid="classPolygon" kindref="compound">Polygon</ref></type>
          <declname>Poly</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Poly.cu" line="463" column="10" declfile="src/Poly.cu" declline="463" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Poly_8cu_1a6e001238d21d7804ebc3822143054639" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template bool</type>
        <definition>template bool blockinpoly&lt; double &gt;</definition>
        <argsstring>(double xo, double yo, double dx, int blkwidth, Polygon Poly)</argsstring>
        <name>blockinpoly&lt; double &gt;</name>
        <param>
          <type>double</type>
          <declname>xo</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yo</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blkwidth</declname>
        </param>
        <param>
          <type><ref refid="classPolygon" kindref="compound">Polygon</ref></type>
          <declname>Poly</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Poly.cu" line="464" column="10" declfile="src/Poly.cu" declline="464" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Poly_8cu_1acac184ce907723e79cdd14569fb8f78d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_wninpoly</definition>
        <argsstring>()</argsstring>
        <name>test_wninpoly</name>
        <briefdescription>
<para>Test winding number inpoly function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Poly.cu" line="473" column="6" bodyfile="src/Poly.cu" bodystart="473" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="Poly_8cu_1afd141ce80f4ae599f6fa49c25ff908c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_SegmentIntersect</definition>
        <argsstring>()</argsstring>
        <name>test_SegmentIntersect</name>
        <briefdescription>
<para>Test segment intersect function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Poly.cu" line="503" column="6" bodyfile="src/Poly.cu" bodystart="503" bodyend="533"/>
      </memberdef>
      <memberdef kind="function" id="Poly_8cu_1a3bfe65ae13eadc49bd2efead046f9cb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_intersectpoly</definition>
        <argsstring>()</argsstring>
        <name>test_intersectpoly</name>
        <briefdescription>
<para>Test polygon intersect function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Poly.cu" line="541" column="6" bodyfile="src/Poly.cu" bodystart="541" bodyend="590"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//Copyright<sp/>(C)<sp/>2018<sp/>Bosserelle<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>code<sp/>contains<sp/>an<sp/>adaptation<sp/>of<sp/>the<sp/>St<sp/>Venant<sp/>equation<sp/>from<sp/>Basilisk<sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://basilisk.fr/src/saint-venant.h<sp/>and<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>S.<sp/>Popinet.<sp/>Quadtree-adaptive<sp/>tsunami<sp/>modelling.<sp/>Ocean<sp/>Dynamics,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>doi:<sp/>61(9)<sp/>:<sp/>1261<sp/>-<sp/>1285,<sp/>2011<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//This<sp/>program<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//the<sp/>Free<sp/>Software<sp/>Foundation.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//along<sp/>with<sp/>this<sp/>program.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Poly.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/>T<sp/>isLeft(T<sp/>P0x,<sp/>T<sp/>P0y,<sp/>T<sp/>P1x,<sp/>T<sp/>P1y,<sp/>T<sp/>P2x,<sp/>T<sp/>P2y)</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((P1x<sp/>-<sp/>P0x)<sp/>*<sp/>(P2y<sp/>-<sp/>P0y)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>(P2x<sp/>-<sp/>P0x)<sp/>*<sp/>(P1y<sp/>-<sp/>P0y));</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//===================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>F&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cn_PnPoly(T<sp/>Px,<sp/>T<sp/>Py,<sp/>F*<sp/>Vx,<sp/>F*<sp/>Vy,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="83"><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>cn<sp/>=<sp/>0;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/><sp/>crossing<sp/>number<sp/>counter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>loop<sp/>through<sp/>all<sp/>edges<sp/>of<sp/>the<sp/>polygon</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>edge<sp/>from<sp/>V[i]<sp/><sp/>to<sp/>V[i+1]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((Vy[i]<sp/>&lt;=<sp/>Py)<sp/>&amp;&amp;<sp/>(Vy[i<sp/>+<sp/>1]<sp/>&gt;<sp/>Py))<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>an<sp/>upward<sp/>crossing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>((Vy[i]<sp/>&gt;<sp/>Py)<sp/>&amp;&amp;<sp/>(Vy[i<sp/>+<sp/>1]<sp/>&lt;=<sp/>Py)))<sp/>{<sp/></highlight><highlight class="comment">//<sp/>a<sp/>downward<sp/>crossing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/><sp/>the<sp/>actual<sp/>edge-ray<sp/>intersect<sp/>x-coordinate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>vt<sp/>=<sp/>(T)(Py<sp/>-<sp/>Vy[i])<sp/>/<sp/>(Vy[i<sp/>+<sp/>1]<sp/>-<sp/>Vy[i]);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Px<sp/>&lt;<sp/>Vx[i]<sp/>+<sp/>vt<sp/>*<sp/>(Vx[i<sp/>+<sp/>1]<sp/>-<sp/>Vx[i]))<sp/></highlight><highlight class="comment">//<sp/>P.x<sp/>&lt;<sp/>intersect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++cn;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>valid<sp/>crossing<sp/>of<sp/>y=P.y<sp/>right<sp/>of<sp/>P.x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(cn<sp/>&amp;<sp/>1);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>0<sp/>if<sp/>even<sp/>(out),<sp/>and<sp/>1<sp/>if<sp/><sp/>odd<sp/>(in)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//===================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wn_PnPoly(T<sp/>Px,<sp/>T<sp/>Py,<sp/>T*<sp/>Vx,<sp/>T*<sp/>Vy,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="122"><highlight class="normal">{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>wn<sp/>=<sp/>0;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/><sp/>winding<sp/>number<sp/>counter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>loop<sp/>through<sp/>all<sp/>edges<sp/>of<sp/>the<sp/>polygon</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>edge<sp/>from<sp/>V[i]<sp/>to<sp/><sp/>V[i+1]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Vy[i]<sp/>&lt;=<sp/>Py)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>y<sp/>&lt;=<sp/>P.y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Vy[i<sp/>+<sp/>1]<sp/>&gt;<sp/>Py)<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>an<sp/>upward<sp/>crossing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isLeft(Vx[i],<sp/>Vy[i],<sp/>Vx[i<sp/>+<sp/>1],<sp/>Vy[i<sp/>+<sp/>1],<sp/>Px,<sp/>Py)<sp/>&gt;<sp/>0)<sp/><sp/></highlight><highlight class="comment">//<sp/>P<sp/>left<sp/>of<sp/><sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++wn;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/><sp/>a<sp/>valid<sp/>up<sp/>intersect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>y<sp/>&gt;<sp/>P.y<sp/>(no<sp/>test<sp/>needed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Vy[i<sp/>+<sp/>1]<sp/>&lt;=<sp/>Py)<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>downward<sp/>crossing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isLeft(Vx[i],<sp/>Vy[i],<sp/>Vx[i<sp/>+<sp/>1],<sp/>Vy[i<sp/>+<sp/>1],<sp/>Px,<sp/>Py)<sp/>&lt;<sp/>0)<sp/><sp/></highlight><highlight class="comment">//<sp/>P<sp/>right<sp/>of<sp/><sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--wn;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/><sp/>a<sp/>valid<sp/>down<sp/>intersect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wn;</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wn_PnPoly(T<sp/>Px,<sp/>T<sp/>Py,<sp/><ref refid="classPolygon" kindref="compound">Polygon</ref><sp/>Poly)</highlight></codeline>
<codeline lineno="162"><highlight class="normal">{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>wn<sp/>=<sp/>0;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/><sp/>winding<sp/>number<sp/>counter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>loop<sp/>through<sp/>all<sp/>edges<sp/>of<sp/>the<sp/>polygon</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(Poly.vertices.size()<sp/>-<sp/>1);<sp/>i++)<sp/>{<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>edge<sp/>from<sp/>V[i]<sp/>to<sp/><sp/>V[i+1]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Poly.vertices[i].y<sp/>&lt;=<sp/>Py)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>y<sp/>&lt;=<sp/>P.y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Poly.vertices[i<sp/>+<sp/>1].y<sp/>&gt;<sp/>Py)<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>an<sp/>upward<sp/>crossing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isLeft(T(Poly.vertices[i].x),<sp/>T(Poly.vertices[i].y),<sp/>T(Poly.vertices[i<sp/>+<sp/>1].x),<sp/>T(Poly.vertices[i<sp/>+<sp/>1].y),<sp/>Px,<sp/>Py)<sp/>&gt;<sp/>0)<sp/><sp/></highlight><highlight class="comment">//<sp/>P<sp/>left<sp/>of<sp/><sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++wn;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/><sp/>a<sp/>valid<sp/>up<sp/>intersect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>y<sp/>&gt;<sp/>P.y<sp/>(no<sp/>test<sp/>needed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Poly.vertices[i<sp/>+<sp/>1].y<sp/>&lt;=<sp/>Py)<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>downward<sp/>crossing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isLeft(T(Poly.vertices[i].x),<sp/>T(Poly.vertices[i].y),<sp/>T(Poly.vertices[i<sp/>+<sp/>1].x),<sp/>T(Poly.vertices[i<sp/>+<sp/>1].y),<sp/>Px,<sp/>Py)<sp/>&lt;<sp/>0)<sp/><sp/></highlight><highlight class="comment">//<sp/>P<sp/>right<sp/>of<sp/><sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--wn;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/><sp/>a<sp/>valid<sp/>down<sp/>intersect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wn;</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wn_PnPoly&lt;float&gt;(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Px,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Py,<sp/><ref refid="classPolygon" kindref="compound">Polygon</ref><sp/>Poly);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wn_PnPoly&lt;double&gt;(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Px,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Py,<sp/><ref refid="classPolygon" kindref="compound">Polygon</ref><sp/>Poly);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="comment">//===================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><ref refid="classPolygon" kindref="compound">Polygon</ref><sp/>CounterCWPoly(<ref refid="classPolygon" kindref="compound">Polygon</ref><sp/>Poly)</highlight></codeline>
<codeline lineno="195"><highlight class="normal">{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classPolygon" kindref="compound">Polygon</ref><sp/>Rev;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(Poly.vertices.size()<sp/>-<sp/>1);<sp/>i++)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>sum<sp/>+<sp/>(Poly.vertices[i<sp/>+<sp/>1].x<sp/>-<sp/>Poly.vertices[i].x)<sp/>*<sp/>(Poly.vertices[i<sp/>+<sp/>1].y<sp/>-<sp/>Poly.vertices[i].y);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>res<sp/>=<sp/>sum<sp/>&gt;<sp/>0.0<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;ClockWise&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;CCW&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;<sp/>Polygon<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>res<sp/>);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sum&lt;0.0<sp/>-&gt;<sp/>counterclockwise<sp/>Polygon;<sp/>sum&gt;0.0<sp/>-&gt;<sp/>clockwise</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sum<sp/>&gt;<sp/>0.0)</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;<sp/>Reversing<sp/>Polygon<sp/>handedness&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>Poly.vertices.size()-1;<sp/>i<sp/>&gt;<sp/>0;<sp/>i--)</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Rev.vertices.push_back(Poly.vertices[i]);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Rev.vertices.push_back(Rev.vertices[0]);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum<sp/>&gt;<sp/>0.0<sp/>?<sp/>Rev<sp/>:<sp/>Poly;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><ref refid="classVertex" kindref="compound">Vertex</ref><sp/>VertAdd(<ref refid="classVertex" kindref="compound">Vertex</ref><sp/>A,<sp/><ref refid="classVertex" kindref="compound">Vertex</ref><sp/>B)</highlight></codeline>
<codeline lineno="233"><highlight class="normal">{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVertex" kindref="compound">Vertex</ref><sp/>v;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>v.x<sp/>=<sp/>A.x<sp/>+<sp/>B.x;<sp/></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>v.y<sp/>=<sp/>A.y<sp/>+<sp/>B.y;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><ref refid="classVertex" kindref="compound">Vertex</ref><sp/>VertSub(<ref refid="classVertex" kindref="compound">Vertex</ref><sp/>A,<sp/><ref refid="classVertex" kindref="compound">Vertex</ref><sp/>B)</highlight></codeline>
<codeline lineno="245"><highlight class="normal">{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVertex" kindref="compound">Vertex</ref><sp/>v;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>v.x<sp/>=<sp/>A.x<sp/>-<sp/>B.x;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>v.y<sp/>=<sp/>A.y<sp/>-<sp/>B.y;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dotprod(<ref refid="classVertex" kindref="compound">Vertex</ref><sp/>A,<sp/><ref refid="classVertex" kindref="compound">Vertex</ref><sp/>B)</highlight></codeline>
<codeline lineno="257"><highlight class="normal">{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/>A.x<sp/>*<sp/>B.x<sp/>+<sp/>A.x<sp/>+<sp/>B.y<sp/>+<sp/>A.y<sp/>*<sp/>B.x<sp/>+<sp/>A.y<sp/>*<sp/>B.y;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a;</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xprod(<ref refid="classVertex" kindref="compound">Vertex</ref><sp/>A,<sp/><ref refid="classVertex" kindref="compound">Vertex</ref><sp/>B)</highlight></codeline>
<codeline lineno="267"><highlight class="normal">{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/>A.x*B.y-A.y*B.x;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a;</highlight></codeline>
<codeline lineno="271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SegmentIntersect(<ref refid="classPolygon" kindref="compound">Polygon</ref><sp/>P,<sp/><ref refid="classPolygon" kindref="compound">Polygon</ref><sp/>Q)</highlight></codeline>
<codeline lineno="285"><highlight class="normal">{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVertex" kindref="compound">Vertex</ref><sp/>r,<sp/>s,<sp/>p,<sp/>q,<sp/>qmp;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rxs,<sp/>qmpxr,<sp/>eps,<sp/>t,<sp/>u;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>intersect<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>eps<sp/>=<sp/>1e-9;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>P.vertices[0];</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>q<sp/>=<sp/>Q.vertices[0];</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>VertSub(P.vertices[1],<sp/>P.vertices[0]);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>VertSub(Q.vertices[1],<sp/>Q.vertices[0]);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>qmp=<sp/>VertSub(q,<sp/>p);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>rxs<sp/>=<sp/>xprod(r,<sp/>s);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>qmpxr<sp/>=<sp/>xprod(qmp,<sp/>r);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(rxs)<sp/>&lt;=<sp/>eps<sp/>&amp;&amp;<sp/>abs(qmpxr)<sp/>&lt;=<sp/>eps)</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>colinear</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t0,<sp/>t1,<sp/>rdr,<sp/>sdr;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sdr=<sp/>dotprod(s,<sp/>r);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rdr<sp/>=<sp/>dotprod(r,<sp/>r);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t0<sp/>=<sp/>dotprod(qmp,<sp/>r)<sp/>/<sp/>rdr;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t1<sp/>=<sp/>t0<sp/>+<sp/>dotprod(s,<sp/>r)<sp/>/<sp/>rdr;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sdr<sp/>&lt;<sp/>0.0)</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intersect<sp/>=<sp/>(t0<sp/>&gt;=<sp/>0.0<sp/>&amp;&amp;<sp/>t1<sp/>&lt;=<sp/>1);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intersect<sp/>=<sp/>(t1<sp/>&gt;=<sp/>0.0<sp/>&amp;&amp;<sp/>t0<sp/>&lt;=<sp/>1);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(rxs)<sp/>&lt;=<sp/>eps<sp/>&amp;&amp;<sp/>abs(qmpxr)<sp/>&gt;<sp/>eps)</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parallele<sp/>lines<sp/>and<sp/>non<sp/>intersecting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intersect<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(rxs)<sp/>&gt;<sp/>eps)</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>xprod(qmp,<sp/>s)<sp/>/<sp/>rxs;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u<sp/>=<sp/>qmpxr<sp/>/<sp/>rxs;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>&gt;=<sp/>0.0<sp/>&amp;&amp;<sp/>t<sp/>&lt;=<sp/>1.0<sp/>&amp;&amp;<sp/>u<sp/>&lt;=<sp/>1.0<sp/>&amp;&amp;<sp/>u<sp/>&gt;=<sp/>0.0)</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intersect<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intersect<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>intersect;</highlight></codeline>
<codeline lineno="351"><highlight class="normal">}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PolygonIntersect(<ref refid="classPolygon" kindref="compound">Polygon</ref><sp/>P,<sp/><ref refid="classPolygon" kindref="compound">Polygon</ref><sp/>Q)</highlight></codeline>
<codeline lineno="362"><highlight class="normal">{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>intersect=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(P.vertices.size()<sp/>-<sp/>1);<sp/>i++)</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>(Q.vertices.size()<sp/>-<sp/>1);<sp/>j++)</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>build<sp/>segments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classPolygon" kindref="compound">Polygon</ref><sp/>Pseg,<sp/>Qseg;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pseg.vertices<sp/>=<sp/>{<sp/>P.vertices[i],<sp/>P.vertices[i<sp/>+<sp/>1]<sp/>};</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Qseg.vertices<sp/>=<sp/>{<sp/>Q.vertices[j],<sp/>Q.vertices[j<sp/>+<sp/>1]<sp/>};</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intersect<sp/>=<sp/>SegmentIntersect(Pseg,<sp/>Qseg);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(intersect)</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>(int)P.vertices.size();</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>(int)Q.vertices.size();</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>intersect;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal">}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>blockinpoly(T<sp/>xo,<sp/>T<sp/>yo,<sp/>T<sp/>dx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blkwidth,<sp/><ref refid="classPolygon" kindref="compound">Polygon</ref><sp/>Poly)</highlight></codeline>
<codeline lineno="402"><highlight class="normal">{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>insidepoly<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//bool<sp/>test<sp/>=<sp/>test_wninpoly();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;wn_inpolytest=%s\n&quot;,<sp/>test<sp/>?<sp/>&quot;true&quot;<sp/>:<sp/>&quot;false&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//test<sp/>=<sp/>test_intersectpoly();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;test_intersectpoly=%s\n&quot;,<sp/>test<sp/>?<sp/>&quot;true&quot;<sp/>:<sp/>&quot;false&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//test<sp/>=<sp/>test_SegmentIntersect();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;test_SegmentIntersect=%s\n&quot;,<sp/>test<sp/>?<sp/>&quot;true&quot;<sp/>:<sp/>&quot;false&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>check<sp/>if<sp/>it<sp/>isinmside<sp/>the<sp/>bounding<sp/>box</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>insidepoly<sp/>=<sp/>OBBdetect(xo,<sp/>xo<sp/>+<sp/>dx<sp/>*<sp/>blkwidth,<sp/>yo,<sp/>yo<sp/>+<sp/>dx<sp/>*<sp/>blkwidth,<sp/>T(Poly.xmin),<sp/>T(Poly.xmax),<sp/>T(Poly.ymin),<sp/>T(Poly.ymax));</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(insidepoly)</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;xo=%f,<sp/>yo=%f,<sp/>dx=%f,<sp/>blkwidth=%d\n&quot;,<sp/>xo,<sp/>yo,<sp/>dx,<sp/>blkwidth);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>being<sp/>in<sp/>the<sp/>bounding<sp/>box<sp/>doesn&apos;t<sp/>say<sp/>much</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>there<sp/>any<sp/>corner<sp/>of<sp/>the<sp/>block<sp/>inside<sp/>the<sp/>polygon?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wnBL,wnBR,wnTL,wnTR;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>insidepoly<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wnBL<sp/>=<sp/>wn_PnPoly(xo,<sp/>yo,<sp/>Poly);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wnBR<sp/>=<sp/>wn_PnPoly(xo<sp/>+<sp/>blkwidth*dx,<sp/>yo,<sp/>Poly);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wnTL<sp/>=<sp/>wn_PnPoly(xo,<sp/>yo<sp/>+<sp/>blkwidth<sp/>*<sp/>dx,<sp/>Poly);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wnTR<sp/>=<sp/>wn_PnPoly(xo<sp/>+<sp/>blkwidth<sp/>*<sp/>dx,<sp/>yo<sp/>+<sp/>blkwidth<sp/>*<sp/>dx,<sp/>Poly);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>insidepoly<sp/>=<sp/>(wnBL<sp/>!=<sp/>0<sp/>||<sp/>wnBR<sp/>!=<sp/>0<sp/>||<sp/>wnTL<sp/>!=<sp/>0<sp/>||<sp/>wnTR<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!insidepoly)</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>maybe<sp/>a<sp/>thin<sp/>arn<sp/>of<sp/>the<sp/>polygon<sp/>intersect<sp/>the<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classPolygon" kindref="compound">Polygon</ref><sp/>Polyblock;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classVertex" kindref="compound">Vertex</ref><sp/>vxBL,<sp/>vxBR,<sp/>vxTL,<sp/>vxTR;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vxBL.x<sp/>=<sp/>xo;<sp/>vxBL.y<sp/>=<sp/>yo;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vxBR.x<sp/>=<sp/>xo<sp/>+<sp/>blkwidth<sp/>*<sp/>dx;<sp/>vxBR.y<sp/>=<sp/>yo;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vxTL.x<sp/>=<sp/>xo;<sp/>vxTL.y<sp/>=<sp/>yo<sp/>+<sp/>blkwidth<sp/>*<sp/>dx;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vxTR.x<sp/>=<sp/>xo<sp/>+<sp/>blkwidth<sp/>*<sp/>dx;<sp/>vxTR.y<sp/>=<sp/>yo<sp/>+<sp/>blkwidth<sp/>*<sp/>dx;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Polyblock.vertices.push_back(vxBL);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Polyblock.vertices.push_back(vxBR);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Polyblock.vertices.push_back(vxTR);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Polyblock.vertices.push_back(vxTL);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Polyblock.vertices.push_back(vxBL);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>insidepoly<sp/>=<sp/>PolygonIntersect(Polyblock,<sp/>Poly);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>insidepoly;</highlight></codeline>
<codeline lineno="462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>blockinpoly&lt;float&gt;(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>xo,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>yo,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blkwidth,<sp/><ref refid="classPolygon" kindref="compound">Polygon</ref><sp/>Poly);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>blockinpoly&lt;double&gt;(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xo,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yo,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blkwidth,<sp/><ref refid="classPolygon" kindref="compound">Polygon</ref><sp/>Poly);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="comment">//template<sp/>&lt;class<sp/>T&gt;<sp/>Poly&lt;T&gt;<sp/>ReadPoly();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>test_wninpoly()</highlight></codeline>
<codeline lineno="474"><highlight class="normal">{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>in,<sp/>out;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>success<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classPolygon" kindref="compound">Polygon</ref><sp/>Polyblock;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVertex" kindref="compound">Vertex</ref><sp/>vxBL,<sp/>vxBR,<sp/>vxTL,<sp/>vxTR;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>vxBL.x<sp/>=<sp/>0.0;<sp/>vxBL.y<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>vxBR.x<sp/>=<sp/>1.0;<sp/>vxBR.y<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>vxTL.x<sp/>=<sp/>0.0;<sp/>vxTL.y<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>vxTR.x<sp/>=<sp/>1.0;<sp/>vxTR.y<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>Polyblock.vertices.push_back(vxBL);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>Polyblock.vertices.push_back(vxBR);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>Polyblock.vertices.push_back(vxTR);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>Polyblock.vertices.push_back(vxTL);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>Polyblock.vertices.push_back(vxBL);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>in<sp/>=<sp/>wn_PnPoly(0.2,<sp/>0.3,<sp/>Polyblock);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>wn_PnPoly(1.2,<sp/>0.3,<sp/>Polyblock);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>success<sp/>=<sp/>(out<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>in<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>success;</highlight></codeline>
<codeline lineno="495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>test_SegmentIntersect()</highlight></codeline>
<codeline lineno="504"><highlight class="normal">{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>in,<sp/>out,<sp/>success;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVertex" kindref="compound">Vertex</ref><sp/>a,<sp/>b,<sp/>c,<sp/>d,<sp/>e,<sp/>f;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classPolygon" kindref="compound">Polygon</ref><sp/>P,<sp/>Q,<sp/>R;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>a.x<sp/>=<sp/>-1.0;<sp/>a.y<sp/>=<sp/>-1.0;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>b.x<sp/>=<sp/>1.0;<sp/>b.y<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>c.x<sp/>=<sp/>-1.0;<sp/>c.y<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>d.x<sp/>=<sp/>1.0;<sp/>d.y<sp/>=<sp/>-1.0;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eps<sp/>=<sp/>0.0001;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>e.x<sp/>=<sp/>a.x<sp/>+<sp/>eps;<sp/>e.y<sp/>=<sp/>a.y<sp/>;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>f.x<sp/>=<sp/>b.x<sp/>+<sp/>eps;<sp/>f.y<sp/>=<sp/>b.y;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>P.vertices.push_back(a);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>P.vertices.push_back(b);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>Q.vertices.push_back(c);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>Q.vertices.push_back(d);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>R.vertices.push_back(e);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>R.vertices.push_back(f);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>in<sp/>=<sp/>SegmentIntersect(P,<sp/>Q);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>SegmentIntersect(P,<sp/>R);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>success<sp/>=<sp/>(in<sp/>&amp;&amp;<sp/>!out);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>success;</highlight></codeline>
<codeline lineno="533"><highlight class="normal">}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>test_intersectpoly()</highlight></codeline>
<codeline lineno="542"><highlight class="normal">{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>success<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>in<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>out<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classPolygon" kindref="compound">Polygon</ref><sp/>Polyblock;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classPolygon" kindref="compound">Polygon</ref><sp/>PolyTriA,<sp/>PolyTriB;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classVertex" kindref="compound">Vertex</ref><sp/>vxBL,<sp/>vxBR,<sp/>vxTL,<sp/>vxTR,<sp/>TriA,<sp/>TriB,<sp/>TriC;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>vxBL.x<sp/>=<sp/>0.0;<sp/>vxBL.y<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>vxBR.x<sp/>=<sp/>1.0;<sp/>vxBR.y<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>vxTL.x<sp/>=<sp/>0.0;<sp/>vxTL.y<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>vxTR.x<sp/>=<sp/>1.0;<sp/>vxTR.y<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>Polyblock.vertices.push_back(vxBL);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>Polyblock.vertices.push_back(vxBR);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>Polyblock.vertices.push_back(vxTR);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>Polyblock.vertices.push_back(vxTL);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>Polyblock.vertices.push_back(vxBL);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>TriA.x<sp/>=<sp/>-1.0;<sp/>TriA.y<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>TriB.x<sp/>=<sp/>-1.0;<sp/>TriB.y<sp/>=<sp/>-1.0;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>TriC.x<sp/>=<sp/>0.8;<sp/>TriC.y<sp/>=<sp/>-0.8;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>PolyTriA.vertices.push_back(TriA);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>PolyTriA.vertices.push_back(TriB);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>PolyTriA.vertices.push_back(TriC);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>PolyTriA.vertices.push_back(TriA);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>in<sp/>=<sp/>PolygonIntersect(Polyblock,<sp/>PolyTriA);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>TriA.x<sp/>=<sp/>-2.0;<sp/>TriA.y<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>TriB.x<sp/>=<sp/>-2.0;<sp/>TriB.y<sp/>=<sp/>-1.0;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>TriC.x<sp/>=<sp/>-1.8;<sp/>TriC.y<sp/>=<sp/>-0.8;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>PolyTriB.vertices.push_back(TriA);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>PolyTriB.vertices.push_back(TriB);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>PolyTriB.vertices.push_back(TriC);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>PolyTriB.vertices.push_back(TriA);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>PolygonIntersect(Polyblock,<sp/>PolyTriB);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>success<sp/>=<sp/>(in<sp/>&amp;&amp;<sp/>!out);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>success;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal">}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/Poly.cu"/>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="MemManagement_8cu" kind="file" language="C++">
    <compoundname>MemManagement.cu</compoundname>
    <includes refid="MemManagement_8h" local="yes">MemManagement.h</includes>
    <incdepgraph>
      <node id="25">
        <label>Arrays.h</label>
        <link refid="Arrays_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>Boundary.h</label>
        <link refid="Boundary_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>ConserveElevation.h</label>
        <link refid="ConserveElevation_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>Forcing.h</label>
        <link refid="Forcing_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>General.h</label>
        <link refid="General_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>Gradients.h</label>
        <link refid="Gradients_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>GridManip.h</label>
        <link refid="GridManip_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>Halo.h</label>
        <link refid="Halo_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>InitEvolv.h</label>
        <link refid="InitEvolv_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>InitialConditions.h</label>
        <link refid="InitialConditions_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>Input.h</label>
        <link refid="Input_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>Kurganov.h</label>
        <link refid="Kurganov_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/MemManagement.cu</label>
        <link refid="MemManagement_8cu"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>MemManagement.h</label>
        <link refid="MemManagement_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>Mesh.h</label>
        <link refid="Mesh_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>Param.h</label>
        <link refid="Param_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>Poly.h</label>
        <link refid="Poly_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>ReadForcing.h</label>
        <link refid="ReadForcing_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>ReadInput.h</label>
        <link refid="ReadInput_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>Read_netcdf.h</label>
        <link refid="Read__netcdf_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>Setup_GPU.h</label>
        <link refid="Setup__GPU_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>Spherical.h</label>
        <link refid="Spherical_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>Updateforcing.h</label>
        <link refid="Updateforcing_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>Util_CPU.h</label>
        <link refid="Util__CPU_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>Write_netcdf.h</label>
        <link refid="Write__netcdf_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>Write_txtlog.h</label>
        <link refid="Write__txtlog_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>utctime.h</label>
        <link refid="utctime_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>algorithm</label>
      </node>
      <node id="10">
        <label>chrono</label>
      </node>
      <node id="9">
        <label>cmath</label>
      </node>
      <node id="11">
        <label>ctime</label>
      </node>
      <node id="4">
        <label>cuda_runtime.h</label>
      </node>
      <node id="5">
        <label>device_launch_parameters.h</label>
      </node>
      <node id="19">
        <label>fstream</label>
      </node>
      <node id="18">
        <label>iomanip</label>
      </node>
      <node id="17">
        <label>iostream</label>
      </node>
      <node id="21">
        <label>limits</label>
      </node>
      <node id="14">
        <label>map</label>
      </node>
      <node id="8">
        <label>math.h</label>
      </node>
      <node id="15">
        <label>netcdf.h</label>
      </node>
      <node id="20">
        <label>sstream</label>
      </node>
      <node id="6">
        <label>stdio.h</label>
      </node>
      <node id="7">
        <label>stdlib.h</label>
      </node>
      <node id="12">
        <label>string</label>
      </node>
      <node id="22">
        <label>thread</label>
      </node>
      <node id="13">
        <label>vector</label>
      </node>
    </incdepgraph>
    <sectiondef kind="define">
      <memberdef kind="define" id="MemManagement_8cu_1a184e592fc29c13eab20979a5e4f785a3" prot="public" static="no">
        <name>MEMORY_ALIGNMENT</name>
        <initializer>4096</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="5" column="9" bodyfile="src/MemManagement.cu" bodystart="5" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="MemManagement_8cu_1a70a5b82465a54d9130ba59c31dd105e6" prot="public" static="no">
        <name>ALIGN_UP</name>
        <param><defname>x</defname></param>
        <param><defname>size</defname></param>
        <initializer>( ((size_t)x+(size-1))&amp;(~(size-1)) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="6" column="9" bodyfile="src/MemManagement.cu" bodystart="6" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="MemManagement_8cu_1ad0ad7b983948a031a40f89c1369a91bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__host__ int</type>
        <definition>__host__ int memloc</definition>
        <argsstring>(Param XParam, int i, int j, int ib)</argsstring>
        <name>memloc</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ib</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="8" column="14" bodyfile="src/MemManagement.cu" bodystart="8" bodyend="11"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1a07fddb78af39693b50b36905f15b18ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__host__ __device__ int</type>
        <definition>__host__ __device__ int memloc</definition>
        <argsstring>(int halowidth, int blkmemwidth, int i, int j, int ib)</argsstring>
        <name>memloc</name>
        <param>
          <type>int</type>
          <declname>halowidth</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blkmemwidth</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ib</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="14" column="25" bodyfile="src/MemManagement.cu" bodystart="14" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1af5b2613b6a0140cdb9295b7dd5dabc4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>__host__ void</type>
        <definition>__host__ void AllocateCPU</definition>
        <argsstring>(int nx, int ny, T *&amp;zb)</argsstring>
        <name>AllocateCPU</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>zb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="19" column="27" bodyfile="src/MemManagement.cu" bodystart="19" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1a70ae6bcde329ae664862262415cddd1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>__host__ void</type>
        <definition>__host__ void FillCPU</definition>
        <argsstring>(int nx, int ny, T fillval, T *&amp;zb)</argsstring>
        <name>FillCPU</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>T</type>
          <declname>fillval</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>zb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="30" column="27" bodyfile="src/MemManagement.cu" bodystart="30" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1aca49cc69255b1cab045d797e0bf0d2c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void FillCPU&lt; double &gt;</definition>
        <argsstring>(int nx, int ny, double fillval, double *&amp;zb)</argsstring>
        <name>FillCPU&lt; double &gt;</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>double</type>
          <declname>fillval</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>zb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="40" column="10" declfile="src/MemManagement.cu" declline="40" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1a97df775c85d85a11bc6dabd406d99697" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void FillCPU&lt; float &gt;</definition>
        <argsstring>(int nx, int ny, float fillval, float *&amp;zb)</argsstring>
        <name>FillCPU&lt; float &gt;</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fillval</declname>
        </param>
        <param>
          <type>float *&amp;</type>
          <declname>zb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="41" column="10" declfile="src/MemManagement.cu" declline="41" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1a737618a8c15e9a568b209685c8d07cd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void FillCPU&lt; int &gt;</definition>
        <argsstring>(int nx, int ny, int fillval, int *&amp;zb)</argsstring>
        <name>FillCPU&lt; int &gt;</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fillval</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>zb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="42" column="10" declfile="src/MemManagement.cu" declline="42" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1ac2e88d8dc0428143936352be4b6b4938" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>__host__ void</type>
        <definition>__host__ void AllocateCPU</definition>
        <argsstring>(int nx, int ny, T *&amp;zs, T *&amp;h, T *&amp;u, T *&amp;v)</argsstring>
        <name>AllocateCPU</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>zs</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="44" column="27" bodyfile="src/MemManagement.cu" bodystart="44" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1a352e04081955373bd4c3ed601ef79c45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void AllocateCPU&lt; double &gt;</definition>
        <argsstring>(int nx, int ny, double *&amp;zs, double *&amp;h, double *&amp;u, double *&amp;v)</argsstring>
        <name>AllocateCPU&lt; double &gt;</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>zs</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="54" column="10" declfile="src/MemManagement.cu" declline="54" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1a69cb09051107c87e07b275059c228d9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void AllocateCPU&lt; float &gt;</definition>
        <argsstring>(int nx, int ny, float *&amp;zs, float *&amp;h, float *&amp;u, float *&amp;v)</argsstring>
        <name>AllocateCPU&lt; float &gt;</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>float *&amp;</type>
          <declname>zs</declname>
        </param>
        <param>
          <type>float *&amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>float *&amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>float *&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="55" column="10" declfile="src/MemManagement.cu" declline="55" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1a77e9b89d79a6d6bdbba334185c96d502" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void AllocateCPU&lt; int &gt;</definition>
        <argsstring>(int nx, int ny, int *&amp;zs, int *&amp;h, int *&amp;u, int *&amp;v)</argsstring>
        <name>AllocateCPU&lt; int &gt;</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>zs</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="56" column="10" declfile="src/MemManagement.cu" declline="56" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1acaf675c8510f56ca0a0ec182d7d8078e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>__host__ void</type>
        <definition>__host__ void AllocateCPU</definition>
        <argsstring>(int nx, int ny, T *&amp;zs, T *&amp;h, T *&amp;u, T *&amp;v, T *&amp;U, T *&amp;hU)</argsstring>
        <name>AllocateCPU</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>zs</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>U</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>hU</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="58" column="27" bodyfile="src/MemManagement.cu" bodystart="58" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1abfac5f8234d4e1b7d199d94203727201" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void AllocateCPU&lt; double &gt;</definition>
        <argsstring>(int nx, int ny, double *&amp;zs, double *&amp;h, double *&amp;u, double *&amp;v, double *&amp;U, double *&amp;hU)</argsstring>
        <name>AllocateCPU&lt; double &gt;</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>zs</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>U</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>hU</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="69" column="10" declfile="src/MemManagement.cu" declline="69" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1a733a1ca747a2f4a7228e2b4917c5e9ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void AllocateCPU&lt; float &gt;</definition>
        <argsstring>(int nx, int ny, float *&amp;zs, float *&amp;h, float *&amp;u, float *&amp;v, float *&amp;U, float *&amp;hU)</argsstring>
        <name>AllocateCPU&lt; float &gt;</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>float *&amp;</type>
          <declname>zs</declname>
        </param>
        <param>
          <type>float *&amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>float *&amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>float *&amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>float *&amp;</type>
          <declname>U</declname>
        </param>
        <param>
          <type>float *&amp;</type>
          <declname>hU</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="70" column="10" declfile="src/MemManagement.cu" declline="70" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1a02dbbc82f655f221e72475c6cf1e390d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void AllocateCPU&lt; int &gt;</definition>
        <argsstring>(int nx, int ny, int *&amp;zs, int *&amp;h, int *&amp;u, int *&amp;v, int *&amp;U, int *&amp;hU)</argsstring>
        <name>AllocateCPU&lt; int &gt;</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>zs</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>U</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>hU</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="71" column="10" declfile="src/MemManagement.cu" declline="71" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1a7010e5aa17261e9870004edb76cfdcbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>__host__ void</type>
        <definition>__host__ void AllocateCPU</definition>
        <argsstring>(int nx, int ny, GradientsP&lt; T &gt; &amp;Grad)</argsstring>
        <name>AllocateCPU</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type><ref refid="structGradientsP" kindref="compound">GradientsP</ref>&lt; T &gt; &amp;</type>
          <declname>Grad</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="74" column="6" bodyfile="src/MemManagement.cu" bodystart="74" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1a401df8b4c66c17d4c8c56f198b19d782" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void AllocateCPU&lt; float &gt;</definition>
        <argsstring>(int nx, int ny, GradientsP&lt; float &gt; &amp;Grad)</argsstring>
        <name>AllocateCPU&lt; float &gt;</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type><ref refid="structGradientsP" kindref="compound">GradientsP</ref>&lt; float &gt; &amp;</type>
          <declname>Grad</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="82" column="10" declfile="src/MemManagement.cu" declline="82" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1a63c604e6004eab2becdb17c1ce0bd667" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void AllocateCPU&lt; double &gt;</definition>
        <argsstring>(int nx, int ny, GradientsP&lt; double &gt; &amp;Grad)</argsstring>
        <name>AllocateCPU&lt; double &gt;</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type><ref refid="structGradientsP" kindref="compound">GradientsP</ref>&lt; double &gt; &amp;</type>
          <declname>Grad</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="83" column="10" declfile="src/MemManagement.cu" declline="83" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1ac85c44d5aefda185f362a5f3ec194df6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void AllocateCPU</definition>
        <argsstring>(int nblk, int blksize, EvolvingP&lt; T &gt; &amp;Ev)</argsstring>
        <name>AllocateCPU</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; T &gt; &amp;</type>
          <declname>Ev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="85" column="18" bodyfile="src/MemManagement.cu" bodystart="85" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1a58be5513939539084669853273eb9def" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void AllocateCPU</definition>
        <argsstring>(int nblk, int blksize, EvolvingP_M&lt; T &gt; &amp;Ev)</argsstring>
        <name>AllocateCPU</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP__M" kindref="compound">EvolvingP_M</ref>&lt; T &gt; &amp;</type>
          <declname>Ev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="90" column="18" bodyfile="src/MemManagement.cu" bodystart="90" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1a25e1e86c95fd2a1f1834ded75f108d40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void AllocateCPU</definition>
        <argsstring>(int nblk, int blksize, Param XParam, Model&lt; T &gt; &amp;XModel)</argsstring>
        <name>AllocateCPU</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; T &gt; &amp;</type>
          <declname>XModel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="97" column="6" bodyfile="src/MemManagement.cu" bodystart="97" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1a15da82c8b27a77ea6f17478bd7726ebd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void AllocateCPU&lt; float &gt;</definition>
        <argsstring>(int nblk, int blksize, Param XParam, Model&lt; float &gt; &amp;XModel)</argsstring>
        <name>AllocateCPU&lt; float &gt;</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; float &gt; &amp;</type>
          <declname>XModel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="231" column="10" declfile="src/MemManagement.cu" declline="231" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1add77fedf788a5ba8d5b661153d01ebb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void AllocateCPU&lt; double &gt;</definition>
        <argsstring>(int nblk, int blksize, Param XParam, Model&lt; double &gt; &amp;XModel)</argsstring>
        <name>AllocateCPU&lt; double &gt;</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; double &gt; &amp;</type>
          <declname>XModel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="232" column="10" declfile="src/MemManagement.cu" declline="232" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1a42387bf4dc214f200e618abf2542ed90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void ReallocArray</definition>
        <argsstring>(int nblk, int blksize, T *&amp;zb)</argsstring>
        <name>ReallocArray</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>zb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="237" column="18" bodyfile="src/MemManagement.cu" bodystart="237" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1a02612d8f9186262bde4a69ed1f586963" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void ReallocArray</definition>
        <argsstring>(int nblk, int blksize, T *&amp;zs, T *&amp;h, T *&amp;u, T *&amp;v)</argsstring>
        <name>ReallocArray</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>zs</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="253" column="18" bodyfile="src/MemManagement.cu" bodystart="253" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1a0881ea86f25dac1fb2fc7d0c8e0be183" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void ReallocArray&lt; int &gt;</definition>
        <argsstring>(int nblk, int blksize, int *&amp;zs, int *&amp;h, int *&amp;u, int *&amp;v)</argsstring>
        <name>ReallocArray&lt; int &gt;</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>zs</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="263" column="10" declfile="src/MemManagement.cu" declline="263" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1acfb4665995c045eab40fa9c09864550c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void ReallocArray&lt; float &gt;</definition>
        <argsstring>(int nblk, int blksize, float *&amp;zs, float *&amp;h, float *&amp;u, float *&amp;v)</argsstring>
        <name>ReallocArray&lt; float &gt;</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type>float *&amp;</type>
          <declname>zs</declname>
        </param>
        <param>
          <type>float *&amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>float *&amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>float *&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="264" column="10" declfile="src/MemManagement.cu" declline="264" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1afda059ee7347595e61259d31544bfe58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void ReallocArray&lt; double &gt;</definition>
        <argsstring>(int nblk, int blksize, double *&amp;zs, double *&amp;h, double *&amp;u, double *&amp;v)</argsstring>
        <name>ReallocArray&lt; double &gt;</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>zs</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="265" column="10" declfile="src/MemManagement.cu" declline="265" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1a5bd52e113bb24418a42ad21549985d63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void ReallocArray</definition>
        <argsstring>(int nblk, int blksize, T *&amp;zs, T *&amp;h, T *&amp;u, T *&amp;v, T *&amp;U, T *&amp;hU)</argsstring>
        <name>ReallocArray</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>zs</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>U</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>hU</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="267" column="18" bodyfile="src/MemManagement.cu" bodystart="267" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1a1c6a633736d1d2ba98385c30d163b47e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void ReallocArray&lt; int &gt;</definition>
        <argsstring>(int nblk, int blksize, int *&amp;zs, int *&amp;h, int *&amp;u, int *&amp;v, int *&amp;U, int *&amp;hU)</argsstring>
        <name>ReallocArray&lt; int &gt;</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>zs</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>U</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>hU</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="280" column="10" declfile="src/MemManagement.cu" declline="280" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1a544805f099555a16cf703c2080ebccff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void ReallocArray&lt; float &gt;</definition>
        <argsstring>(int nblk, int blksize, float *&amp;zs, float *&amp;h, float *&amp;u, float *&amp;v, float *&amp;U, float *&amp;hU)</argsstring>
        <name>ReallocArray&lt; float &gt;</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type>float *&amp;</type>
          <declname>zs</declname>
        </param>
        <param>
          <type>float *&amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>float *&amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>float *&amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>float *&amp;</type>
          <declname>U</declname>
        </param>
        <param>
          <type>float *&amp;</type>
          <declname>hU</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="281" column="10" declfile="src/MemManagement.cu" declline="281" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1a71228cdb3d54e8cb29fe50a6096e4fe5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void ReallocArray&lt; double &gt;</definition>
        <argsstring>(int nblk, int blksize, double *&amp;zs, double *&amp;h, double *&amp;u, double *&amp;v, double *&amp;U, double *&amp;hU)</argsstring>
        <name>ReallocArray&lt; double &gt;</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>zs</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>U</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>hU</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="282" column="10" declfile="src/MemManagement.cu" declline="282" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1ac9a048abacc33fe4e0926f6370233caa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void ReallocArray</definition>
        <argsstring>(int nblk, int blksize, EvolvingP&lt; T &gt; &amp;Ev)</argsstring>
        <name>ReallocArray</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; T &gt; &amp;</type>
          <declname>Ev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="284" column="18" bodyfile="src/MemManagement.cu" bodystart="284" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1ace6ee12d8209bfcff4c0e589f75d4952" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void ReallocArray&lt; float &gt;</definition>
        <argsstring>(int nblk, int blksize, EvolvingP&lt; float &gt; &amp;Ev)</argsstring>
        <name>ReallocArray&lt; float &gt;</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; float &gt; &amp;</type>
          <declname>Ev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="288" column="10" declfile="src/MemManagement.cu" declline="288" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1a95375fb61921e8d64f40b1bae9797664" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void ReallocArray&lt; double &gt;</definition>
        <argsstring>(int nblk, int blksize, EvolvingP&lt; double &gt; &amp;Ev)</argsstring>
        <name>ReallocArray&lt; double &gt;</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; double &gt; &amp;</type>
          <declname>Ev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="289" column="10" declfile="src/MemManagement.cu" declline="289" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1a73eb44c43e30372a501dad94a875d133" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void ReallocArray</definition>
        <argsstring>(int nblk, int blksize, EvolvingP_M&lt; T &gt; &amp;Ev)</argsstring>
        <name>ReallocArray</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP__M" kindref="compound">EvolvingP_M</ref>&lt; T &gt; &amp;</type>
          <declname>Ev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="291" column="18" bodyfile="src/MemManagement.cu" bodystart="291" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1a214ab6ce5950e298dc62986d3fad0732" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void ReallocArray&lt; float &gt;</definition>
        <argsstring>(int nblk, int blksize, EvolvingP_M&lt; float &gt; &amp;Ev)</argsstring>
        <name>ReallocArray&lt; float &gt;</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP__M" kindref="compound">EvolvingP_M</ref>&lt; float &gt; &amp;</type>
          <declname>Ev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="295" column="10" declfile="src/MemManagement.cu" declline="295" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1a4671c48bb76cc3baa962e93b6da63445" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void ReallocArray&lt; double &gt;</definition>
        <argsstring>(int nblk, int blksize, EvolvingP_M&lt; double &gt; &amp;Ev)</argsstring>
        <name>ReallocArray&lt; double &gt;</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP__M" kindref="compound">EvolvingP_M</ref>&lt; double &gt; &amp;</type>
          <declname>Ev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="296" column="10" declfile="src/MemManagement.cu" declline="296" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1ad1f3c3382ef4419a772a92a0721b7d72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void ReallocArray</definition>
        <argsstring>(int nblk, int blksize, Param XParam, Model&lt; T &gt; &amp;XModel)</argsstring>
        <name>ReallocArray</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; T &gt; &amp;</type>
          <declname>XModel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="299" column="6" bodyfile="src/MemManagement.cu" bodystart="299" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1a632f700b36214e83801e7fa1b9d79f6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void ReallocArray&lt; float &gt;</definition>
        <argsstring>(int nblk, int blksize, Param XParam, Model&lt; float &gt; &amp;XModel)</argsstring>
        <name>ReallocArray&lt; float &gt;</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; float &gt; &amp;</type>
          <declname>XModel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="382" column="10" declfile="src/MemManagement.cu" declline="382" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1a6788d01685d9924661db11af337221ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void ReallocArray&lt; double &gt;</definition>
        <argsstring>(int nblk, int blksize, Param XParam, Model&lt; double &gt; &amp;XModel)</argsstring>
        <name>ReallocArray&lt; double &gt;</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; double &gt; &amp;</type>
          <declname>XModel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="383" column="10" declfile="src/MemManagement.cu" declline="383" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1a2938410b899f5f7687c22997655d9588" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void AllocateMappedMemCPU</definition>
        <argsstring>(int nx, int ny, int gpudevice, T *&amp;z)</argsstring>
        <name>AllocateMappedMemCPU</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gpudevice</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="388" column="18" bodyfile="src/MemManagement.cu" bodystart="388" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1a9274da31f5e21b5115857e51a4373525" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void AllocateMappedMemCPU&lt; int &gt;</definition>
        <argsstring>(int nx, int ny, int gpudevice, int *&amp;z)</argsstring>
        <name>AllocateMappedMemCPU&lt; int &gt;</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gpudevice</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="449" column="10" declfile="src/MemManagement.cu" declline="449" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1ad05f7c42136832b8817689fc2c78f71b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void AllocateMappedMemCPU&lt; float &gt;</definition>
        <argsstring>(int nx, int ny, int gpudevice, float *&amp;z)</argsstring>
        <name>AllocateMappedMemCPU&lt; float &gt;</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gpudevice</declname>
        </param>
        <param>
          <type>float *&amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="450" column="10" declfile="src/MemManagement.cu" declline="450" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1acd8fa816afa44285df53c35287f558af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void AllocateMappedMemCPU&lt; double &gt;</definition>
        <argsstring>(int nx, int ny, int gpudevice, double *&amp;z)</argsstring>
        <name>AllocateMappedMemCPU&lt; double &gt;</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gpudevice</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="451" column="10" declfile="src/MemManagement.cu" declline="451" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1adc411d9ef22e532d0831749971681f92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void AllocateMappedMemGPU</definition>
        <argsstring>(int nx, int ny, int gpudevice, T *&amp;z_g, T *z)</argsstring>
        <name>AllocateMappedMemGPU</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gpudevice</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>z_g</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="453" column="18" bodyfile="src/MemManagement.cu" bodystart="453" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1ad6d234865808a4520aa0d700134d2c48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void AllocateMappedMemGPU&lt; int &gt;</definition>
        <argsstring>(int nx, int ny, int gpudevice, int *&amp;z_g, int *z)</argsstring>
        <name>AllocateMappedMemGPU&lt; int &gt;</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gpudevice</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>z_g</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="457" column="10" declfile="src/MemManagement.cu" declline="457" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1a2b2c48797d2969537b16ca0919f90b8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void AllocateMappedMemGPU&lt; float &gt;</definition>
        <argsstring>(int nx, int ny, int gpudevice, float *&amp;z_g, float *z)</argsstring>
        <name>AllocateMappedMemGPU&lt; float &gt;</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gpudevice</declname>
        </param>
        <param>
          <type>float *&amp;</type>
          <declname>z_g</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="458" column="10" declfile="src/MemManagement.cu" declline="458" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1acb34483dc4606b93d5cfb953e3d8340a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void AllocateMappedMemGPU&lt; double &gt;</definition>
        <argsstring>(int nx, int ny, int gpudevice, double *&amp;z_g, double *z)</argsstring>
        <name>AllocateMappedMemGPU&lt; double &gt;</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gpudevice</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>z_g</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="459" column="10" declfile="src/MemManagement.cu" declline="459" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1a1e573ee5a85dfe633828db07d46440fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void AllocateGPU</definition>
        <argsstring>(int nx, int ny, T *&amp;z_g)</argsstring>
        <name>AllocateGPU</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>z_g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="462" column="18" bodyfile="src/MemManagement.cu" bodystart="462" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1ac5e02cbe057b525f6391584b1c872d6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void AllocateGPU</definition>
        <argsstring>(int nx, int ny, T *&amp;zs, T *&amp;h, T *&amp;u, T *&amp;v)</argsstring>
        <name>AllocateGPU</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>zs</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="467" column="18" bodyfile="src/MemManagement.cu" bodystart="467" bodyend="475"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1a89ef098960c1cc56758ccd2fc66fb03c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void AllocateGPU&lt; double &gt;</definition>
        <argsstring>(int nx, int ny, double *&amp;zs, double *&amp;h, double *&amp;u, double *&amp;v)</argsstring>
        <name>AllocateGPU&lt; double &gt;</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>zs</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="476" column="10" declfile="src/MemManagement.cu" declline="476" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1ab07deb44856919c56491411897bec884" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void AllocateGPU&lt; float &gt;</definition>
        <argsstring>(int nx, int ny, float *&amp;zs, float *&amp;h, float *&amp;u, float *&amp;v)</argsstring>
        <name>AllocateGPU&lt; float &gt;</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>float *&amp;</type>
          <declname>zs</declname>
        </param>
        <param>
          <type>float *&amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>float *&amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>float *&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="477" column="10" declfile="src/MemManagement.cu" declline="477" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1aabc75bd0cfa63217cb0ff09aca541890" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void AllocateGPU&lt; int &gt;</definition>
        <argsstring>(int nx, int ny, int *&amp;zs, int *&amp;h, int *&amp;u, int *&amp;v)</argsstring>
        <name>AllocateGPU&lt; int &gt;</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>zs</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="478" column="10" declfile="src/MemManagement.cu" declline="478" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1a49c8e68073ccf46f281d2a5ad2d8f559" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void AllocateGPU</definition>
        <argsstring>(int nx, int ny, T *&amp;zs, T *&amp;h, T *&amp;u, T *&amp;v, T *&amp;U, T *&amp;hU)</argsstring>
        <name>AllocateGPU</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>zs</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>U</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>hU</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="480" column="18" bodyfile="src/MemManagement.cu" bodystart="480" bodyend="490"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1a7f58f9d4e0675f2a4c819ff21c4a8c35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void AllocateGPU&lt; double &gt;</definition>
        <argsstring>(int nx, int ny, double *&amp;zs, double *&amp;h, double *&amp;u, double *&amp;v, double *&amp;U, double *&amp;hU)</argsstring>
        <name>AllocateGPU&lt; double &gt;</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>zs</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>U</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>hU</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="491" column="10" declfile="src/MemManagement.cu" declline="491" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1adc5bb0f73c1f06526935f5841384699f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void AllocateGPU&lt; float &gt;</definition>
        <argsstring>(int nx, int ny, float *&amp;zs, float *&amp;h, float *&amp;u, float *&amp;v, float *&amp;U, float *&amp;hU)</argsstring>
        <name>AllocateGPU&lt; float &gt;</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>float *&amp;</type>
          <declname>zs</declname>
        </param>
        <param>
          <type>float *&amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>float *&amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>float *&amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>float *&amp;</type>
          <declname>U</declname>
        </param>
        <param>
          <type>float *&amp;</type>
          <declname>hU</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="492" column="10" declfile="src/MemManagement.cu" declline="492" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1a81970a4261f5b802af12ad6221af39f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void AllocateGPU&lt; int &gt;</definition>
        <argsstring>(int nx, int ny, int *&amp;zs, int *&amp;h, int *&amp;u, int *&amp;v, int *&amp;U, int *&amp;hU)</argsstring>
        <name>AllocateGPU&lt; int &gt;</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>zs</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>U</declname>
        </param>
        <param>
          <type>int *&amp;</type>
          <declname>hU</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="493" column="10" declfile="src/MemManagement.cu" declline="493" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1a3b155931d83c61e6efd1251676e0eef2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void AllocateGPU</definition>
        <argsstring>(int nx, int ny, GradientsP&lt; T &gt; &amp;Grad)</argsstring>
        <name>AllocateGPU</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type><ref refid="structGradientsP" kindref="compound">GradientsP</ref>&lt; T &gt; &amp;</type>
          <declname>Grad</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="496" column="6" bodyfile="src/MemManagement.cu" bodystart="496" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1afc3be24b3ea5958d4655e6218a872a77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void AllocateGPU&lt; float &gt;</definition>
        <argsstring>(int nx, int ny, GradientsP&lt; float &gt; &amp;Grad)</argsstring>
        <name>AllocateGPU&lt; float &gt;</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type><ref refid="structGradientsP" kindref="compound">GradientsP</ref>&lt; float &gt; &amp;</type>
          <declname>Grad</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="503" column="10" declfile="src/MemManagement.cu" declline="503" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1a585cc996b2f2abb336f0255455194861" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void AllocateGPU&lt; double &gt;</definition>
        <argsstring>(int nx, int ny, GradientsP&lt; double &gt; &amp;Grad)</argsstring>
        <name>AllocateGPU&lt; double &gt;</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type><ref refid="structGradientsP" kindref="compound">GradientsP</ref>&lt; double &gt; &amp;</type>
          <declname>Grad</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="504" column="10" declfile="src/MemManagement.cu" declline="504" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1ae06a8f257b052110ee151c57a2a02159" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void AllocateGPU</definition>
        <argsstring>(int nblk, int blksize, EvolvingP&lt; T &gt; &amp;Ev)</argsstring>
        <name>AllocateGPU</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP" kindref="compound">EvolvingP</ref>&lt; T &gt; &amp;</type>
          <declname>Ev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="506" column="18" bodyfile="src/MemManagement.cu" bodystart="506" bodyend="509"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1a1b1733cd92265b7d9a9b85cdfc6e5482" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void AllocateGPU</definition>
        <argsstring>(int nblk, int blksize, EvolvingP_M&lt; T &gt; &amp;Ev)</argsstring>
        <name>AllocateGPU</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type><ref refid="structEvolvingP__M" kindref="compound">EvolvingP_M</ref>&lt; T &gt; &amp;</type>
          <declname>Ev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="511" column="18" bodyfile="src/MemManagement.cu" bodystart="511" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1a7760a58fb55d0e75f1b56e99d68c024c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void AllocateGPU</definition>
        <argsstring>(int nblk, int blksize, Param XParam, Model&lt; T &gt; &amp;XModel)</argsstring>
        <name>AllocateGPU</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; T &gt; &amp;</type>
          <declname>XModel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="517" column="6" bodyfile="src/MemManagement.cu" bodystart="517" bodyend="613"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1a9a49ffaf6477103a6d192e5ae36ebafe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void AllocateGPU&lt; float &gt;</definition>
        <argsstring>(int nblk, int blksize, Param XParam, Model&lt; float &gt; &amp;XModel)</argsstring>
        <name>AllocateGPU&lt; float &gt;</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; float &gt; &amp;</type>
          <declname>XModel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="615" column="10" declfile="src/MemManagement.cu" declline="615" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="MemManagement_8cu_1affc8bab4b4aae4e524cd18567e47a1b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void AllocateGPU&lt; double &gt;</definition>
        <argsstring>(int nblk, int blksize, Param XParam, Model&lt; double &gt; &amp;XModel)</argsstring>
        <name>AllocateGPU&lt; double &gt;</name>
        <param>
          <type>int</type>
          <declname>nblk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blksize</declname>
        </param>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; double &gt; &amp;</type>
          <declname>XModel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MemManagement.cu" line="616" column="10" declfile="src/MemManagement.cu" declline="616" declcolumn="10"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;MemManagement.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MEMORY_ALIGNMENT<sp/><sp/>4096</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ALIGN_UP(x,size)<sp/>(<sp/>((size_t)x+(size-1))&amp;(~(size-1))<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal">__host__<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>memloc(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib)</highlight></codeline>
<codeline lineno="9"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(i+XParam.halowidth)<sp/>+<sp/>(j<sp/>+<sp/>XParam.halowidth)<sp/>*<sp/>XParam.blkmemwidth<sp/>+<sp/>ib<sp/>*<sp/>XParam.blksize;</highlight></codeline>
<codeline lineno="11"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal">__host__<sp/>__device__<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>memloc(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>halowidth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blkmemwidth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib)</highlight></codeline>
<codeline lineno="15"><highlight class="normal">{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(i<sp/>+<sp/>halowidth)<sp/>+<sp/>(j<sp/>+<sp/>halowidth)<sp/>*<sp/>blkmemwidth<sp/>+<sp/>ib<sp/>*<sp/>(blkmemwidth*<sp/>blkmemwidth);</highlight></codeline>
<codeline lineno="17"><highlight class="normal">}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/>__host__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllocateCPU(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/>T<sp/>*&amp;zb)</highlight></codeline>
<codeline lineno="20"><highlight class="normal">{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>zb<sp/>=<sp/>(T<sp/>*)malloc(nx*ny<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T));</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!zb)</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Memory<sp/>allocation<sp/>failure\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/>__host__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FillCPU(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,T<sp/>fillval,<sp/>T*&amp;<sp/>zb)</highlight></codeline>
<codeline lineno="31"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>0;<sp/>ix<sp/>&lt;<sp/>nx;<sp/>ix++)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy<sp/>=<sp/>0;<sp/>iy<sp/>&lt;<sp/>ny;<sp/>iy++)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zb[iy<sp/>*<sp/>nx<sp/>+<sp/>ix]<sp/>=<sp/>fillval;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FillCPU&lt;double&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fillval,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*&amp;<sp/>zb);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FillCPU&lt;float&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>fillval,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*&amp;<sp/>zb);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FillCPU&lt;int&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fillval,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*&amp;<sp/>zb);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/>__host__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllocateCPU(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/>T<sp/>*&amp;zs,<sp/>T<sp/>*&amp;h,<sp/>T<sp/>*&amp;u,<sp/>T<sp/>*&amp;v)</highlight></codeline>
<codeline lineno="45"><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(nx,<sp/>ny,<sp/>zs);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(nx,<sp/>ny,<sp/>h);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(nx,<sp/>ny,<sp/>u);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(nx,<sp/>ny,<sp/>v);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllocateCPU&lt;double&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*&amp;zs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*&amp;h,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*&amp;u,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*&amp;v);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllocateCPU&lt;float&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*&amp;zs,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*&amp;h,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*&amp;u,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*&amp;v);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllocateCPU&lt;int&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*&amp;zs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*&amp;h,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*&amp;u,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*&amp;v);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/>__host__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllocateCPU(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/>T*&amp;<sp/>zs,<sp/>T*&amp;<sp/>h,<sp/>T*&amp;<sp/>u,<sp/>T*&amp;<sp/>v,<sp/>T*&amp;<sp/>U,<sp/>T*&amp;<sp/>hU)</highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(nx,<sp/>ny,<sp/>zs);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(nx,<sp/>ny,<sp/>h);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(nx,<sp/>ny,<sp/>u);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(nx,<sp/>ny,<sp/>v);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(nx,<sp/>ny,<sp/>U);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(nx,<sp/>ny,<sp/>hU);</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllocateCPU&lt;double&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*&amp;<sp/>zs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*&amp;<sp/>h,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*&amp;<sp/>u,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*&amp;<sp/>v,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*&amp;<sp/>U,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*&amp;<sp/>hU);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllocateCPU&lt;float&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*&amp;<sp/>zs,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*&amp;<sp/>h,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*&amp;<sp/>u,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*&amp;<sp/>v,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*&amp;<sp/>U,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*&amp;<sp/>hU);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllocateCPU&lt;int&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*&amp;<sp/>zs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*&amp;<sp/>h,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*&amp;<sp/>u,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*&amp;<sp/>v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*&amp;<sp/>U,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*&amp;<sp/>hU);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/>__host__</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllocateCPU(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/><ref refid="structGradientsP" kindref="compound">GradientsP&lt;T&gt;</ref>&amp;<sp/>Grad)</highlight></codeline>
<codeline lineno="75"><highlight class="normal">{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(nx,<sp/>ny,<sp/>Grad.dhdx,<sp/>Grad.dzsdx,<sp/>Grad.dudx,<sp/>Grad.dvdx);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(nx,<sp/>ny,<sp/>Grad.dhdy,<sp/>Grad.dzsdy,<sp/>Grad.dudy,<sp/>Grad.dvdy);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(nx,<sp/>ny,<sp/>Grad.dzbdx);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(nx,<sp/>ny,<sp/>Grad.dzbdy);</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllocateCPU&lt;float&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/><ref refid="structGradientsP" kindref="compound">GradientsP&lt;float&gt;</ref>&amp;<sp/>Grad);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllocateCPU&lt;double&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/><ref refid="structGradientsP" kindref="compound">GradientsP&lt;double&gt;</ref>&amp;<sp/>Grad);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllocateCPU(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;T&gt;</ref><sp/>&amp;<sp/>Ev)</highlight></codeline>
<codeline lineno="86"><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(nblk,<sp/>blksize,<sp/>Ev.h,<sp/>Ev.zs,<sp/>Ev.u,<sp/>Ev.v);</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllocateCPU(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/><ref refid="structEvolvingP__M" kindref="compound">EvolvingP_M&lt;T&gt;</ref>&amp;<sp/>Ev)</highlight></codeline>
<codeline lineno="91"><highlight class="normal">{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(nblk,<sp/>blksize,<sp/>Ev.h,<sp/>Ev.zs,<sp/>Ev.u,<sp/>Ev.v,<sp/>Ev.U,<sp/>Ev.hU);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllocateCPU(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/><ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref>&amp;<sp/>XModel)</highlight></codeline>
<codeline lineno="98"><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>blocks<sp/>data<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(nblk,<sp/>blksize,<sp/>XModel.evolv);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(nblk,<sp/>blksize,<sp/>XModel.evolv_o);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(nblk,<sp/>blksize,<sp/>XModel.grad.dhdy,<sp/>XModel.grad.dzsdy,<sp/>XModel.grad.dudy,<sp/>XModel.grad.dvdy);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(nblk,<sp/>blksize,<sp/>XModel.grad.dhdx,<sp/>XModel.grad.dzsdx,<sp/>XModel.grad.dudx,<sp/>XModel.grad.dvdx);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(nblk,<sp/>blksize,<sp/>XModel.grad.dzbdx);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(nblk,<sp/>blksize,<sp/>XModel.grad.dzbdy);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.engine==5)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateCPU(nblk,<sp/>blksize,<sp/>XModel.fluxml.Fux,<sp/>XModel.fluxml.Fvy,<sp/>XModel.fluxml.Fuy,<sp/>XModel.fluxml.Fvx);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateCPU(nblk,<sp/>blksize,<sp/>XModel.fluxml.hfu,<sp/>XModel.fluxml.hfv,<sp/>XModel.fluxml.hu,<sp/>XModel.fluxml.hv);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateCPU(nblk,<sp/>blksize,<sp/>XModel.fluxml.hau);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateCPU(nblk,<sp/>blksize,<sp/>XModel.fluxml.hav);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateCPU(nblk,<sp/>blksize,<sp/>XModel.flux.Fhu,<sp/>XModel.flux.Fhv,<sp/>XModel.flux.Fqux,<sp/>XModel.flux.Fquy);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateCPU(nblk,<sp/>blksize,<sp/>XModel.flux.Fqvx,<sp/>XModel.flux.Fqvy,<sp/>XModel.flux.Su,<sp/>XModel.flux.Sv);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(nblk,<sp/>blksize,<sp/>XModel.zb,<sp/>XModel.adv.dh,<sp/>XModel.adv.dhu,<sp/>XModel.adv.dhv);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(nblk,<sp/>blksize,<sp/>XModel.cf,<sp/>XModel.time.arrmax,<sp/>XModel.time.arrmin,<sp/>XModel.time.dtmax);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Allocate<sp/>block<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(nblk,<sp/>1,<sp/>XModel.blocks.active);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(nblk,<sp/>blksize,<sp/>XModel.blocks.activeCell);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(nblk,<sp/>1,<sp/>XModel.blocks.level);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(nblk,<sp/>1,<sp/>XModel.blocks.BotLeft,<sp/>XModel.blocks.BotRight,<sp/>XModel.blocks.LeftBot,<sp/>XModel.blocks.LeftTop);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(nblk,<sp/>1,<sp/>XModel.blocks.RightBot,<sp/>XModel.blocks.RightTop,<sp/>XModel.blocks.TopLeft,<sp/>XModel.blocks.TopRight);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(nblk,<sp/>1,<sp/>XModel.blocks.xo);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(nblk,<sp/>1,<sp/>XModel.blocks.yo);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>allocate<sp/>1<sp/>mask<sp/>block<sp/>(block<sp/>with<sp/>at<sp/>least<sp/>1<sp/>empty<sp/>neighbourhood)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>will<sp/>be<sp/>reallocated<sp/>eventually</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(1,<sp/>1,<sp/>XModel.blocks.mask.side);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(1,<sp/>1,<sp/>XModel.blocks.mask.blks);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>no<sp/>adatptation<sp/>ignore<sp/>this!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.maxlevel<sp/>!=<sp/>XParam.minlevel)</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateCPU(nblk,<sp/>1,<sp/>XModel.adapt.availblk,<sp/>XModel.adapt.csumblk,<sp/>XModel.adapt.invactive,<sp/>XModel.adapt.newlevel);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateCPU(nblk,<sp/>1,<sp/>XModel.adapt.coarsen);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateCPU(nblk,<sp/>1,<sp/>XModel.adapt.refine);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>allocate<sp/>1<sp/>outzone<sp/>block,<sp/>this<sp/>will<sp/>be<sp/>reallocated<sp/>eventually</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//AllocateCPU(1,<sp/>1,<sp/>XModel.blocks.outZone[0].blk);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(XParam.outzone.size()<sp/>&gt;<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>//XModel.blocks.outZone.resize(XParam.outzone.size())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>for<sp/>(int<sp/>o<sp/>=<sp/>1;<sp/>o<sp/>&lt;<sp/>XParam.outzone.size();<sp/>o++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>AllocateCPU(1,<sp/>1,<sp/>XModel.blocks.outZone[o].blk);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.TSnodesout.size()<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Timeseries<sp/>output<sp/>temporary<sp/>storage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>storage<sp/>=<sp/>XParam.maxTSstorage;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateCPU(storage,<sp/>1,<sp/>XModel.TSstore);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.atmpforcing)</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateCPU(nblk,<sp/>blksize,<sp/>XModel.Patm);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateCPU(nblk,<sp/>blksize,<sp/>XModel.datmpdx);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateCPU(nblk,<sp/>blksize,<sp/>XModel.datmpdy);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.infiltration)</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateCPU(nblk,<sp/>blksize,<sp/>XModel.il);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateCPU(nblk,<sp/>blksize,<sp/>XModel.cl);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateCPU(nblk,<sp/>blksize,<sp/>XModel.hgw);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.outmax)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateCPU(nblk,<sp/>blksize,<sp/>XModel.evmax);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.outmean)</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateCPU(nblk,<sp/>blksize,<sp/>XModel.evmean);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.outtwet)</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateCPU(nblk,<sp/>blksize,<sp/>XModel.wettime);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*if<sp/>(XParam.outvort)</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateCPU(nblk,<sp/>blksize,<sp/>XModel.vort);</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(XParam.outU)</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateCPU(nblk,<sp/>blksize,<sp/>XModel.U);</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/><sp/><sp/><sp/>}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.TSnodesout.size()<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Timeseries<sp/>output<sp/>temporary<sp/>storage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>storage<sp/>=<sp/>XParam.maxTSstorage;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateCPU(storage,<sp/>1,<sp/>XModel.TSstore);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.nrivers<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//this<sp/>will<sp/>be<sp/>eventually<sp/>reallocated<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateCPU(1,<sp/>1,<sp/>XModel.bndblk.river);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XModel.bndblk.nblkriver<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateCPU(1,<sp/>1,<sp/>XModel.bndblk.Riverinfo.Xbidir);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateCPU(1,<sp/>1,<sp/>XModel.bndblk.Riverinfo.Xridib);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>preallocate<sp/>1<sp/>block<sp/>along<sp/>all<sp/>bnds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//this<sp/>will<sp/>be<sp/>eventually<sp/>reallocated<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//AllocateCPU(1,<sp/>1,<sp/>XModel.bndblk.left);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//AllocateCPU(1,<sp/>1,<sp/>XModel.bndblk.right);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//AllocateCPU(1,<sp/>1,<sp/>XModel.bndblk.top);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//AllocateCPU(1,<sp/>1,<sp/>XModel.bndblk.bot);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllocateCPU&lt;float&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/><ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structModel" kindref="compound">Model&lt;float&gt;</ref>&amp;<sp/>XModel);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllocateCPU&lt;double&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/><ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structModel" kindref="compound">Model&lt;double&gt;</ref>&amp;<sp/>XModel);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ReallocArray(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/>T*<sp/>&amp;<sp/>zb)</highlight></codeline>
<codeline lineno="238"><highlight class="normal">{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nblk<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zb<sp/>=<sp/>(T*)realloc(zb,<sp/>nblk<sp/>*<sp/>blksize<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T));</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(zb<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Memory<sp/>reallocation<sp/>failure\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//return<sp/>nblkmem</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ReallocArray(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/>T*&amp;<sp/>zs,<sp/>T*&amp;<sp/>h,<sp/>T*&amp;<sp/>u,<sp/>T*&amp;<sp/>v)</highlight></codeline>
<codeline lineno="254"><highlight class="normal">{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>ReallocArray(nblk,<sp/>blksize,<sp/>zs);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>ReallocArray(nblk,<sp/>blksize,<sp/>h);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>ReallocArray(nblk,<sp/>blksize,<sp/>u);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>ReallocArray(nblk,<sp/>blksize,<sp/>v);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//return<sp/>nblkmem</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ReallocArray&lt;int&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*&amp;<sp/>zs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*&amp;<sp/>h,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*&amp;<sp/>u,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*&amp;<sp/>v);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ReallocArray&lt;float&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*&amp;<sp/>zs,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*&amp;<sp/>h,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*&amp;<sp/>u,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*&amp;<sp/>v);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ReallocArray&lt;double&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*&amp;<sp/>zs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*&amp;<sp/>h,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*&amp;<sp/>u,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*&amp;<sp/>v);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ReallocArray(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/>T*&amp;<sp/>zs,<sp/>T*&amp;<sp/>h,<sp/>T*&amp;<sp/>u,<sp/>T*&amp;<sp/>v,<sp/>T*&amp;<sp/>U,<sp/>T*&amp;<sp/>hU)</highlight></codeline>
<codeline lineno="268"><highlight class="normal">{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>ReallocArray(nblk,<sp/>blksize,<sp/>zs);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>ReallocArray(nblk,<sp/>blksize,<sp/>h);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>ReallocArray(nblk,<sp/>blksize,<sp/>u);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>ReallocArray(nblk,<sp/>blksize,<sp/>v);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>ReallocArray(nblk,<sp/>blksize,<sp/>U);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>ReallocArray(nblk,<sp/>blksize,<sp/>hU);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//return<sp/>nblkmem</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ReallocArray&lt;int&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>&amp;<sp/>zs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*&amp;<sp/>h,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*&amp;<sp/>u,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*&amp;<sp/>v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*&amp;<sp/>U,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*&amp;<sp/>hU);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ReallocArray&lt;float&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>&amp;<sp/>zs,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*&amp;<sp/>h,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*&amp;<sp/>u,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*&amp;<sp/>v,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*&amp;<sp/>U,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*&amp;<sp/>hU);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ReallocArray&lt;double&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>&amp;<sp/>zs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*&amp;<sp/>h,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*&amp;<sp/>u,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*&amp;<sp/>v,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*&amp;<sp/>U,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*&amp;<sp/>hU);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ReallocArray(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;T&gt;</ref>&amp;<sp/>Ev)</highlight></codeline>
<codeline lineno="285"><highlight class="normal">{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>ReallocArray(nblk,<sp/>blksize,<sp/>Ev.zs,<sp/>Ev.h,<sp/>Ev.u,<sp/>Ev.v);</highlight></codeline>
<codeline lineno="287"><highlight class="normal">}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ReallocArray&lt;float&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;float&gt;</ref>&amp;<sp/>Ev);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ReallocArray&lt;double&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;double&gt;</ref>&amp;<sp/>Ev);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ReallocArray(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/><ref refid="structEvolvingP__M" kindref="compound">EvolvingP_M&lt;T&gt;</ref>&amp;<sp/>Ev)</highlight></codeline>
<codeline lineno="292"><highlight class="normal">{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>ReallocArray(nblk,<sp/>blksize,<sp/>Ev.zs,<sp/>Ev.h,<sp/>Ev.u,<sp/>Ev.v,<sp/>Ev.U,<sp/>Ev.hU);</highlight></codeline>
<codeline lineno="294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ReallocArray&lt;float&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/><ref refid="structEvolvingP__M" kindref="compound">EvolvingP_M&lt;float&gt;</ref>&amp;<sp/>Ev);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ReallocArray&lt;double&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/><ref refid="structEvolvingP__M" kindref="compound">EvolvingP_M&lt;double&gt;</ref>&amp;<sp/>Ev);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ReallocArray(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/><ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref>&amp;<sp/>XModel)</highlight></codeline>
<codeline lineno="300"><highlight class="normal">{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>blocks<sp/>data<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>ReallocArray(nblk,<sp/>blksize,<sp/>XModel.evolv);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>ReallocArray(nblk,<sp/>blksize,<sp/>XModel.evolv_o);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>ReallocArray(nblk,<sp/>blksize,<sp/>XModel.grad.dhdy,<sp/>XModel.grad.dzsdy,<sp/>XModel.grad.dudy,<sp/>XModel.grad.dvdy);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>ReallocArray(nblk,<sp/>blksize,<sp/>XModel.grad.dhdx,<sp/>XModel.grad.dzsdx,<sp/>XModel.grad.dudx,<sp/>XModel.grad.dvdx);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>ReallocArray(nblk,<sp/>blksize,<sp/>XModel.grad.dzbdx);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>ReallocArray(nblk,<sp/>blksize,<sp/>XModel.grad.dzbdy);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.engine<sp/>==<sp/>5)</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReallocArray(nblk,<sp/>blksize,<sp/>XModel.fluxml.Fux,<sp/>XModel.fluxml.Fvy,<sp/>XModel.fluxml.Fuy,<sp/>XModel.fluxml.Fvx);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReallocArray(nblk,<sp/>blksize,<sp/>XModel.fluxml.hfu,<sp/>XModel.fluxml.hfv,<sp/>XModel.fluxml.hu,<sp/>XModel.fluxml.hv);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReallocArray(nblk,<sp/>blksize,<sp/>XModel.fluxml.hau);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReallocArray(nblk,<sp/>blksize,<sp/>XModel.fluxml.hav);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReallocArray(nblk,<sp/>blksize,<sp/>XModel.flux.Fhu,<sp/>XModel.flux.Fhv,<sp/>XModel.flux.Fqux,<sp/>XModel.flux.Fquy);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReallocArray(nblk,<sp/>blksize,<sp/>XModel.flux.Fqvx,<sp/>XModel.flux.Fqvy,<sp/>XModel.flux.Su,<sp/>XModel.flux.Sv);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>ReallocArray(nblk,<sp/>blksize,<sp/>XModel.zb,<sp/>XModel.adv.dh,<sp/>XModel.adv.dhu,<sp/>XModel.adv.dhv);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>ReallocArray(nblk,<sp/>blksize,<sp/>XModel.cf,<sp/>XModel.time.arrmax,<sp/>XModel.time.arrmin,<sp/>XModel.time.dtmax);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Allocate<sp/>block<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>ReallocArray(nblk,<sp/>1,<sp/>XModel.blocks.active);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>ReallocArray(nblk,<sp/>blksize,<sp/>XModel.blocks.activeCell);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>ReallocArray(nblk,<sp/>1,<sp/>XModel.blocks.level);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>ReallocArray(nblk,<sp/>1,<sp/>XModel.blocks.BotLeft,<sp/>XModel.blocks.BotRight,<sp/>XModel.blocks.LeftBot,<sp/>XModel.blocks.LeftTop);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>ReallocArray(nblk,<sp/>1,<sp/>XModel.blocks.RightBot,<sp/>XModel.blocks.RightTop,<sp/>XModel.blocks.TopLeft,<sp/>XModel.blocks.TopRight);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>ReallocArray(nblk,<sp/>1,<sp/>XModel.blocks.xo);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>ReallocArray(nblk,<sp/>1,<sp/>XModel.blocks.yo);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>no<sp/>adatptation<sp/>ignore<sp/>this!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.maxlevel<sp/>!=<sp/>XParam.minlevel)</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReallocArray(nblk,<sp/>1,<sp/>XModel.adapt.availblk,<sp/>XModel.adapt.csumblk,<sp/>XModel.adapt.invactive,<sp/>XModel.adapt.newlevel);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReallocArray(nblk,<sp/>1,<sp/>XModel.adapt.coarsen);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReallocArray(nblk,<sp/>1,<sp/>XModel.adapt.refine);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.atmpforcing)</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReallocArray(nblk,<sp/>blksize,<sp/>XModel.Patm);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReallocArray(nblk,<sp/>blksize,<sp/>XModel.datmpdx);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReallocArray(nblk,<sp/>blksize,<sp/>XModel.datmpdy);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.infiltration)</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReallocArray(nblk,<sp/>blksize,<sp/>XModel.il);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReallocArray(nblk,<sp/>blksize,<sp/>XModel.cl);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReallocArray(nblk,<sp/>blksize,<sp/>XModel.hgw);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.outmax)</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReallocArray(nblk,<sp/>blksize,<sp/>XModel.evmax);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.outmean)</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReallocArray(nblk,<sp/>blksize,<sp/>XModel.evmean);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.outtwet)</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReallocArray(nblk,<sp/>blksize,<sp/>XModel.wettime);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ReallocArray(nx,<sp/>ny,<sp/>XModel.);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ReallocArray&lt;float&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/><ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structModel" kindref="compound">Model&lt;float&gt;</ref>&amp;<sp/>XModel);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ReallocArray&lt;double&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/><ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structModel" kindref="compound">Model&lt;double&gt;</ref>&amp;<sp/>XModel);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllocateMappedMemCPU(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gpudevice,<sp/>T*&amp;<sp/>z)</highlight></codeline>
<codeline lineno="389"><highlight class="normal">{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bPinGenericMemory;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaDeviceProp<sp/>deviceProp;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__APPLE__)<sp/>||<sp/>defined(MACOSX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>bPinGenericMemory<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Generic<sp/>Pinning<sp/>of<sp/>System<sp/>Paged<sp/>memory<sp/>is<sp/>not<sp/>currently<sp/>supported<sp/>on<sp/>Mac<sp/>OSX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>bPinGenericMemory<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Here<sp/>there<sp/>should<sp/>be<sp/>a<sp/>limit<sp/>for<sp/>cudar<sp/>version<sp/>less<sp/>than<sp/>4.000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bPinGenericMemory)</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;&gt;<sp/>Using<sp/>Generic<sp/>System<sp/>Paged<sp/>Memory<sp/>(malloc)\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;&gt;<sp/>Using<sp/>CUDA<sp/>Host<sp/>Allocated<sp/>(cudaHostAlloc)\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gpudevice<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudaGetDeviceProperties(&amp;deviceProp,<sp/>gpudevice);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!deviceProp.canMapHostMemory)</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Device<sp/>%d<sp/>does<sp/>not<sp/>support<sp/>mapping<sp/>CPU<sp/>host<sp/>memory!\n&quot;</highlight><highlight class="normal">,<sp/>gpudevice);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bPinGenericMemory<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes<sp/>=<sp/>nx<sp/>*<sp/>ny<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bPinGenericMemory)</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T*<sp/>a_UA<sp/>=<sp/>(T*)malloc(bytes<sp/>+<sp/>MEMORY_ALIGNMENT);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>need<sp/>to<sp/>ensure<sp/>memory<sp/>is<sp/>aligned<sp/>to<sp/>4K<sp/>(so<sp/>we<sp/>will<sp/>need<sp/>to<sp/>padd<sp/>memory<sp/>accordingly)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>(T*)ALIGN_UP(a_UA,<sp/>MEMORY_ALIGNMENT);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gpudevice<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CUDA_CHECK(cudaHostRegister(z,<sp/>bytes,<sp/>cudaHostRegisterMapped));</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//flags<sp/>=<sp/>cudaHostAllocMapped;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CUDA_CHECK(cudaHostAlloc((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)&amp;z,<sp/>bytes,<sp/>cudaHostAllocMapped));</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal">}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllocateMappedMemCPU&lt;int&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gpudevice,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*&amp;<sp/>z);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllocateMappedMemCPU&lt;float&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gpudevice,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*&amp;<sp/>z);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllocateMappedMemCPU&lt;double&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gpudevice,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*&amp;<sp/>z);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllocateMappedMemGPU(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gpudevice,<sp/>T*&amp;<sp/>z_g,<sp/>T*<sp/>z)</highlight></codeline>
<codeline lineno="454"><highlight class="normal">{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>CUDA_CHECK(cudaHostGetDevicePointer((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)&amp;z_g,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)z,<sp/>0));</highlight></codeline>
<codeline lineno="456"><highlight class="normal">}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllocateMappedMemGPU&lt;int&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gpudevice,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*&amp;<sp/>z_g,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>z);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllocateMappedMemGPU&lt;float&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gpudevice,</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*&amp;<sp/>z_g,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>z);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllocateMappedMemGPU&lt;double&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gpudevice,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*&amp;<sp/>z_g,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>z);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllocateGPU(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/>T*&amp;<sp/>z_g)</highlight></codeline>
<codeline lineno="463"><highlight class="normal">{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>CUDA_CHECK(cudaMalloc((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)&amp;<sp/>z_g,<sp/>nx<sp/>*<sp/>ny<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)));</highlight></codeline>
<codeline lineno="465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllocateGPU(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/>T*&amp;<sp/>zs,<sp/>T*&amp;<sp/>h,<sp/>T*&amp;<sp/>u,<sp/>T*&amp;<sp/>v)</highlight></codeline>
<codeline lineno="468"><highlight class="normal">{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateGPU(nx,<sp/>ny,<sp/>zs);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateGPU(nx,<sp/>ny,<sp/>h);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateGPU(nx,<sp/>ny,<sp/>u);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateGPU(nx,<sp/>ny,<sp/>v);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal">}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllocateGPU&lt;double&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*&amp;<sp/>zs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*&amp;<sp/>h,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*&amp;<sp/>u,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*&amp;<sp/>v);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllocateGPU&lt;float&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*&amp;<sp/>zs,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*&amp;<sp/>h,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*&amp;<sp/>u,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*&amp;<sp/>v);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllocateGPU&lt;int&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*&amp;<sp/>zs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*&amp;<sp/>h,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*&amp;<sp/>u,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*&amp;<sp/>v);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllocateGPU(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/>T*&amp;<sp/>zs,<sp/>T*&amp;<sp/>h,<sp/>T*&amp;<sp/>u,<sp/>T*&amp;<sp/>v,<sp/>T*&amp;<sp/>U,<sp/>T*&amp;<sp/>hU)</highlight></codeline>
<codeline lineno="481"><highlight class="normal">{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateGPU(nx,<sp/>ny,<sp/>zs);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateGPU(nx,<sp/>ny,<sp/>h);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateGPU(nx,<sp/>ny,<sp/>u);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateGPU(nx,<sp/>ny,<sp/>v);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateGPU(nx,<sp/>ny,<sp/>U);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateGPU(nx,<sp/>ny,<sp/>hU);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal">}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllocateGPU&lt;double&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*&amp;<sp/>zs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*&amp;<sp/>h,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*&amp;<sp/>u,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*&amp;<sp/>v,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*&amp;<sp/>U,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*&amp;<sp/>hU);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllocateGPU&lt;float&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*&amp;<sp/>zs,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*&amp;<sp/>h,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*&amp;<sp/>u,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*&amp;<sp/>v,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*&amp;<sp/>U,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*&amp;<sp/>hU);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllocateGPU&lt;int&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*&amp;<sp/>zs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*&amp;<sp/>h,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*&amp;<sp/>u,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*&amp;<sp/>v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*&amp;<sp/>U,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*&amp;<sp/>hU);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllocateGPU(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/><ref refid="structGradientsP" kindref="compound">GradientsP&lt;T&gt;</ref>&amp;<sp/>Grad)</highlight></codeline>
<codeline lineno="497"><highlight class="normal">{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateGPU(nx,<sp/>ny,<sp/>Grad.dhdx,<sp/>Grad.dzsdx,<sp/>Grad.dudx,<sp/>Grad.dvdx);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateGPU(nx,<sp/>ny,<sp/>Grad.dhdy,<sp/>Grad.dzsdy,<sp/>Grad.dudy,<sp/>Grad.dvdy);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateGPU(nx,<sp/>ny,<sp/>Grad.dzbdy);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateGPU(nx,<sp/>ny,<sp/>Grad.dzbdx);</highlight></codeline>
<codeline lineno="502"><highlight class="normal">}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllocateGPU&lt;float&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/><ref refid="structGradientsP" kindref="compound">GradientsP&lt;float&gt;</ref>&amp;<sp/>Grad);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllocateGPU&lt;double&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny,<sp/><ref refid="structGradientsP" kindref="compound">GradientsP&lt;double&gt;</ref>&amp;<sp/>Grad);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllocateGPU(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/><ref refid="structEvolvingP" kindref="compound">EvolvingP&lt;T&gt;</ref>&amp;<sp/>Ev)</highlight></codeline>
<codeline lineno="507"><highlight class="normal">{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateGPU(nblk,<sp/>blksize,<sp/>Ev.h,<sp/>Ev.zs,<sp/>Ev.u,<sp/>Ev.v);</highlight></codeline>
<codeline lineno="509"><highlight class="normal">}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllocateGPU(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/><ref refid="structEvolvingP__M" kindref="compound">EvolvingP_M&lt;T&gt;</ref>&amp;<sp/>Ev)</highlight></codeline>
<codeline lineno="512"><highlight class="normal">{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateGPU(nblk,<sp/>blksize,<sp/>Ev.h,<sp/>Ev.zs,<sp/>Ev.u,<sp/>Ev.v,<sp/>Ev.U,<sp/>Ev.hU);</highlight></codeline>
<codeline lineno="514"><highlight class="normal">}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllocateGPU(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/><ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref>&amp;<sp/>XModel)</highlight></codeline>
<codeline lineno="518"><highlight class="normal">{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>blocks<sp/>data<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateGPU(nblk,<sp/>blksize,<sp/>XModel.evolv);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateGPU(nblk,<sp/>blksize,<sp/>XModel.evolv_o);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateGPU(nblk,<sp/>blksize,<sp/>XModel.grad);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.engine<sp/>==<sp/>5)</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateGPU(nblk,<sp/>blksize,<sp/>XModel.fluxml.Fux,<sp/>XModel.fluxml.Fvy,<sp/>XModel.fluxml.hau,<sp/>XModel.fluxml.hav);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateGPU(nblk,<sp/>blksize,<sp/>XModel.fluxml.hfu,<sp/>XModel.fluxml.hfv,<sp/>XModel.fluxml.hu,<sp/>XModel.fluxml.hv);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateGPU(nblk,<sp/>blksize,<sp/>XModel.fluxml.Fuy);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateGPU(nblk,<sp/>blksize,<sp/>XModel.fluxml.Fvx);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateGPU(nblk,<sp/>blksize,<sp/>XModel.flux.Fhu,<sp/>XModel.flux.Fhv,<sp/>XModel.flux.Fqux,<sp/>XModel.flux.Fquy);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateGPU(nblk,<sp/>blksize,<sp/>XModel.flux.Fqvx,<sp/>XModel.flux.Fqvy,<sp/>XModel.flux.Su,<sp/>XModel.flux.Sv);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateGPU(nblk,<sp/>blksize,<sp/>XModel.zb,<sp/>XModel.adv.dh,<sp/>XModel.adv.dhu,<sp/>XModel.adv.dhv);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateGPU(nblk,<sp/>blksize,<sp/>XModel.cf,<sp/>XModel.time.arrmax,<sp/>XModel.time.arrmin,<sp/>XModel.time.dtmax);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Allocate<sp/>block<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateGPU(nblk,<sp/>1,<sp/>XModel.blocks.active);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateGPU(nblk,<sp/>blksize,<sp/>XModel.blocks.activeCell);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateGPU(nblk,<sp/>1,<sp/>XModel.blocks.level);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateGPU(nblk,<sp/>1,<sp/>XModel.blocks.BotLeft,<sp/>XModel.blocks.BotRight,<sp/>XModel.blocks.LeftBot,<sp/>XModel.blocks.LeftTop);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateGPU(nblk,<sp/>1,<sp/>XModel.blocks.RightBot,<sp/>XModel.blocks.RightTop,<sp/>XModel.blocks.TopLeft,<sp/>XModel.blocks.TopRight);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateGPU(nblk,<sp/>1,<sp/>XModel.blocks.xo);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateGPU(nblk,<sp/>1,<sp/>XModel.blocks.yo);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>no<sp/>adatptation<sp/>ignore<sp/>this!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="555"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(XParam.maxlevel<sp/>!=<sp/>XParam.minlevel)</highlight></codeline>
<codeline lineno="556"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateGPU(nblk,<sp/>1,<sp/>XModel.adapt.availblk,<sp/>XModel.adapt.csumblk,<sp/>XModel.adapt.invactive,<sp/>XModel.adapt.newlevel);</highlight></codeline>
<codeline lineno="558"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateGPU(nblk,<sp/>1,<sp/>XModel.adapt.coarsen);</highlight></codeline>
<codeline lineno="559"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateGPU(nblk,<sp/>1,<sp/>XModel.adapt.refine);</highlight></codeline>
<codeline lineno="560"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="561"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.atmpforcing)</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateGPU(nblk,<sp/>blksize,<sp/>XModel.Patm);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateGPU(nblk,<sp/>blksize,<sp/>XModel.datmpdx);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateGPU(nblk,<sp/>blksize,<sp/>XModel.datmpdy);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.infiltration)</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateGPU(nblk,<sp/>blksize,<sp/>XModel.il);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateGPU(nblk,<sp/>blksize,<sp/>XModel.cl);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateGPU(nblk,<sp/>blksize,<sp/>XModel.hgw);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.outmax)</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateGPU(nblk,<sp/>blksize,<sp/>XModel.evmax);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.outmean)</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateGPU(nblk,<sp/>blksize,<sp/>XModel.evmean);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.outtwet)</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateGPU(nblk,<sp/>blksize,<sp/>XModel.wettime);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*if<sp/>(XParam.outvort)</highlight></codeline>
<codeline lineno="594"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="595"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateGPU(nblk,<sp/>blksize,<sp/>XModel.vort);</highlight></codeline>
<codeline lineno="596"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="597"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(XParam.outU)</highlight></codeline>
<codeline lineno="598"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateGPU(nblk,<sp/>blksize,<sp/>XModel.U);</highlight></codeline>
<codeline lineno="600"><highlight class="comment"><sp/><sp/><sp/><sp/>}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.TSnodesout.size()<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Timeseries<sp/>output<sp/>temporary<sp/>storage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>storage<sp/>=<sp/>XParam.maxTSstorage;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateGPU(storage,<sp/>1,<sp/>XModel.TSstore);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>textures<sp/>for<sp/>boundary<sp/>and<sp/>forcing<sp/>is<sp/>done<sp/>in<sp/>init<sp/>forcing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal">}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllocateGPU&lt;float&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/><ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structModel" kindref="compound">Model&lt;float&gt;</ref>&amp;<sp/>XModel);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllocateGPU&lt;double&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nblk,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blksize,<sp/><ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structModel" kindref="compound">Model&lt;double&gt;</ref>&amp;<sp/>XModel);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/MemManagement.cu"/>
  </compounddef>
</doxygen>

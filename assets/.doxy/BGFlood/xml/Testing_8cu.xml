<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="Testing_8cu" kind="file" language="C++">
    <compoundname>Testing.cu</compoundname>
    <includes refid="Testing_8h" local="yes">Testing.h</includes>
    <incdepgraph>
      <node id="58">
        <label>AdaptCriteria.h</label>
        <link refid="AdaptCriteria_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>Adaptation.h</label>
        <link refid="Adaptation_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>Advection.h</label>
        <link refid="Advection_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>Arrays.h</label>
        <link refid="Arrays_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>Boundary.h</label>
        <link refid="Boundary_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>ConserveElevation.h</label>
        <link refid="ConserveElevation_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>FlowCPU.h</label>
        <link refid="FlowCPU_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>FlowGPU.h</label>
        <link refid="FlowGPU_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>FlowMLGPU.h</label>
        <link refid="FlowMLGPU_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>Forcing.h</label>
        <link refid="Forcing_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>Friction.h</label>
        <link refid="Friction_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>General.h</label>
        <link refid="General_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>Gradients.h</label>
        <link refid="Gradients_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>GridManip.h</label>
        <link refid="GridManip_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>Halo.h</label>
        <link refid="Halo_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>InitEvolv.h</label>
        <link refid="InitEvolv_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>InitialConditions.h</label>
        <link refid="InitialConditions_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>Input.h</label>
        <link refid="Input_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>Kurganov.h</label>
        <link refid="Kurganov_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>Mainloop.h</label>
        <link refid="Mainloop_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>Meanmax.h</label>
        <link refid="Meanmax_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>MemManagement.h</label>
        <link refid="MemManagement_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>Mesh.h</label>
        <link refid="Mesh_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>Multilayer.h</label>
        <link refid="Multilayer_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>Param.h</label>
        <link refid="Param_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>Poly.h</label>
        <link refid="Poly_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>ReadForcing.h</label>
        <link refid="ReadForcing_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>ReadInput.h</label>
        <link refid="ReadInput_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>Read_netcdf.h</label>
        <link refid="Read__netcdf_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>Reimann.h</label>
        <link refid="Reimann_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>Setup_GPU.h</label>
        <link refid="Setup__GPU_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>Spherical.h</label>
        <link refid="Spherical_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/Testing.cu</label>
        <link refid="Testing_8cu"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Testing.h</label>
        <link refid="Testing_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>Updateforcing.h</label>
        <link refid="Updateforcing_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>Util_CPU.h</label>
        <link refid="Util__CPU_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>Write_netcdf.h</label>
        <link refid="Write__netcdf_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>Write_txtlog.h</label>
        <link refid="Write__txtlog_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>utctime.h</label>
        <link refid="utctime_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>algorithm</label>
      </node>
      <node id="10">
        <label>chrono</label>
      </node>
      <node id="9">
        <label>cmath</label>
      </node>
      <node id="11">
        <label>ctime</label>
      </node>
      <node id="4">
        <label>cuda_runtime.h</label>
      </node>
      <node id="5">
        <label>device_launch_parameters.h</label>
      </node>
      <node id="19">
        <label>fstream</label>
      </node>
      <node id="18">
        <label>iomanip</label>
      </node>
      <node id="17">
        <label>iostream</label>
      </node>
      <node id="21">
        <label>limits</label>
      </node>
      <node id="14">
        <label>map</label>
      </node>
      <node id="8">
        <label>math.h</label>
      </node>
      <node id="15">
        <label>netcdf.h</label>
      </node>
      <node id="20">
        <label>sstream</label>
      </node>
      <node id="6">
        <label>stdio.h</label>
      </node>
      <node id="7">
        <label>stdlib.h</label>
      </node>
      <node id="12">
        <label>string</label>
      </node>
      <node id="22">
        <label>thread</label>
      </node>
      <node id="13">
        <label>vector</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="Testing_8cu_1a1803abe24ad2daba8d11e5e46c783762" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Testing</definition>
        <argsstring>(Param XParam, Forcing&lt; float &gt; XForcing, Model&lt; T &gt; XModel, Model&lt; T &gt; XModel_g)</argsstring>
        <name>Testing</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structForcing" kindref="compound">Forcing</ref>&lt; float &gt;</type>
          <declname>XForcing</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; T &gt;</type>
          <declname>XModel</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; T &gt;</type>
          <declname>XModel_g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="35" column="18" bodyfile="src/Testing.cu" bodystart="35" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a0e4dc3171209811b6374274fa2c612d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template bool</type>
        <definition>template bool Testing&lt; float &gt;</definition>
        <argsstring>(Param XParam, Forcing&lt; float &gt; XForcing, Model&lt; float &gt; XModel, Model&lt; float &gt; XModel_g)</argsstring>
        <name>Testing&lt; float &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structForcing" kindref="compound">Forcing</ref>&lt; float &gt;</type>
          <declname>XForcing</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; float &gt;</type>
          <declname>XModel</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; float &gt;</type>
          <declname>XModel_g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="394" column="10" declfile="src/Testing.cu" declline="394" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1ad67958f394bbd08c8782f376fffcac21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template bool</type>
        <definition>template bool Testing&lt; double &gt;</definition>
        <argsstring>(Param XParam, Forcing&lt; float &gt; XForcing, Model&lt; double &gt; XModel, Model&lt; double &gt; XModel_g)</argsstring>
        <name>Testing&lt; double &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structForcing" kindref="compound">Forcing</ref>&lt; float &gt;</type>
          <declname>XForcing</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; double &gt;</type>
          <declname>XModel</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; double &gt;</type>
          <declname>XModel_g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="395" column="10" declfile="src/Testing.cu" declline="395" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1ae86d66a5e761a12f3957ee5927c690bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool GaussianHumptest</definition>
        <argsstring>(T zsnit, int gpu, bool compare)</argsstring>
        <name>GaussianHumptest</name>
        <param>
          <type>T</type>
          <declname>zsnit</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gpu</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>compare</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function tests the full hydrodynamics model and compares the results with pre-conmputed (Hard wired) values The function creates it own model setup and mesh independantly to what the user might want to do The setup consist of a centrally located gaussian hump radiating away The test stops at an arbitrary time to compare with 8 values extracted from a identical run in basilisk This function also compares the result of the GPU and CPU code (until they diverge) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="406" column="18" bodyfile="src/Testing.cu" bodystart="406" bodyend="679"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a0d0789c633d015e65e01afef05a5e1fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template bool</type>
        <definition>template bool GaussianHumptest&lt; float &gt;</definition>
        <argsstring>(float zsnit, int gpu, bool compare)</argsstring>
        <name>GaussianHumptest&lt; float &gt;</name>
        <param>
          <type>float</type>
          <declname>zsnit</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gpu</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>compare</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="680" column="10" declfile="src/Testing.cu" declline="680" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a229963ffd901c799501206de5431f6bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template bool</type>
        <definition>template bool GaussianHumptest&lt; double &gt;</definition>
        <argsstring>(double zsnit, int gpu, bool compare)</argsstring>
        <name>GaussianHumptest&lt; double &gt;</name>
        <param>
          <type>double</type>
          <declname>zsnit</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gpu</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>compare</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="681" column="10" declfile="src/Testing.cu" declline="681" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a80d8f8532ece9c965802d60aa031d46d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Rivertest</definition>
        <argsstring>(T zsnit, int gpu)</argsstring>
        <name>Rivertest</name>
        <param>
          <type>T</type>
          <declname>zsnit</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function tests the mass conservation of the vertical injection (used for rivers) The function creates it own model setup and mesh independantly to what the user might want to do This starts with a initial water level (zsnit=0 is dry) and runs for 0.1s before comparing results with zsnit=0.1 that is approx 20 steps </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="690" column="18" bodyfile="src/Testing.cu" bodystart="690" bodyend="912"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a11e18a2e6852e7e150c6130709f3bd44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template bool</type>
        <definition>template bool Rivertest&lt; float &gt;</definition>
        <argsstring>(float zsnit, int gpu)</argsstring>
        <name>Rivertest&lt; float &gt;</name>
        <param>
          <type>float</type>
          <declname>zsnit</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="913" column="10" declfile="src/Testing.cu" declline="913" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a7b29b74b9c2c3f734f7c16633593f5f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template bool</type>
        <definition>template bool Rivertest&lt; double &gt;</definition>
        <argsstring>(double zsnit, int gpu)</argsstring>
        <name>Rivertest&lt; double &gt;</name>
        <param>
          <type>double</type>
          <declname>zsnit</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="914" column="10" declfile="src/Testing.cu" declline="914" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a7b6329079d1c7902af71dd17677dae15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool MassConserveSteepSlope</definition>
        <argsstring>(T zsnit, int gpu)</argsstring>
        <name>MassConserveSteepSlope</name>
        <param>
          <type>T</type>
          <declname>zsnit</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function tests the mass conservation of the vertical injection (used for rivers) The function creates it own model setup and mesh independantly to what the user might want to do This starts with a initial water level (zsnit=0 is dry) and runs for 0.1s before comparing results with zsnit=0.1 that is approx 20 steps </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="925" column="18" bodyfile="src/Testing.cu" bodystart="925" bodyend="1171"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a4e49cf520a5bb2d07834fcdee685d027" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template bool</type>
        <definition>template bool MassConserveSteepSlope&lt; float &gt;</definition>
        <argsstring>(float zsnit, int gpu)</argsstring>
        <name>MassConserveSteepSlope&lt; float &gt;</name>
        <param>
          <type>float</type>
          <declname>zsnit</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="1172" column="10" declfile="src/Testing.cu" declline="1172" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1ad0926ed025ca9b0545a86c9357a3de3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template bool</type>
        <definition>template bool MassConserveSteepSlope&lt; double &gt;</definition>
        <argsstring>(double zsnit, int gpu)</argsstring>
        <name>MassConserveSteepSlope&lt; double &gt;</name>
        <param>
          <type>double</type>
          <declname>zsnit</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="1173" column="10" declfile="src/Testing.cu" declline="1173" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1ab745b759b52751f7bf75276b74fd658d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>T reductiontest</definition>
        <argsstring>(Param XParam, Model&lt; T &gt; XModel, Model&lt; T &gt; XModel_g)</argsstring>
        <name>reductiontest</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; T &gt;</type>
          <declname>XModel</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; T &gt;</type>
          <declname>XModel_g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test the algorithm for reducing the global time step on the user grid layout </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="1180" column="18" bodyfile="src/Testing.cu" bodystart="1180" bodyend="1268"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a3b9fa3d91b633d85d2008066642c1c14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template bool</type>
        <definition>template bool reductiontest&lt; float &gt;</definition>
        <argsstring>(Param XParam, Model&lt; float &gt; XModel, Model&lt; float &gt; XModel_g)</argsstring>
        <name>reductiontest&lt; float &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; float &gt;</type>
          <declname>XModel</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; float &gt;</type>
          <declname>XModel_g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="1269" column="10" declfile="src/Testing.cu" declline="1269" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1ad9d00c5af2db773ce3d66325e64cf917" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template bool</type>
        <definition>template bool reductiontest&lt; double &gt;</definition>
        <argsstring>(Param XParam, Model&lt; double &gt; XModel, Model&lt; double &gt; XModel_g)</argsstring>
        <name>reductiontest&lt; double &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; double &gt;</type>
          <declname>XModel</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; double &gt;</type>
          <declname>XModel_g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="1270" column="10" declfile="src/Testing.cu" declline="1270" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a4eeb0564db7786844d7a71ca36d463ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CPUGPUtest</definition>
        <argsstring>(Param XParam, Model&lt; T &gt; XModel, Model&lt; T &gt; XModel_g)</argsstring>
        <name>CPUGPUtest</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; T &gt;</type>
          <declname>XModel</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; T &gt;</type>
          <declname>XModel_g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="1276" column="17" bodyfile="src/Testing.cu" bodystart="1276" bodyend="1535"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a8a8622ffcab39fee02cae7640afdb939" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T ValleyBathy</definition>
        <argsstring>(T x, T y, T slope, T center)</argsstring>
        <name>ValleyBathy</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <param>
          <type>T</type>
          <declname>y</declname>
        </param>
        <param>
          <type>T</type>
          <declname>slope</declname>
        </param>
        <param>
          <type>T</type>
          <declname>center</declname>
        </param>
        <briefdescription>
<para>create V shape Valley basin </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a simple V shape Valley basin </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="1544" column="15" bodyfile="src/Testing.cu" bodystart="1544" bodyend="1554"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a104edf84a62f0b9fe895a48abbc1d3bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T ThackerBathy</definition>
        <argsstring>(T x, T y, T L, T D)</argsstring>
        <name>ThackerBathy</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <param>
          <type>T</type>
          <declname>y</declname>
        </param>
        <param>
          <type>T</type>
          <declname>L</declname>
        </param>
        <param>
          <type>T</type>
          <declname>D</declname>
        </param>
        <briefdescription>
<para>create a parabolic bassin </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a parabolic bassin. The function returns a single value of the bassin</para>
<para>Borrowed from Buttinger et al. 2019.</para>
<sect3 id="Testing_8cu_1autotoc_md44">
<title>Reference</title>
<para>Buttinger-Kreuzhuber, A., Horváth, Z., Noelle, S., Blöschl, G., and Waser, J.: A fast second-order shallow water scheme on two-dimensional structured grids over abrupt topography, Advances in water resources, 127, 89–108, 2019. </para>
</sect3>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="1568" column="15" bodyfile="src/Testing.cu" bodystart="1568" bodyend="1576"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a8f16cda74bcdd1db8fd67423f999572c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool ThackerLakeAtRest</definition>
        <argsstring>(Param XParam, T zsinit)</argsstring>
        <name>ThackerLakeAtRest</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type>T</type>
          <declname>zsinit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="1590" column="18" bodyfile="src/Testing.cu" bodystart="1590" bodyend="1688"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a0a3b7ab6b78d6ef9743bbca6f98890ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template bool</type>
        <definition>template bool ThackerLakeAtRest&lt; float &gt;</definition>
        <argsstring>(Param XParam, float zsinit)</argsstring>
        <name>ThackerLakeAtRest&lt; float &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type>float</type>
          <declname>zsinit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="1689" column="10" declfile="src/Testing.cu" declline="1689" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a8df291a6309f0ebe605531e03761b531" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template bool</type>
        <definition>template bool ThackerLakeAtRest&lt; double &gt;</definition>
        <argsstring>(Param XParam, double zsinit)</argsstring>
        <name>ThackerLakeAtRest&lt; double &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type>double</type>
          <declname>zsinit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="1690" column="10" declfile="src/Testing.cu" declline="1690" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a19c6eaf6d9833758df860bd56d1dce2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool RiverVolumeAdapt</definition>
        <argsstring>(Param XParam, T maxslope)</argsstring>
        <name>RiverVolumeAdapt</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type>T</type>
          <declname>maxslope</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="1705" column="18" bodyfile="src/Testing.cu" bodystart="1705" bodyend="1807"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a1d4da6a9e01a348c4ef9ea90e45c6f53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool RiverVolumeAdapt</definition>
        <argsstring>(Param XParam, T slope, bool bottop, bool flip)</argsstring>
        <name>RiverVolumeAdapt</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type>T</type>
          <declname>slope</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bottop</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>flip</declname>
        </param>
        <briefdescription>
<para>Simulate a river flowing in a steep valley and heck the Volume conservation. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a dry steep valley topography to a given level and run the model for a while and checks that the Volume matches the theory.</para>
<para>The function can test the water volume for 4 scenario each time:<itemizedlist>
<listitem><para>left to right: bottop=false &amp; flip=true;</para>
</listitem><listitem><para>right to left: bottop=false &amp; flip=false;</para>
</listitem><listitem><para>bottom to top: bottop=true &amp; flip=true;</para>
</listitem><listitem><para>top to bottom: bottop=true &amp; flip=false;</para>
</listitem></itemizedlist>
</para>
<para>The function inherits the adaptation set in XParam so needs to be rerun to accnout for the different scenarios:<itemizedlist>
<listitem><para>uniform level</para>
</listitem><listitem><para>flow from coasrse to fine</para>
</listitem><listitem><para>flow from fine to coarse This is done in the higher level wrapping function </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="1828" column="18" bodyfile="src/Testing.cu" bodystart="1828" bodyend="1950"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a1f58fd96fa0d9473ed0c863d5b789485" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool testboundaries</definition>
        <argsstring>(Param XParam, T maxslope)</argsstring>
        <name>testboundaries</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type>T</type>
          <declname>maxslope</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="1961" column="18" bodyfile="src/Testing.cu" bodystart="1961" bodyend="2063"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a8d27dff394b9c80aca43b4ca0ee56fcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool RiverOnBoundary</definition>
        <argsstring>(Param XParam, T slope, int Dir, int Bound_type)</argsstring>
        <name>RiverOnBoundary</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type>T</type>
          <declname>slope</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Dir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Bound_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="2080" column="18" bodyfile="src/Testing.cu" bodystart="2080" bodyend="2328"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1aec021291bf8c54e8632e09db926d5abb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool LakeAtRest</definition>
        <argsstring>(Param XParam, Model&lt; T &gt; XModel)</argsstring>
        <name>LakeAtRest</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; T &gt;</type>
          <declname>XModel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function simulates the first predictive step and check whether the lake at rest is preserved otherwise it prints out to screen the cells (and neighbour) where the test fails </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="2336" column="18" bodyfile="src/Testing.cu" bodystart="2336" bodyend="2472"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a984ce53c1331a99e98ad625f552f02d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testButtingerX</definition>
        <argsstring>(Param XParam, int ib, int ix, int iy, Model&lt; T &gt; XModel)</argsstring>
        <name>testButtingerX</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ib</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ix</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iy</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; T &gt;</type>
          <declname>XModel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function goes through the Buttinger scheme but instead of the normal output just prints all teh usefull values This function is/was used in the lake-at-rest verification</para>
<para>See also: void testkurganovX(Param XParam, int ib, int ix, int iy, Model&lt;T&gt; XModel) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="2482" column="18" bodyfile="src/Testing.cu" bodystart="2482" bodyend="2622"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a5f1ffa1a9b2e46bf2f4babc5c4f9c4fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testkurganovX</definition>
        <argsstring>(Param XParam, int ib, int ix, int iy, Model&lt; T &gt; XModel)</argsstring>
        <name>testkurganovX</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ib</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ix</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iy</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; T &gt;</type>
          <declname>XModel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function goes through the Kurganov scheme but instead of the normal output just prints all teh usefull values This function is/was used in the lake-at-rest verification </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="2630" column="18" bodyfile="src/Testing.cu" bodystart="2630" bodyend="2728"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a31b092b81a7e3ff99df93441e5d0bb62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Raintest</definition>
        <argsstring>(T zsnit, int gpu, float alpha, int engine)</argsstring>
        <name>Raintest</name>
        <param>
          <type>T</type>
          <declname>zsnit</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gpu</declname>
        </param>
        <param>
          <type>float</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>engine</declname>
          <defname>engineid</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function tests the mass conservation of the spacial injection (used to model rain on grid) The function creates its own model setup and mesh independantly to what the user inputs. This starts with a initial water level (zsnit=0.0 is dry) and runs for 0.1s before comparing results with zsnit=0.1 that is approx 20 steps </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="2737" column="18" bodyfile="src/Testing.cu" bodystart="2737" bodyend="2889"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a6a029027bd2060a3ecad9f8d09807962" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Raintestinput</definition>
        <argsstring>(int gpu)</argsstring>
        <name>Raintestinput</name>
        <param>
          <type>int</type>
          <declname>gpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function tests the different inputs for rain forcing. This test is based on the paper Aureli2020, the 3 slopes test with regional rain. The experiment has been presented in Iwagaki1955. The first test compares a time varying rain input using a uniform time serie forcing and a time varying 2D field (with same value). The second test check the 3D rain forcing (comparing it to expected values). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="2901" column="6" bodyfile="src/Testing.cu" bodystart="2901" bodyend="2956"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1aafffbc6c2764d5670004a43ffa36be2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt; float &gt; Raintestmap</definition>
        <argsstring>(int gpu, int dimf, T zinit)</argsstring>
        <name>Raintestmap</name>
        <param>
          <type>int</type>
          <declname>gpu</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dimf</declname>
        </param>
        <param>
          <type>T</type>
          <declname>zinit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\fnstdvector&lt;float&gt; Raintestmap(int gpu, int dimf, T zinit)</para>
<para>This function return the flux at the bottom of the 3 part slope for different types of rain forcings using the test case based on Iwagaki1955 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="2963" column="25" bodyfile="src/Testing.cu" bodystart="2963" bodyend="3349"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a5f74209d99d446bf1a5c75380fa91d7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::vector&lt; float &gt;</type>
        <definition>template std::vector&lt; float &gt; Raintestmap&lt; float &gt;</definition>
        <argsstring>(int gpu, int dimf, float Zsinit)</argsstring>
        <name>Raintestmap&lt; float &gt;</name>
        <param>
          <type>int</type>
          <declname>gpu</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dimf</declname>
        </param>
        <param>
          <type>float</type>
          <declname>Zsinit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="3350" column="1" declfile="src/Testing.cu" declline="3350" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a3b9c5282fd8c227cdf7694127e7c3753" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::vector&lt; float &gt;</type>
        <definition>template std::vector&lt; float &gt; Raintestmap&lt; double &gt;</definition>
        <argsstring>(int gpu, int dimf, double Zsinit)</argsstring>
        <name>Raintestmap&lt; double &gt;</name>
        <param>
          <type>int</type>
          <declname>gpu</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dimf</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Zsinit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="3351" column="1" declfile="src/Testing.cu" declline="3351" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a2a54f4be23d52aeb3bdc626953d95c7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool testzoneOutDef ZoneOutputTest</definition>
        <argsstring>(int nzones, T zsinit)</argsstring>
        <name>ZoneOutputTest</name>
        <param>
          <type>int</type>
          <declname>nzones</declname>
        </param>
        <param>
          <type>T</type>
          <declname>zsinit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function test the zoned output for a basic configuration</para>
<para>This function test the spped and accuracy of a new gradient function gradient are only calculated for zb but assigned to different gradient variable for storage </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="3358" column="18" bodyfile="src/Testing.cu" bodystart="3358" bodyend="3573"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a2cd383fdb7b4673dedd9695094a1c050" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template bool</type>
        <definition>template bool ZoneOutputTest&lt; float &gt;</definition>
        <argsstring>(int nzones, float zsinit)</argsstring>
        <name>ZoneOutputTest&lt; float &gt;</name>
        <param>
          <type>int</type>
          <declname>nzones</declname>
        </param>
        <param>
          <type>float</type>
          <declname>zsinit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="3574" column="10" declfile="src/Testing.cu" declline="3574" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a1b748ece19a6093b97227fd127659619" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template bool</type>
        <definition>template bool ZoneOutputTest&lt; double &gt;</definition>
        <argsstring>(int nzones, double zsinit)</argsstring>
        <name>ZoneOutputTest&lt; double &gt;</name>
        <param>
          <type>int</type>
          <declname>nzones</declname>
        </param>
        <param>
          <type>double</type>
          <declname>zsinit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="3575" column="10" declfile="src/Testing.cu" declline="3575" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a1db3e11d21ac6d41e328ec46be538a41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Rainlossestest</definition>
        <argsstring>(T zsinit, int gpu, float alpha)</argsstring>
        <name>Rainlossestest</name>
        <param>
          <type>T</type>
          <declname>zsinit</declname>
          <defname>zsnit</defname>
        </param>
        <param>
          <type>int</type>
          <declname>gpu</declname>
        </param>
        <param>
          <type>float</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function tests the Initial Losses and Continuous Losses implementation a plain domain, under constant rain. The function creates its own model setup and mesh independantly to what the user inputs. This starts with a initial water level (zsinit=0.0 is dry) and runs for 1s comparing results every 0.1s (that is approx 20 steps) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="3586" column="18" bodyfile="src/Testing.cu" bodystart="3586" bodyend="3805"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1ac00b715422e6178892c08f88324a3310" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>void TestGradientSpeed</definition>
        <argsstring>(Param XParam, Model&lt; T &gt; XModel, Model&lt; T &gt; XModel_g)</argsstring>
        <name>TestGradientSpeed</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; T &gt;</type>
          <declname>XModel</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; T &gt;</type>
          <declname>XModel_g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function fill an array with random values (0 - 1)</para>
<para>This function test the spped and accuracy of a new gradient function gradient are only calculated for zb but assigned to different gradient variable for storage </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="3814" column="17" bodyfile="src/Testing.cu" bodystart="3814" bodyend="4058"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a6ce4c15e1755fc3b537e6dc7ef7401c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool TestHaloSpeed</definition>
        <argsstring>(Param XParam, Model&lt; T &gt; XModel, Model&lt; T &gt; XModel_g)</argsstring>
        <name>TestHaloSpeed</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; T &gt;</type>
          <declname>XModel</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; T &gt;</type>
          <declname>XModel_g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="4065" column="18" bodyfile="src/Testing.cu" bodystart="4065" bodyend="4146"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a4777c15ad455f8f7360c0bcb6d04fdeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int TestInstability</definition>
        <argsstring>(Param XParam, Model&lt; T &gt; XModel, Model&lt; T &gt; XModel_g)</argsstring>
        <name>TestInstability</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; T &gt;</type>
          <declname>XModel</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; T &gt;</type>
          <declname>XModel_g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="4148" column="17" bodyfile="src/Testing.cu" bodystart="4148" bodyend="4272"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a7880b9adda370fd426fd81e6738ce3db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool TestMultiBathyRough</definition>
        <argsstring>(int gpu, T ref, int scenario)</argsstring>
        <name>TestMultiBathyRough</name>
        <param>
          <type>int</type>
          <declname>gpu</declname>
        </param>
        <param>
          <type>T</type>
          <declname>ref</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scenario</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="4285" column="18" bodyfile="src/Testing.cu" bodystart="4285" bodyend="4555"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1ad474adad94a69be09516b5f538fc460a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool TestFlexibleOutputTimes</definition>
        <argsstring>(int gpu, T ref, int scenario)</argsstring>
        <name>TestFlexibleOutputTimes</name>
        <param>
          <type>int</type>
          <declname>gpu</declname>
        </param>
        <param>
          <type>T</type>
          <declname>ref</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scenario</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="4567" column="18" bodyfile="src/Testing.cu" bodystart="4567" bodyend="4671"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a7db6b6038875f9863ec74a2a56f8bc74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void TestFirsthalfstep</definition>
        <argsstring>(Param XParam, Forcing&lt; float &gt; XForcing, Model&lt; T &gt; XModel, Model&lt; T &gt; XModel_g)</argsstring>
        <name>TestFirsthalfstep</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structForcing" kindref="compound">Forcing</ref>&lt; float &gt;</type>
          <declname>XForcing</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; T &gt;</type>
          <declname>XModel</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; T &gt;</type>
          <declname>XModel_g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="4678" column="18" bodyfile="src/Testing.cu" bodystart="4678" bodyend="4739"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a0daf4e3de07a3e351dc2ffe82f59fbe4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Testzbinit</definition>
        <argsstring>(Param XParam, Forcing&lt; float &gt; XForcing, Model&lt; T &gt; XModel, Model&lt; T &gt; XModel_g)</argsstring>
        <name>Testzbinit</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structForcing" kindref="compound">Forcing</ref>&lt; float &gt;</type>
          <declname>XForcing</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; T &gt;</type>
          <declname>XModel</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; T &gt;</type>
          <declname>XModel_g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="4742" column="18" bodyfile="src/Testing.cu" bodystart="4742" bodyend="4811"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1ad1b8eecc043010440cced2f0eede0587" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int TestAIObnd</definition>
        <argsstring>(Param XParam, Model&lt; T &gt; XModel, Model&lt; T &gt; XModel_g, bool bottop, bool flip, bool withaoi)</argsstring>
        <name>TestAIObnd</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; T &gt;</type>
          <declname>XModel</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; T &gt;</type>
          <declname>XModel_g</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bottop</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>flip</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>withaoi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="4814" column="17" bodyfile="src/Testing.cu" bodystart="4814" bodyend="5010"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a19ed894901f682cb0f0873c2d3faba55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>__global__ void</type>
        <definition>__global__ void vectoroffsetGPU</definition>
        <argsstring>(int nx, T offset, T *z)</argsstring>
        <name>vectoroffsetGPU</name>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>T</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="5013" column="29" bodyfile="src/Testing.cu" bodystart="5013" bodyend="5021"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a1e4ecf27251618cfdde9c887083e544b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int TestPinMem</definition>
        <argsstring>(Param XParam, Model&lt; T &gt; XModel, Model&lt; T &gt; XModel_g)</argsstring>
        <name>TestPinMem</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; T &gt;</type>
          <declname>XModel</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; T &gt;</type>
          <declname>XModel_g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="5023" column="17" bodyfile="src/Testing.cu" bodystart="5023" bodyend="5091"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a343c85b153c1c62fbd0ec9b61899d932" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template int</type>
        <definition>template int TestPinMem&lt; float &gt;</definition>
        <argsstring>(Param XParam, Model&lt; float &gt; XModel, Model&lt; float &gt; XModel_g)</argsstring>
        <name>TestPinMem&lt; float &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; float &gt;</type>
          <declname>XModel</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; float &gt;</type>
          <declname>XModel_g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="5092" column="10" declfile="src/Testing.cu" declline="5092" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1ab0d9887e7bdfe80002ec55dfeda0e923" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template int</type>
        <definition>template int TestPinMem&lt; double &gt;</definition>
        <argsstring>(Param XParam, Model&lt; double &gt; XModel, Model&lt; double &gt; XModel_g)</argsstring>
        <name>TestPinMem&lt; double &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; double &gt;</type>
          <declname>XModel</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; double &gt;</type>
          <declname>XModel_g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="5093" column="10" declfile="src/Testing.cu" declline="5093" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1ae1ebd603e7ae1c21f5f722306ebd02ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structForcing" kindref="compound">Forcing</ref>&lt; float &gt;</type>
        <definition>Forcing&lt; float &gt; MakValleyBathy</definition>
        <argsstring>(Param XParam, T slope, bool bottop, bool flip)</argsstring>
        <name>MakValleyBathy</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type>T</type>
          <declname>slope</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bottop</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>flip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="5098" column="21" bodyfile="src/Testing.cu" bodystart="5098" bodyend="5211"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a6a20315559d37a26b66581ccf2775088" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void alloc_init2Darray</definition>
        <argsstring>(float **arr, int NX, int NY)</argsstring>
        <name>alloc_init2Darray</name>
        <param>
          <type>float **</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>NX</declname>
        </param>
        <param>
          <type>int</type>
          <declname>NY</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function allocates and fills a 2D array with zero values </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="5219" column="6" bodyfile="src/Testing.cu" bodystart="5219" bodyend="5238"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a62ff3fe0c904942bbc562e96f549f1f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init3Darray</definition>
        <argsstring>(float ***arr, int rows, int cols, int depths)</argsstring>
        <name>init3Darray</name>
        <param>
          <type>float ***</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>int</type>
          <declname>depths</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function fill a 3D array with zero values </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="5245" column="6" bodyfile="src/Testing.cu" bodystart="5245" bodyend="5256"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a4f4af3539c25a954be5e18275af01495" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fillrandom</definition>
        <argsstring>(Param XParam, BlockP&lt; T &gt; XBlock, T *z)</argsstring>
        <name>fillrandom</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; T &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function fill an array with random values (0 - 1) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="5263" column="18" bodyfile="src/Testing.cu" bodystart="5263" bodyend="5279"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1aa5453e29f3a42d52ec798a7b1f537fc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void fillrandom&lt; float &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; float &gt; XBlock, float *z)</argsstring>
        <name>fillrandom&lt; float &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; float &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="5280" column="10" declfile="src/Testing.cu" declline="5280" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1aa7353f97649eb1cb43bfd59c9deea82e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void fillrandom&lt; double &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; double &gt; XBlock, double *z)</argsstring>
        <name>fillrandom&lt; double &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; double &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="5281" column="10" declfile="src/Testing.cu" declline="5281" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1ada85bb3d08073d952f4185783524f838" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fillgauss</definition>
        <argsstring>(Param XParam, BlockP&lt; T &gt; XBlock, T amp, T *z)</argsstring>
        <name>fillgauss</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; T &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>T</type>
          <declname>amp</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function fill an array with a gaussian bump</para>
<para>borrowed/adapted from Basilisk test (?) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="5288" column="18" bodyfile="src/Testing.cu" bodystart="5288" bodyend="5317"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a24a966f156fd1a3163af2896c68031be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void fillgauss&lt; float &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; float &gt; XBlock, float amp, float *z)</argsstring>
        <name>fillgauss&lt; float &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; float &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>float</type>
          <declname>amp</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="5318" column="10" declfile="src/Testing.cu" declline="5318" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1ae405b5742f6ff972fb5a9aa3c16ba2be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void fillgauss&lt; double &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; double &gt; XBlock, double amp, double *z)</argsstring>
        <name>fillgauss&lt; double &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; double &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>double</type>
          <declname>amp</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="5319" column="10" declfile="src/Testing.cu" declline="5319" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1ab97fd4fa60261817f7bfbf7926949fa6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>TestingOutput</definition>
        <argsstring>(Param XParam, Model&lt; T &gt; XModel)</argsstring>
        <name>TestingOutput</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; T &gt;</type>
          <declname>XModel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>OUTDATED? </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="5326" column="6" bodyfile="src/Testing.cu" bodystart="5326" bodyend="5402"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1ac6df86154644ba8b544ee5ee0ec3e8c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void TestingOutput&lt; float &gt;</definition>
        <argsstring>(Param XParam, Model&lt; float &gt; XModel)</argsstring>
        <name>TestingOutput&lt; float &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; float &gt;</type>
          <declname>XModel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="5404" column="10" declfile="src/Testing.cu" declline="5404" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1ac636a9919d64f7b2360a5e21361c5975" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void TestingOutput&lt; double &gt;</definition>
        <argsstring>(Param XParam, Model&lt; double &gt; XModel)</argsstring>
        <name>TestingOutput&lt; double &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; double &gt;</type>
          <declname>XModel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="5405" column="10" declfile="src/Testing.cu" declline="5405" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1ad37a8675a32dfb60da77c258b0b7306c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void copyID2var</definition>
        <argsstring>(Param XParam, BlockP&lt; T &gt; XBlock, T *z)</argsstring>
        <name>copyID2var</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; T &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function copies block info to an output variable This function is somewhat useful when checking bugs in the mesh refinement or coarsening one needs to provide a pointer(z) allocated on the CPU to store the clockinfo This fonction only works on CPU </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="5414" column="18" bodyfile="src/Testing.cu" bodystart="5414" bodyend="5429"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1ac7a2c658af1538fa8f4137921adaefb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void copyID2var&lt; float &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; float &gt; XBlock, float *z)</argsstring>
        <name>copyID2var&lt; float &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; float &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="5431" column="10" declfile="src/Testing.cu" declline="5431" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1aff4b92c626cc4dad937777da126bccf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void copyID2var&lt; double &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; double &gt; XBlock, double *z)</argsstring>
        <name>copyID2var&lt; double &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; double &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="5432" column="10" declfile="src/Testing.cu" declline="5432" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a1b34ab7d726ca571f42f637756cd8120" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void copyBlockinfo2var</definition>
        <argsstring>(Param XParam, BlockP&lt; T &gt; XBlock, int *blkinfo, T *z)</argsstring>
        <name>copyBlockinfo2var</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; T &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>blkinfo</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function copies blick info to an output variable This function is somewhat useful when checking bugs in the mesh refinement or coarsening one needs to provide a pointer(z) allocated on the CPU to store the clockinfo This fonction only works on CPU </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="5442" column="18" bodyfile="src/Testing.cu" bodystart="5442" bodyend="5458"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1aa3c701ece8de935a4819fa75c51c78d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void copyBlockinfo2var&lt; float &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; float &gt; XBlock, int *blkinfo, float *z)</argsstring>
        <name>copyBlockinfo2var&lt; float &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; float &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>blkinfo</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="5459" column="10" declfile="src/Testing.cu" declline="5459" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a85e49756501fdf5049eb48149c2e61a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void copyBlockinfo2var&lt; double &gt;</definition>
        <argsstring>(Param XParam, BlockP&lt; double &gt; XBlock, int *blkinfo, double *z)</argsstring>
        <name>copyBlockinfo2var&lt; double &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; double &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>blkinfo</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="5460" column="10" declfile="src/Testing.cu" declline="5460" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a4974ca541eb0c671b0b437f594b63aba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CompareCPUvsGPU</definition>
        <argsstring>(Param XParam, Model&lt; T &gt; XModel, Model&lt; T &gt; XModel_g, std::vector&lt; std::string &gt; varlist, bool checkhalo)</argsstring>
        <name>CompareCPUvsGPU</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; T &gt;</type>
          <declname>XModel</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; T &gt;</type>
          <declname>XModel_g</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>varlist</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>checkhalo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function compares the Valiables in a CPU model and a GPU models This function is quite useful when checking both are identical enough one needs to provide a list (vector&lt;string&gt;) of variable to check </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="5469" column="18" bodyfile="src/Testing.cu" bodystart="5469" bodyend="5530"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1abfe562ecdbcc07087a4a9a10b5a4c028" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void CompareCPUvsGPU&lt; float &gt;</definition>
        <argsstring>(Param XParam, Model&lt; float &gt; XModel, Model&lt; float &gt; XModel_g, std::vector&lt; std::string &gt; varlist, bool checkhalo)</argsstring>
        <name>CompareCPUvsGPU&lt; float &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; float &gt;</type>
          <declname>XModel</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; float &gt;</type>
          <declname>XModel_g</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>varlist</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>checkhalo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="5531" column="10" declfile="src/Testing.cu" declline="5531" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1aa59700378744a6475b3f5c528cdb6f42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void</type>
        <definition>template void CompareCPUvsGPU&lt; double &gt;</definition>
        <argsstring>(Param XParam, Model&lt; double &gt; XModel, Model&lt; double &gt; XModel_g, std::vector&lt; std::string &gt; varlist, bool checkhalo)</argsstring>
        <name>CompareCPUvsGPU&lt; double &gt;</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; double &gt;</type>
          <declname>XModel</declname>
        </param>
        <param>
          <type><ref refid="structModel" kindref="compound">Model</ref>&lt; double &gt;</type>
          <declname>XModel_g</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>varlist</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>checkhalo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="5532" column="10" declfile="src/Testing.cu" declline="5532" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a15a6fa061ccab60ed2d5687e13ea513c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void diffdh</definition>
        <argsstring>(Param XParam, BlockP&lt; T &gt; XBlock, T *input, T *output, T *shuffle)</argsstring>
        <name>diffdh</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; T &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>shuffle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function Calculates The difference in left and right flux terms. This function is quite useful when checking for Lake-at-Rest states This function requires a preallocated output and a shuffle (right side term) CPU pointers to save the result of teh calculation </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="5540" column="18" bodyfile="src/Testing.cu" bodystart="5540" bodyend="5563"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a2558c74b47281e7a4e9e2c7be1dbdc15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void diffSource</definition>
        <argsstring>(Param XParam, BlockP&lt; T &gt; XBlock, T *Fqux, T *Su, T *output)</argsstring>
        <name>diffSource</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; T &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>Fqux</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>Su</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function Calculate The source term of the equation. This function is quite useful when checking for Lake-at-Rest states This function requires an outputCPU pointers to save the result of teh calculation </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="5570" column="18" bodyfile="src/Testing.cu" bodystart="5570" bodyend="5593"/>
      </memberdef>
      <memberdef kind="function" id="Testing_8cu_1a7a1f9500eec67a188d5fa533ad1a1463" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void diffArray</definition>
        <argsstring>(Param XParam, BlockP&lt; T &gt; XBlock, std::string varname, bool checkhalo, T *cpu, T *gpu, T *dummy, T *out)</argsstring>
        <name>diffArray</name>
        <param>
          <type><ref refid="classParam" kindref="compound">Param</ref></type>
          <declname>XParam</declname>
        </param>
        <param>
          <type><ref refid="structBlockP" kindref="compound">BlockP</ref>&lt; T &gt;</type>
          <declname>XBlock</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>varname</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>checkhalo</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>cpu</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>gpu</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>dummy</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Testing.cu" line="5600" column="18" bodyfile="src/Testing.cu" bodystart="5600" bodyend="5675"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Testing.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Testing(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structForcing" kindref="compound">Forcing&lt;float&gt;</ref><sp/>XForcing,<sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref><sp/>XModel,<sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref><sp/>XModel_g)</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isfailed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>result;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\nRunning<sp/>internal<sp/>test(s):&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mytest;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>mytest<sp/>=<sp/>XParam.test;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.test<sp/>==<sp/>99)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mytest<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(mytest<sp/>&lt;=<sp/>XParam.test)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mytest<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bumptest,<sp/>bumptestComp;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bumptestGPU<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>0<sp/>is<sp/>pure<sp/>bump<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t<sp/>###<sp/>Gaussian<sp/>wave<sp/>on<sp/>Cartesian<sp/>grid<sp/>###&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//set<sp/>gpu<sp/>is<sp/>-1<sp/>for<sp/>cpu<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bumptest<sp/>=<sp/>GaussianHumptest(0.1,<sp/>-1,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>bumptest<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;successful&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;failed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t\tCPU<sp/>test:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>result);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>original<sp/>XParam<sp/>tried<sp/>to<sp/>use<sp/>GPU<sp/>we<sp/>try<sp/>also</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.GPUDEVICE<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bumptestGPU<sp/>=<sp/>GaussianHumptest(0.1,<sp/>XParam.GPUDEVICE,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>bumptestGPU<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;successful&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;failed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t\tGPU<sp/>test:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>result);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bumptestGPU)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bumptestComp<sp/>=<sp/>GaussianHumptest(0.1,<sp/>XParam.GPUDEVICE,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isfailed<sp/>=<sp/>((bumptest<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(bumptestGPU<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">))<sp/>?<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>:<sp/>true;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mytest<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>rivertest;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>1<sp/>is<sp/>vertical<sp/>discharge<sp/>on<sp/>a<sp/>flat<sp/>uniorm<sp/>cartesian<sp/>mesh<sp/>(GPU<sp/>and<sp/>CU<sp/>version)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t<sp/>###<sp/>River<sp/>Mass<sp/>conservation<sp/>grid<sp/>###&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rivertest<sp/>=<sp/>Rivertest(0.1,<sp/>-1);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>rivertest<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;successful&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;failed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t\tCPU<sp/>test:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>result);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isfailed<sp/>=<sp/>(!rivertest<sp/>||<sp/>isfailed)<sp/>?<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>:<sp/>false;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;<sp/>\t\t\t<sp/>GPU<sp/>device=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(XParam.GPUDEVICE));</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.GPUDEVICE<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rivertest<sp/>=<sp/>Rivertest(0.1,<sp/>XParam.GPUDEVICE);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>rivertest<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;successful&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;failed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t\tGPU<sp/>test:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>result);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isfailed<sp/>=<sp/>(!rivertest<sp/>||<sp/>isfailed)<sp/>?<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>:<sp/>false;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rivertest<sp/>=<sp/>RiverVolumeAdapt(XParam,<sp/>T(0.4));</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>rivertest<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;successful&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;failed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t\tRiver<sp/>Volume<sp/>Adapt:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>result);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isfailed<sp/>=<sp/>(!rivertest<sp/>||<sp/>isfailed)<sp/>?<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>:<sp/>false;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mytest<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.GPUDEVICE<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>GPUvsCPUtest;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t###<sp/>Gaussian<sp/>wave<sp/>on<sp/>Cartesian<sp/>grid:<sp/>CPU<sp/>vs<sp/>GPU<sp/>###&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPUvsCPUtest<sp/>=<sp/>GaussianHumptest(0.1,<sp/>XParam.GPUDEVICE,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>GPUvsCPUtest<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;successful&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;failed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t\tCPU<sp/>vs<sp/>GPU<sp/>test:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>result);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isfailed<sp/>=<sp/>(!GPUvsCPUtest<sp/>||<sp/>isfailed)<sp/>?<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>:<sp/>false;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;Specify<sp/>GPU<sp/>device<sp/>to<sp/>run<sp/>test<sp/>2<sp/>(CPU<sp/>vs<sp/>GPU<sp/>comparison)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mytest<sp/>==<sp/>3)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>testresults;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>testreduction<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterate<sp/>this<sp/>test<sp/>niter<sp/>times:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>niter<sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srand(time(0));</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t###<sp/>Reduction<sp/>Test<sp/>###&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iter<sp/>=<sp/>0;<sp/>iter<sp/>&lt;<sp/>niter;<sp/>iter++)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testresults<sp/>=<sp/>reductiontest(XParam,<sp/>XModel,<sp/>XModel_g);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testreduction<sp/>=<sp/>testreduction<sp/>&amp;&amp;<sp/>testresults;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>testreduction<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;successful&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;failed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t\tReduction<sp/>test:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>result);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isfailed<sp/>=<sp/>(!testreduction<sp/>||<sp/>isfailed)<sp/>?<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>:<sp/>false;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mytest<sp/>==<sp/>4)</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t###<sp/>Boundary<sp/>Test<sp/>###&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>testBound<sp/>=<sp/>testboundaries(XParam,<sp/>T(0.1));</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>testBound<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;successful&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;failed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isfailed<sp/>=<sp/>(!testBound<sp/>||<sp/>isfailed)<sp/>?<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>:<sp/>false;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t\tboundaries<sp/>test:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>result);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mytest<sp/>==<sp/>5)</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t###<sp/>Lake-at-rest<sp/>Test<sp/>###&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>testTLAR<sp/>=<sp/>ThackerLakeAtRest(XParam,<sp/>T(0.0));</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>testTLAR<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;successful&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;failed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isfailed<sp/>=<sp/>(!testTLAR<sp/>||<sp/>isfailed)<sp/>?<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>:<sp/>false;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t\tThaker<sp/>lake-at-rest<sp/>test:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>result);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testTLAR<sp/>=<sp/>LakeAtRest(XParam,<sp/>XModel);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isfailed<sp/>=<sp/>(!testTLAR<sp/>||<sp/>isfailed)<sp/>?<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>:<sp/>false;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t\tLake-at-rest<sp/>test:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>result);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mytest<sp/>==<sp/>6)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t###<sp/>Mass<sp/>conservation<sp/>Test<sp/>###&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>testSteepSlope<sp/>=<sp/>MassConserveSteepSlope(XParam.zsinit,<sp/>XParam.GPUDEVICE);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>testSteepSlope<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;successful&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;failed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isfailed<sp/>=<sp/>(!testSteepSlope<sp/>||<sp/>isfailed)<sp/>?<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>:<sp/>false;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t\tMass<sp/>conservation<sp/>test:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>result);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mytest<sp/>==<sp/>7)</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>testrainGPU,<sp/>testrainCPU;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Test<sp/>7<sp/>is<sp/>homogeneous<sp/>rain<sp/>on<sp/>a<sp/>uniform<sp/>slope<sp/>for<sp/>cartesian<sp/>mesh<sp/>(GPU<sp/>and<sp/>CPU<sp/>version)</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>input<sp/>parameters<sp/>are<sp/>:</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>the<sp/>initial<sp/>water<sp/>level<sp/>(zs)</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>GPU<sp/>option</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>the<sp/>slope<sp/>(%)</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t###<sp/>Homogeneous<sp/>rain<sp/>on<sp/>grid<sp/>Mass<sp/>conservation<sp/>test<sp/>###&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.GPUDEVICE<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testrainGPU<sp/>=<sp/>Raintest(0.0,<sp/>0,<sp/>10,<sp/>XParam.engine);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>testrainGPU<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;successful&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;failed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t\tHomogeneous<sp/>rain<sp/>on<sp/>grid<sp/>test<sp/>GPU:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>result);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testrainCPU<sp/>=<sp/>Raintest(0.0,<sp/>-1,<sp/>10,<sp/>XParam.engine);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>testrainCPU<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;successful&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;failed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t\tHomogeneous<sp/>rain<sp/>on<sp/>grid<sp/>test<sp/>CPU:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>result);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isfailed<sp/>=<sp/>(!testrainCPU<sp/>||<sp/>!testrainGPU<sp/>||<sp/>isfailed)<sp/>?<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>:<sp/>false;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.test<sp/>==<sp/>8)</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>raintest2;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Test<sp/>8<sp/>is<sp/>non-homogeneous<sp/>rain<sp/>on<sp/>a<sp/>non-uniform<sp/>slope<sp/>for<sp/>cartesian<sp/>mesh<sp/>(GPU<sp/>and<sp/>CPU<sp/>version)</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>It<sp/>is<sp/>based<sp/>on<sp/>a<sp/>teste<sp/>case<sp/>from<sp/>litterature<sp/>(Iwagaki1955)<sp/>and<sp/>tests<sp/>the<sp/>different</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rain<sp/>inputs<sp/>(time<sp/>serie<sp/>for<sp/>1D<sp/>input<sp/>or<sp/>netCDF<sp/>file).</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t<sp/>non-uniform<sp/>rain<sp/>forcing<sp/>on<sp/>slope<sp/>based<sp/>on<sp/>Aureli2020&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gpu<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>raintest2<sp/>=<sp/>Raintestinput(gpu);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>raintest2<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;successful&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;failed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t\tNon-uniform<sp/>rain<sp/>forcing<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>result);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mytest<sp/>==<sp/>9)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>testzoneOutDef,<sp/>testzoneOutUser;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Test<sp/>9<sp/>is<sp/>basic<sp/>configuration<sp/>to<sp/>test<sp/>the<sp/>zoned<sp/>outputs,<sp/>with<sp/>different<sp/>resolutions.</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>default<sp/>(without<sp/>zoned<sp/>defined<sp/>by<sp/>user)<sp/>configuration<sp/>is<sp/>tested.</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Then,<sp/>the<sp/>creation<sp/>of<sp/>3<sp/>zones<sp/>is<sp/>then<sp/>tested(whole,<sp/>zoned<sp/>complexe,<sp/>zoned<sp/>with<sp/>part<sp/>of<sp/>the<sp/>levels).</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>size<sp/>of<sp/>the<sp/>created<sp/>nc<sp/>files<sp/>is<sp/>used<sp/>to<sp/>verified<sp/>this<sp/>fonctionnality.</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parameter:<sp/>nbzones:<sp/>number<sp/>of<sp/>zones<sp/>for<sp/>output<sp/>defined<sp/>by<sp/>the<sp/>user</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zsinit:<sp/>initial<sp/>water<sp/>elevation</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t###<sp/>Test<sp/>zoned<sp/>output<sp/>###&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbzones<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>zsinit<sp/>=<sp/>0.01;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testzoneOutDef<sp/>=<sp/>ZoneOutputTest(nbzones,<sp/>zsinit);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>testzoneOutDef<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;successful&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;failed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\n\nDefault<sp/>zoned<sp/>Outputs:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>result);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbzones<sp/>=<sp/>3;<sp/></highlight><highlight class="comment">//<sp/>3<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testzoneOutUser<sp/>=<sp/>ZoneOutputTest(nbzones,<sp/>zsinit);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>testzoneOutUser<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;successful&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;failed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\n\nUser<sp/>defined<sp/>zones<sp/>Outputs:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>result);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isfailed<sp/>=<sp/>(!testzoneOutDef<sp/>||<sp/>!testzoneOutUser<sp/>||<sp/>isfailed)<sp/>?<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>:<sp/>false;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mytest<sp/>==<sp/>10)</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>testrainlossesGPU,<sp/>testrainlossesCPU;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Test<sp/>10<sp/>is<sp/>to<sp/>test<sp/>the<sp/>Initial<sp/>/<sp/>Continuous<sp/>Losses<sp/>of<sp/>rain,<sp/>on<sp/>a<sp/>uniform<sp/>slope,<sp/>under<sp/>uniform<sp/>rain</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>cartesian<sp/>mesh<sp/>(GPU<sp/>and<sp/>CPU<sp/>version)</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>input<sp/>parameters<sp/>are<sp/>:</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>the<sp/>initial<sp/>water<sp/>level<sp/>(zs)</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>GPU<sp/>option</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>the<sp/>slope<sp/>(%)</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t###<sp/>IL-CL<sp/>Rain<sp/>losses<sp/>test<sp/>on<sp/>GPU<sp/>###&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testrainlossesGPU<sp/>=<sp/>Rainlossestest(0.0,<sp/>0,<sp/>10);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>testrainlossesGPU<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;successful&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;failed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\n\n\t<sp/>IL-CL<sp/>Rain<sp/>losses<sp/>test<sp/>GPU:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>result);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testrainlossesCPU<sp/>=<sp/>Rainlossestest(0.0,<sp/>-1,<sp/>10);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>testrainlossesCPU<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;successful&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;failed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\n\n\t<sp/>IL-CL<sp/>Rain<sp/>losses<sp/>test<sp/>CPU:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>result);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isfailed<sp/>=<sp/>(!testrainlossesCPU<sp/>||<sp/>!testrainlossesGPU<sp/>||<sp/>isfailed)<sp/>?<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>:<sp/>false;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mytest<sp/>==<sp/>11)</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>instab;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t###<sp/>Wet/dry<sp/>Instability<sp/>test<sp/>with<sp/>Conserve<sp/>Elevation<sp/>###&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instab<sp/>=<sp/>TestInstability(XParam,<sp/>XModel,<sp/>XModel_g);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>instab<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;successful&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;failed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t\tWet/dry<sp/>Instability<sp/>test<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>result);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mytest<sp/>==<sp/>12)</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Test<sp/>12<sp/>is<sp/>to<sp/>test<sp/>the<sp/>calendar<sp/>time<sp/>to<sp/>second<sp/>conversion</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>test<sp/>will<sp/>fail<sp/>if<sp/>the<sp/>system<sp/>or<sp/>compiler<sp/>does<sp/>not<sp/>suport<sp/>long<sp/>long</highlight></codeline>
<codeline lineno="259"><highlight class="comment"></highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>timetest;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timetest<sp/>=<sp/>testime1(1)<sp/>&amp;&amp;<sp/>testime2(2);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>timetest<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;successful&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;failed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t\tCalendar<sp/>time<sp/>test<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>result);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mytest<sp/>==<sp/>13)</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Test<sp/>13<sp/>is<sp/>to<sp/>test<sp/>the<sp/>input<sp/>of<sp/>different<sp/>roughness<sp/>maps<sp/>(and<sp/>different<sp/>bathymetry<sp/>at<sp/>the<sp/>same<sp/>time)</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Test1:<sp/>2<sp/>DEM<sp/>and<sp/>2<sp/>roughness<sp/>netcdf<sp/>files<sp/>are<sp/>created<sp/>and<sp/>saved;<sp/>then<sp/>read.</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>max<sp/>/<sp/>min<sp/>values<sp/>are<sp/>check<sp/>to<sp/>see<sp/>if<sp/>the<sp/>z/z0<sp/>maps<sp/>are<sp/>created<sp/>as<sp/>expected</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Test2:<sp/>A<sp/>roughness<sp/>file<sp/>name<sp/>is<sp/>changed<sp/>to<sp/>have<sp/>a<sp/>number<sp/>in<sp/>first<sp/>position.<sp/>We<sp/>check<sp/>that<sp/>the</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file<sp/>is<sp/>read<sp/>and<sp/>not<sp/>the<sp/>number<sp/>taken<sp/>as<sp/>z0<sp/>value.</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Test3:<sp/>A<sp/>roughness<sp/>is<sp/>entered<sp/>as<sp/>a<sp/>value,<sp/>test<sp/>that<sp/>it<sp/>is<sp/>implemented<sp/>for<sp/>the<sp/>whole<sp/>domain.</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Test4<sp/>:<sp/><sp/>Test<sp/>value<sp/>input<sp/>for<sp/>initial<sp/>loss<sp/>/<sp/>continuous<sp/>loss</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>RoughBathyresult,<sp/>RoughInput,<sp/>RoughtInputnumber,<sp/>ILCLInputnumber;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t###<sp/>Different<sp/>bathy<sp/>and<sp/>different<sp/>roughness<sp/>file<sp/>inputs<sp/>###&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RoughBathyresult<sp/>=<sp/>TestMultiBathyRough(0,<sp/>0.0,<sp/>0);</highlight><highlight class="comment">//&amp;&amp;<sp/>TestRoughness(XParam,<sp/>XModel,<sp/>XModel_g);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>RoughBathyresult<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;successful&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;failed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t\t<sp/>#####<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t\t<sp/>#####<sp/>Different<sp/>Bathy<sp/>and<sp/>Roughness<sp/>test<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>result<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RoughInput<sp/>=<sp/>TestMultiBathyRough(0,<sp/>0.0,<sp/>1);</highlight><highlight class="comment">//&amp;&amp;<sp/>TestRoughness(XParam,<sp/>XModel,<sp/>XModel_g);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>RoughInput<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;successful&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;failed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t\t<sp/>#####<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t\t<sp/>#####<sp/>Roughness<sp/>file<sp/>name<sp/>test<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>result<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RoughtInputnumber<sp/>=<sp/>TestMultiBathyRough(0,<sp/>0.0,<sp/>2);</highlight><highlight class="comment">//&amp;&amp;<sp/>TestRoughness(XParam,<sp/>XModel,<sp/>XModel_g);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>RoughtInputnumber<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;successful&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;failed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t\t<sp/>#####<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t\t<sp/>#####<sp/>Roughness<sp/>value<sp/>input<sp/>test<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>result<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t\t<sp/>#####<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ILCLInputnumber<sp/>=<sp/>TestMultiBathyRough(0,<sp/>0.0,<sp/>3);</highlight><highlight class="comment">//&amp;&amp;<sp/>TestRoughness(XParam,<sp/>XModel,<sp/>XModel_g);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>ILCLInputnumber<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;successful&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;failed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t\t<sp/>#####<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t\t<sp/>#####<sp/>Initial<sp/>Loss<sp/>/<sp/>Continuous<sp/>Loss<sp/>value<sp/>input<sp/>test<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>result<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t\t<sp/>#####<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isfailed<sp/>=<sp/>(!RoughBathyresult<sp/>||<sp/>!RoughInput<sp/>||<sp/>!RoughtInputnumber<sp/>||<sp/>!ILCLInputnumber<sp/>||<sp/>isfailed)<sp/>?<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>:<sp/>false;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mytest<sp/>==<sp/>14)</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Test<sp/>14<sp/><sp/>This<sp/>test<sp/>AOI<sp/>bnds<sp/>aswall<sp/>to<sp/>start<sp/>with</highlight></codeline>
<codeline lineno="303"><highlight class="comment"></highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>wallbndleft,<sp/>wallbndright,<sp/>wallbndbot,<sp/>wallbndtop;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t###AOI<sp/>bnd<sp/>wall<sp/>test<sp/>###&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wallbndleft<sp/>=<sp/>TestAIObnd(XParam,<sp/>XModel,<sp/>XModel_g,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wallbndright<sp/>=<sp/>TestAIObnd(XParam,<sp/>XModel,<sp/>XModel_g,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wallbndbot<sp/>=<sp/>TestAIObnd(XParam,<sp/>XModel,<sp/>XModel_g,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wallbndtop<sp/>=<sp/>TestAIObnd(XParam,<sp/>XModel,<sp/>XModel_g,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>(wallbndleft<sp/>&amp;<sp/>wallbndright<sp/>&amp;<sp/>wallbndbot<sp/>&amp;<sp/>wallbndtop)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;successful&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;failed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t\tBBox<sp/>bnd<sp/>wall<sp/>test<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>result);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wallbndleft<sp/>=<sp/>TestAIObnd(XParam,<sp/>XModel,<sp/>XModel_g,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wallbndright<sp/>=<sp/>TestAIObnd(XParam,<sp/>XModel,<sp/>XModel_g,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wallbndbot<sp/>=<sp/>TestAIObnd(XParam,<sp/>XModel,<sp/>XModel_g,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wallbndtop<sp/>=<sp/>TestAIObnd(XParam,<sp/>XModel,<sp/>XModel_g,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>(wallbndleft<sp/>&amp;<sp/>wallbndright<sp/>&amp;<sp/>wallbndbot<sp/>&amp;<sp/>wallbndtop)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;successful&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;failed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t\tAOI<sp/>bnd<sp/>wall<sp/>test<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>result);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mytest<sp/>==<sp/>15)</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Test<sp/>15<sp/>is<sp/>to<sp/>test<sp/>the<sp/>input<sp/>of<sp/>flexible<sp/>times<sp/>outputs<sp/>(general<sp/>and<sp/>in<sp/>zone_outputs)</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Test1:<sp/>Test<sp/>of<sp/>times<sp/>in<sp/>second/durations<sp/>(for<sp/>general<sp/>and<sp/>zone_outputs)</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>data<sp/>is<sp/>read<sp/>from<sp/>paramfile<sp/>and<sp/>we<sp/>test<sp/>the<sp/>reading<sp/>and<sp/>nc<sp/>files<sp/>created.</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>FlexibleOutTime;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t###<sp/>Tests<sp/>for<sp/>flexible<sp/>time<sp/>outputs<sp/>(general<sp/>and<sp/>zones<sp/>outputs)<sp/>###&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FlexibleOutTime<sp/>=<sp/>TestFlexibleOutputTimes(0,<sp/>0.0,<sp/>0);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>FlexibleOutTime<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;successful&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;failed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t\t<sp/>#####<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t\t<sp/>#####<sp/>Flexible<sp/>output<sp/>times<sp/>reading<sp/>test<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>result<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t\t<sp/>#####<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isfailed<sp/>=<sp/>(!FlexibleOutTime<sp/>||<sp/>isfailed)<sp/>?<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>:<sp/>false;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mytest<sp/>==<sp/>993)</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//pinned<sp/>pageable<sp/>Memory<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestPinMem(XParam,<sp/>XModel,<sp/>XModel_g);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mytest<sp/>==<sp/>900)</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GaussianHumptest(0.1,<sp/>XParam.GPUDEVICE,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mytest<sp/>==<sp/>994)</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Testzbinit(XParam,<sp/>XForcing,<sp/>XModel,<sp/>XModel_g);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mytest<sp/>==<sp/>995)</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestFirsthalfstep(XParam,<sp/>XForcing,<sp/>XModel,<sp/>XModel_g);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mytest<sp/>==<sp/>996)</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestHaloSpeed(XParam,<sp/>XModel,<sp/>XModel_g);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mytest<sp/>==<sp/>997)</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestGradientSpeed(XParam,<sp/>XModel,<sp/>XModel_g);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mytest<sp/>==<sp/>998)</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>testresults;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t###<sp/>CPU<sp/>vs<sp/>GPU<sp/>Test<sp/>###&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testresults<sp/>=<sp/>CPUGPUtest(XParam,<sp/>XModel,<sp/>XModel_g);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isfailed<sp/>=<sp/>(!testresults<sp/>||<sp/>isfailed)<sp/>?<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>:<sp/>false;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(testresults)</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(0);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.test<sp/>==<sp/>999)</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DebugLoop(XParam,<sp/>XForcing,<sp/>XModel,<sp/>XModel_g);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mytest++;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(isfailed);</highlight></codeline>
<codeline lineno="393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Testing&lt;float&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structForcing" kindref="compound">Forcing&lt;float&gt;</ref><sp/>XForcing,<sp/><ref refid="structModel" kindref="compound">Model&lt;float&gt;</ref><sp/>XModel,<sp/><ref refid="structModel" kindref="compound">Model&lt;float&gt;</ref><sp/>XModel_g);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Testing&lt;double&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structForcing" kindref="compound">Forcing&lt;float&gt;</ref><sp/>XForcing,<sp/><ref refid="structModel" kindref="compound">Model&lt;double&gt;</ref><sp/>XModel,<sp/><ref refid="structModel" kindref="compound">Model&lt;double&gt;</ref><sp/>XModel_g);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>GaussianHumptest(T<sp/>zsnit,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gpu,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>compare)</highlight></codeline>
<codeline lineno="407"><highlight class="normal">{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;#####&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>a<sp/>preplica<sp/>of<sp/>the<sp/>tutorial<sp/>case<sp/>for<sp/>Basilisk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classParam" kindref="compound">Param</ref><sp/>XParam;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>x,<sp/>y,<sp/>delta;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>cc<sp/>=<sp/>T(0.05);</highlight><highlight class="comment">//<sp/>Match<sp/>the<sp/>200<sp/>in<sp/>chracteristic<sp/>radius<sp/>used<sp/>in<sp/>Basilisk<sp/><sp/>1/(2*cc^2)=200</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//XParam.engine<sp/>=<sp/>2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>a<sp/>=<sp/>T(1.0);<sp/></highlight><highlight class="comment">//Gaussian<sp/>wave<sp/>amplitude</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verification<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>a<sp/>transect<sp/>across<sp/>iy=15:16:127<sp/>at<sp/>ix=127<sp/>(or<sp/>vice<sp/>versa<sp/>because<sp/>the<sp/>solution<sp/>is<sp/>symetrical)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>values<sp/>are<sp/>based<sp/>on<sp/>single<sp/>precision<sp/>output<sp/>from<sp/>Netcdf<sp/>file<sp/>so<sp/>are<sp/>only<sp/>accurate<sp/>to<sp/>10-7<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//double<sp/>ZsVerifKurganov[8]<sp/>=<sp/>{<sp/>0.100000000023,<sp/>0.100000063119,<sp/>0.100110376004,<sp/>0.195039970749,<sp/>0.136739044168,<sp/>0.0848024805994,<sp/>0.066275833049,<sp/>0.0637058445888<sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//double<sp/>ZsVerification[8]<sp/>=<sp/>{<sp/>0.100000008904,<sp/>0.187920326216,<sp/>0.152329657390,<sp/>0.117710230042,<sp/>0.0828616638138,<sp/>0.0483274739972,<sp/>0.0321501737555,<sp/>0.0307609731288<sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ZsVerifButtinger[8]<sp/>=<sp/>{<sp/>0.100000000023,<sp/>0.100000063119,<sp/>0.100093580546,<sp/>0.195088199869,<sp/>0.136767978925,<sp/>0.0850706353898,<sp/>0.0663028448129,<sp/>0.063727949607<sp/>};</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialise<sp/>domain<sp/>and<sp/>required<sp/>resolution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.dx<sp/>=<sp/>1.0<sp/>/<sp/>((1<sp/>&lt;&lt;<sp/>8));</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.xo<sp/>=<sp/>-0.5;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.yo<sp/>=<sp/>-0.5;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.xmax<sp/>=<sp/>0.5;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.ymax<sp/>=<sp/>0.5;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//level<sp/>8<sp/>is<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.initlevel<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.minlevel<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.maxlevel<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.zsinit<sp/>=<sp/>zsnit;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.zsoffset<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.aoibnd<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Output<sp/>times<sp/>for<sp/>comparisons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.endtime<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.outputtimestep<sp/>=<sp/>0.1;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.smallnc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.cf<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.frictionmodel<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Enforece<sp/>GPU/CPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.GPUDEVICE<sp/>=<sp/>gpu;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>outvi[18]<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;zb&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;h&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;zs&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;u&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;v&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Fqux&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Fqvx&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Fquy&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Fqvy&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Fhu&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Fhv&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dh&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dhu&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dhv&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ho&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;vo&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;uo&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;cf&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>outv;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nv<sp/>=<sp/>0;<sp/>nv<sp/>&lt;<sp/>18;<sp/>nv++)</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outv.push_back(outvi[nv]);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.outvars<sp/>=<sp/>outv;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>Model<sp/>setup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref><sp/>XModel;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref><sp/>XModel_g;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structForcing" kindref="compound">Forcing&lt;float&gt;</ref><sp/>XForcing;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structStaticForcingP" kindref="compound">StaticForcingP&lt;float&gt;</ref><sp/>bathy;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy.push_back(bathy);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialise<sp/>forcing<sp/>bathymetry<sp/>to<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].xo<sp/>=<sp/>-1.0;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].yo<sp/>=<sp/>-1.0;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].xmax<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].ymax<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].nx<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].ny<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].dx<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].dy<sp/>=<sp/>XForcing.Bathy[0].dx;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//AllocateCPU(1,<sp/>1,<sp/>XForcing.left.blks,<sp/>XForcing.right.blks,<sp/>XForcing.top.blks,<sp/>XForcing.bot.blks);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(XForcing.Bathy[0].nx,<sp/>XForcing.Bathy[0].ny,<sp/>XForcing.Bathy[0].val);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>XForcing.Bathy[0].ny;<sp/>j++)</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>XForcing.Bathy[0].nx;<sp/>i++)</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.Bathy[0].val[i<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].nx]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>checkparamsanity(XParam,<sp/>XForcing);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>InitMesh(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Recreate<sp/>the<sp/>initia;l<sp/>conditions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//InitArrayBUQ(XParam,<sp/>XModel.blocks,<sp/>T(0.0),<sp/>XModel.zb);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//InitArrayBUQ(XParam,<sp/>XModel.blocks,<sp/>zsnit,<sp/>XModel.evolv.zs);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//zs<sp/>is<sp/>initialised<sp/>here:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>InitialConditions(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>xorigin<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>yorigin<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>0;<sp/>ibl<sp/>&lt;<sp/>XParam.nblk;<sp/>ibl++)</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;bl=%d\tblockxo[bl]=%f\tblockyo[bl]=%f\n&quot;,<sp/>bl,<sp/>blockxo[bl],<sp/>blockyo[bl]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>XModel.blocks.active[ibl];</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delta<sp/>=<sp/>T(calcres(XParam.dx,<sp/>XModel.blocks.level[ib]));</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy<sp/>=<sp/>0;<sp/>iy<sp/>&lt;<sp/>XParam.blkwidth;<sp/>iy++)</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>0;<sp/>ix<sp/>&lt;<sp/>XParam.blkwidth;<sp/>ix++)</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>memloc(XParam,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>T(XParam.xo)<sp/>+<sp/>XModel.blocks.xo[ib]<sp/>+<sp/>ix<sp/>*<sp/>delta;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>T(XParam.yo)<sp/>+<sp/>XModel.blocks.yo[ib]<sp/>+<sp/>iy<sp/>*<sp/>delta;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XModel.evolv.zs[n]<sp/>=<sp/>XModel.evolv.zs[n]<sp/>+<sp/>a<sp/>*<sp/>exp(T(-1.0)<sp/>*<sp/>((x<sp/>-<sp/>xorigin)<sp/>*<sp/>(x<sp/>-<sp/>xorigin)<sp/>+<sp/>(y<sp/>-<sp/>yorigin)<sp/>*<sp/>(y<sp/>-<sp/>yorigin))<sp/>/<sp/>(T(2.0)<sp/>*<sp/>cc<sp/>*<sp/>cc));</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XModel.evolv.h[n]<sp/>=<sp/>utils::max(XModel.evolv.zs[n]<sp/>-<sp/>XModel.zb[n],<sp/>T(0.0));</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>SetupGPU(XParam,<sp/>XModel,<sp/>XForcing,<sp/>XModel_g);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structLoop" kindref="compound">Loop&lt;T&gt;</ref><sp/>XLoop;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structLoop" kindref="compound">Loop&lt;T&gt;</ref><sp/>XLoop_g;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop.hugenegval<sp/>=<sp/>std::numeric_limits&lt;T&gt;::min();</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop.hugeposval<sp/>=<sp/>std::numeric_limits&lt;T&gt;::max();</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop.epsilon<sp/>=<sp/>std::numeric_limits&lt;T&gt;::epsilon();</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop.totaltime<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//InitSave2Netcdf(XParam,<sp/>XModel);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop.nextoutputtime<sp/>=<sp/>XParam.outputtimestep;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop.dtmax<sp/>=<sp/>initdt(XParam,<sp/>XLoop,<sp/>XModel);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//XLoop_g<sp/>=<sp/>XLoop;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop_g.hugenegval<sp/>=<sp/>std::numeric_limits&lt;T&gt;::min();</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop_g.hugeposval<sp/>=<sp/>std::numeric_limits&lt;T&gt;::max();</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop_g.epsilon<sp/>=<sp/>std::numeric_limits&lt;T&gt;::epsilon();</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop_g.totaltime<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//InitSave2Netcdf(XParam,<sp/>XModel);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop_g.nextoutputtime<sp/>=<sp/>XParam.outputtimestep;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop_g.dtmax<sp/>=<sp/>XLoop.dtmax;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.GPUDEVICE<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>compare)</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CompareCPUvsGPU(XParam,<sp/>XModel,<sp/>XModel_g,<sp/>outv,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>modelgood<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>fillHaloC(XParam,<sp/>XModel.blocks,<sp/>XModel.zb);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>gradientC(XParam,<sp/>XModel.blocks,<sp/>XModel.zb,<sp/>XModel.grad.dzbdx,<sp/>XModel.grad.dzbdy);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>gradientHalo(XParam,<sp/>XModel.blocks,<sp/>XModel.zb,<sp/>XModel.grad.dzbdx,<sp/>XModel.grad.dzbdy);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>refine_linear(XParam,<sp/>XModel.blocks,<sp/>XModel.zb,<sp/>XModel.grad.dzbdx,<sp/>XModel.grad.dzbdy);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>gradientHalo(XParam,<sp/>XModel.blocks,<sp/>XModel.zb,<sp/>XModel.grad.dzbdx,<sp/>XModel.grad.dzbdy);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(XLoop.totaltime<sp/>&lt;<sp/>XLoop.nextoutputtime)</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.GPUDEVICE<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.engine<sp/>==<sp/>5)</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FlowMLGPU(XParam,<sp/>XLoop,<sp/>XForcing,<sp/>XModel_g);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FlowGPU(XParam,<sp/>XLoop_g,<sp/>XForcing,<sp/>XModel_g);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XLoop.dt<sp/>=<sp/>XLoop_g.dt;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FlowCPU(XParam,<sp/>XLoop,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.GPUDEVICE<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>compare)</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GPUdev<sp/>=<sp/>XParam.GPUDEVICE;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XParam.GPUDEVICE<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FlowCPU(XParam,<sp/>XLoop,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XParam.GPUDEVICE<sp/>=<sp/>GPUdev;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>diffdt<sp/>=<sp/>T(XLoop_g.dt<sp/>-<sp/>XLoop.dt);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(diffdt)<sp/>&gt;<sp/>T(100.0)<sp/>*<sp/>(XLoop.epsilon))</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Timestep<sp/>Difference=%f\n&quot;</highlight><highlight class="normal">,<sp/>diffdt);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compare<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CompareCPUvsGPU(XParam,<sp/>XModel,<sp/>XModel_g,<sp/>outv,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//diffdh(XParam,<sp/>XModel.blocks,<sp/>XModel.flux.Su,<sp/>diff,<sp/>shuffle);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//diffSource(XParam,<sp/>XModel.blocks,<sp/>XModel.flux.Fqux,<sp/>XModel.flux.Su,<sp/>diff);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XLoop.totaltime<sp/>=<sp/>XLoop.totaltime<sp/>+<sp/>XLoop.dt;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XLoop_g.totaltime<sp/>=<sp/>XLoop_g.totaltime<sp/>+<sp/>XLoop_g.dt;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XLoop.nextoutputtime<sp/>-<sp/>XLoop.totaltime<sp/>&lt;=<sp/>XLoop.dt<sp/>*<sp/>T(0.00001)<sp/>&amp;&amp;<sp/>XParam.outputtimestep<sp/>&gt;<sp/>0.0)</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.GPUDEVICE<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ivar<sp/>=<sp/>0;<sp/>ivar<sp/>&lt;<sp/>XParam.outvars.size();<sp/>ivar++)</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CUDA_CHECK(cudaMemcpy(XModel.OutputVarMap[XParam.outvars[ivar]],<sp/>XModel_g.OutputVarMap[XParam.outvars[ivar]],<sp/>XParam.nblkmem<sp/>*<sp/>XParam.blksize<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T),<sp/>cudaMemcpyDeviceToHost));</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Save2Netcdf(XParam,<sp/>XModel);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>the<sp/>Validity<sp/>of<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>diff;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iv<sp/>=<sp/>0;<sp/>iv<sp/>&lt;<sp/>8;<sp/>iv++)</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix,<sp/>iy,<sp/>ib,<sp/>ii,<sp/>jj,<sp/>ibx,<sp/>iby,<sp/>nbx;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jj<sp/>=<sp/>127;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ii<sp/>=<sp/>(iv<sp/>+<sp/>1)<sp/>*<sp/>16<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Theoretical<sp/>size<sp/>is<sp/>255x255</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbx<sp/>=<sp/>256<sp/>/<sp/>16;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ibx<sp/>=<sp/>ftoi(floor(ii<sp/>/<sp/>XParam.blkwidth));</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iby<sp/>=<sp/>ftoi(floor(jj<sp/>/<sp/>XParam.blkwidth));</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ib<sp/>=<sp/>(iby)*nbx<sp/>+<sp/>ibx;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ix<sp/>=<sp/>ii<sp/>-<sp/>ibx<sp/>*<sp/>XParam.blkwidth;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iy<sp/>=<sp/>jj<sp/>-<sp/>iby<sp/>*<sp/>XParam.blkwidth;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>memloc(XParam,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diff<sp/>=<sp/>abs(T(XModel.evolv.zs[n])<sp/>-<sp/>ZsVerifButtinger[iv]);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(diff<sp/>&gt;<sp/>1e-6)</highlight><highlight class="comment">//Tolerance<sp/>is<sp/>1e-6<sp/>or<sp/>1e-7/1e-8??</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;ib=%d,<sp/>ix=%d,<sp/>iy=%d;<sp/>simulated=%f;<sp/>expected=%f;<sp/>diff=%e\n&quot;</highlight><highlight class="normal">,<sp/>ib,<sp/>ix,<sp/>iy,<sp/>XModel.evolv.zs[n],<sp/>ZsVerifButtinger[iv],<sp/>diff);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>modelgood<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>creatncfileBUQ(XParam,<sp/>XModel.blocks);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defncvarBUQ(XParam,<sp/>XModel.blocks.active,<sp/>XModel.blocks.level,<sp/>XModel.blocks.xo,<sp/>XModel.blocks.yo,<sp/></highlight><highlight class="stringliteral">&quot;zs&quot;</highlight><highlight class="normal">,<sp/>3,<sp/>XModel.evolv.zs,<sp/>XModel.blocks.outZone[0]);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//XLoop.nextoutputtime<sp/>=<sp/>min(XLoop.nextoutputtime<sp/>+<sp/>XParam.outputtimestep,<sp/>XParam.endtime);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;#####&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>modelgood;</highlight></codeline>
<codeline lineno="679"><highlight class="normal">}</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>GaussianHumptest&lt;float&gt;(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>zsnit,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gpu,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>compare);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>GaussianHumptest&lt;double&gt;(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>zsnit,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gpu,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>compare);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Rivertest(T<sp/>zsnit,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gpu)</highlight></codeline>
<codeline lineno="691"><highlight class="normal">{</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;#####&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classParam" kindref="compound">Param</ref><sp/>XParam;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>delta<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>initVol<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>finalVol<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>TheoryInput<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialise<sp/>domain<sp/>and<sp/>required<sp/>resolution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.dx<sp/>=<sp/>1.0<sp/>/<sp/>((1<sp/>&lt;&lt;<sp/>4));</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.xo<sp/>=<sp/>-0.5;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.yo<sp/>=<sp/>-0.5;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.xmax<sp/>=<sp/>0.5;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.ymax<sp/>=<sp/>0.5;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//level<sp/>8<sp/>is<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.initlevel<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.minlevel<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.maxlevel<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.zsinit<sp/>=<sp/>zsnit;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.zsoffset<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Output<sp/>times<sp/>for<sp/>comparisons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.endtime<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.outputtimestep<sp/>=<sp/>0.1;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.smallnc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.cf<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.frictionmodel<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Enforece<sp/>GPU/CPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.GPUDEVICE<sp/>=<sp/>gpu;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>outv<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;zb&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;h&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;zs&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;u&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;v&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Fqux&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Fqvx&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Fquy&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Fqvy&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Fhu&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Fhv&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dh&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dhu&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dhv&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Su&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Sv&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;dhdx&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dhdy&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dudx&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dvdx&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dzsdx&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;twet&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;hUmax&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Umean&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.outvars<sp/>=<sp/>outv;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.outmax<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.outmean<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.outtwet<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.ForceMassConserve<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>Model<sp/>setup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref><sp/>XModel;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref><sp/>XModel_g;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structForcing" kindref="compound">Forcing&lt;float&gt;</ref><sp/>XForcing;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structStaticForcingP" kindref="compound">StaticForcingP&lt;float&gt;</ref><sp/>bathy;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy.push_back(bathy);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialise<sp/>forcing<sp/>bathymetry<sp/>to<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].xo<sp/>=<sp/>-1.0;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].yo<sp/>=<sp/>-1.0;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].xmax<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].ymax<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].nx<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].ny<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].dx<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].dy<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(1,<sp/>1,<sp/>XForcing.left.blks,<sp/>XForcing.right.blks,<sp/>XForcing.top.blks,<sp/>XForcing.bot.blks);</highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(XForcing.Bathy[0].nx,<sp/>XForcing.Bathy[0].ny,<sp/>XForcing.Bathy[0].val);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>XForcing.Bathy[0].ny;<sp/>j++)</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>XForcing.Bathy[0].nx;<sp/>i++)</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.Bathy[0].val[i<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].nx]<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>Q<sp/>=<sp/>T(0.001);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>TheoryInput<sp/>=<sp/>Q<sp/>*<sp/>T(XParam.outputtimestep);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Create<sp/>a<sp/>temporary<sp/>file<sp/>with<sp/>river<sp/>fluxes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ofstream<sp/>river_file(</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;testriver.tmp&quot;</highlight><highlight class="normal">,<sp/>std::ios_base::out<sp/>|<sp/>std::ios_base::trunc);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>river_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;0.0<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(Q)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>river_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;3600.0<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(Q)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>river_file.close();<sp/></highlight><highlight class="comment">//destructor<sp/>implicitly<sp/>does<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classRiver" kindref="compound">River</ref><sp/>thisriver;</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/>thisriver.Riverflowfile<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;testriver.tmp&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>thisriver.xstart<sp/>=<sp/>-1.0<sp/>*<sp/>XParam.dx<sp/>*<sp/>3.0;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/>thisriver.xend<sp/>=<sp/>XParam.dx<sp/>*<sp/>3.0;</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>thisriver.ystart<sp/>=<sp/>-1.0<sp/>*<sp/>XParam.dx<sp/>*<sp/>3.0;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>thisriver.yend<sp/>=<sp/>XParam.dx<sp/>*<sp/>3.0;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.rivers.push_back(thisriver);</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.rivers[0].flowinput<sp/>=<sp/>readFlowfile(XForcing.rivers[0].Riverflowfile,<sp/>XParam.reftime);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>checkparamsanity(XParam,<sp/>XForcing);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>InitMesh(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>InitialConditions(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>InitialAdaptation(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/>SetupGPU(XParam,<sp/>XModel,<sp/>XForcing,<sp/>XModel_g);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structLoop" kindref="compound">Loop&lt;T&gt;</ref><sp/>XLoop;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop.hugenegval<sp/>=<sp/>std::numeric_limits&lt;T&gt;::min();</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop.hugeposval<sp/>=<sp/>std::numeric_limits&lt;T&gt;::max();</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop.epsilon<sp/>=<sp/>std::numeric_limits&lt;T&gt;::epsilon();</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop.totaltime<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//InitSave2Netcdf(XParam,<sp/>XModel);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop.nextoutputtime<sp/>=<sp/>XParam.outputtimestep;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop.dtmax<sp/>=<sp/>initdt(XParam,<sp/>XLoop,<sp/>XModel);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>initVol<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/>fillHaloC(XParam,<sp/>XModel.blocks,<sp/>XModel.zb);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>initial<sp/>water<sp/>volume</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>0;<sp/>ibl<sp/>&lt;<sp/>XParam.nblk;<sp/>ibl++)</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;bl=%d\tblockxo[bl]=%f\tblockyo[bl]=%f\n&quot;,<sp/>bl,<sp/>blockxo[bl],<sp/>blockyo[bl]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>XModel.blocks.active[ibl];</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delta<sp/>=<sp/>calcres(T(XParam.delta),<sp/>XModel.blocks.level[ib]);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy<sp/>=<sp/>0;<sp/>iy<sp/>&lt;<sp/>XParam.blkwidth;<sp/>iy++)</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>0;<sp/>ix<sp/>&lt;<sp/>XParam.blkwidth;<sp/>ix++)</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>memloc(XParam,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;h[%d]<sp/>=<sp/>%f\n&quot;,<sp/>n,<sp/>XModel.evolv.h[n]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initVol<sp/>=<sp/>initVol<sp/>+<sp/>XModel.evolv.h[n]<sp/>*<sp/>delta<sp/>*<sp/>delta;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//InitSave2Netcdf(XParam,<sp/>XModel);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>modelgood<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(XLoop.totaltime<sp/>&lt;<sp/>XLoop.nextoutputtime)</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.GPUDEVICE<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FlowGPU(XParam,<sp/>XLoop,<sp/>XForcing,<sp/>XModel_g);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;h[1]<sp/>=<sp/>%f\n&quot;</highlight><highlight class="normal">,<sp/>XModel.evolv.h[1]);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FlowCPU(XParam,<sp/>XLoop,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XLoop.totaltime<sp/>=<sp/>XLoop.totaltime<sp/>+<sp/>XLoop.dt;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Save2Netcdf(XParam,<sp/>XLoop,<sp/>XModel);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XLoop.nextoutputtime<sp/>-<sp/>XLoop.totaltime<sp/>&lt;=<sp/>XLoop.dt<sp/>*<sp/>T(0.00001))</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.GPUDEVICE<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ivar<sp/>=<sp/>0;<sp/>ivar<sp/>&lt;<sp/>XParam.outvars.size();<sp/>ivar++)</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CUDA_CHECK(cudaMemcpy(XModel.OutputVarMap[XParam.outvars[ivar]],<sp/>XModel_g.OutputVarMap[XParam.outvars[ivar]],<sp/>XParam.nblkmem<sp/>*<sp/>XParam.blksize<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T),<sp/>cudaMemcpyDeviceToHost));</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Save2Netcdf(XParam,<sp/>XLoop,<sp/>XModel);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>the<sp/>Validity<sp/>of<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finalVol<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>0;<sp/>ibl<sp/>&lt;<sp/>XParam.nblk;<sp/>ibl++)</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;bl=%d\tblockxo[bl]=%f\tblockyo[bl]=%f\n&quot;,<sp/>bl,<sp/>blockxo[bl],<sp/>blockyo[bl]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>XModel.blocks.active[ibl];</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delta<sp/>=<sp/>calcres(T(XParam.delta),<sp/>XModel.blocks.level[ib]);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy<sp/>=<sp/>0;<sp/>iy<sp/>&lt;<sp/>XParam.blkwidth;<sp/>iy++)</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>0;<sp/>ix<sp/>&lt;<sp/>XParam.blkwidth;<sp/>ix++)</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>memloc(XParam,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;h[%d]<sp/>=<sp/>%f\n&quot;,<sp/>n,<sp/>XModel.evolv.h[n]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finalVol<sp/>=<sp/>finalVol<sp/>+<sp/>XModel.evolv.h[n]<sp/>*<sp/>delta<sp/>*<sp/>delta;</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>error<sp/>=<sp/>((finalVol<sp/>-<sp/>initVol)<sp/>-<sp/>TheoryInput)<sp/>/<sp/>TheoryInput;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;error<sp/>=<sp/>%g<sp/>%%,<sp/>initial<sp/>volume=%4.4f;<sp/>final<sp/>Volume=%4.4f;<sp/>abs.<sp/>difference=%4.4f,<sp/>Theoretical<sp/><sp/>input=%4.4f<sp/>\n&quot;</highlight><highlight class="normal">,<sp/>error,<sp/>initVol,<sp/>finalVol,<sp/>abs(finalVol<sp/>-<sp/>initVol),<sp/>TheoryInput);</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>modelgood<sp/>=<sp/>abs(error)<sp/>&lt;<sp/>0.05;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!modelgood)</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InitSave2Netcdf(XParam,<sp/>XModel);</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;#####&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>modelgood;</highlight></codeline>
<codeline lineno="912"><highlight class="normal">}</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Rivertest&lt;float&gt;(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>zsnit,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gpu);</highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Rivertest&lt;double&gt;(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>zsnit,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gpu);</highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MassConserveSteepSlope(T<sp/>zsnit,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gpu)</highlight></codeline>
<codeline lineno="926"><highlight class="normal">{</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;#####&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classParam" kindref="compound">Param</ref><sp/>XParam;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>delta,<sp/>initVol,<sp/>finalVol,<sp/>TheoryInput;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialise<sp/>domain<sp/>and<sp/>required<sp/>resolution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.dx<sp/>=<sp/>1.0<sp/>/<sp/>((1<sp/>&lt;&lt;<sp/>8));</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.xo<sp/>=<sp/>-0.5;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.yo<sp/>=<sp/>-0.5;</highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.xmax<sp/>=<sp/>0.5;</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.ymax<sp/>=<sp/>0.5;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//level<sp/>8<sp/>is<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.initlevel<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.minlevel<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.maxlevel<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.AdaptCrit<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Threshold&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.Adapt_arg1<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;3.5&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.Adapt_arg2<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;zb&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.zsinit<sp/>=<sp/>zsnit;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.zsoffset<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Output<sp/>times<sp/>for<sp/>comparisons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.endtime<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.outputtimestep<sp/>=<sp/>0.04;</highlight><highlight class="comment">//0.035;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.smallnc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.cf<sp/>=<sp/>0.001;</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.frictionmodel<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.conserveElevation<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.ForceMassConserve<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Enforce<sp/>GPU/CPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.GPUDEVICE<sp/>=<sp/>gpu;</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>outv<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;zb&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;h&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;zs&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;u&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;v&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Fqux&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Fqvx&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Fquy&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Fqvy&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Fhu&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Fhv&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dh&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dhu&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dhv&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Su&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Sv&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;dhdx&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dhdy&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.outvars<sp/>=<sp/>outv;</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>Model<sp/>setup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref><sp/>XModel;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref><sp/>XModel_g;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structForcing" kindref="compound">Forcing&lt;float&gt;</ref><sp/>XForcing;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structStaticForcingP" kindref="compound">StaticForcingP&lt;float&gt;</ref><sp/>bathy;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy.push_back(bathy);</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialise<sp/>forcing<sp/>bathymetry<sp/>to<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].xo<sp/>=<sp/>-1.0;</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].yo<sp/>=<sp/>-1.0;</highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].xmax<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].ymax<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].nx<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].ny<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].dx<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].dy<sp/>=<sp/>XForcing.Bathy[0].dx;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(1,<sp/>1,<sp/>XForcing.left.blks,<sp/>XForcing.right.blks,<sp/>XForcing.top.blks,<sp/>XForcing.bot.blks);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(XForcing.Bathy[0].nx,<sp/>XForcing.Bathy[0].ny,<sp/>XForcing.Bathy[0].val);</highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>XForcing.Bathy[0].ny;<sp/>j++)</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>XForcing.Bathy[0].nx;<sp/>i++)</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.Bathy[0].val[i<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].nx]<sp/>=<sp/>T(i<sp/>*<sp/>4);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>Q<sp/>=<sp/>T(0.10);</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/>TheoryInput<sp/>=<sp/>Q<sp/>*<sp/>T(XParam.outputtimestep);</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Create<sp/>a<sp/>temporary<sp/>file<sp/>with<sp/>river<sp/>fluxes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ofstream<sp/>river_file(</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;testriver.tmp&quot;</highlight><highlight class="normal">,<sp/>std::ios_base::out<sp/>|<sp/>std::ios_base::trunc);</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/>river_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;0.0<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(Q)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/>river_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;3600.0<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(Q)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/>river_file.close();<sp/></highlight><highlight class="comment">//destructor<sp/>implicitly<sp/>does<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classRiver" kindref="compound">River</ref><sp/>thisriver;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/>thisriver.Riverflowfile<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;testriver.tmp&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/>thisriver.xstart<sp/>=<sp/>-1.0<sp/>*<sp/>XParam.dx<sp/>*<sp/>3.0;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/>thisriver.xend<sp/>=<sp/>XParam.dx<sp/>*<sp/>3.0;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/>thisriver.ystart<sp/>=<sp/>-1.0<sp/>*<sp/>XParam.dx<sp/>*<sp/>3.0;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/>thisriver.yend<sp/>=<sp/>XParam.dx<sp/>*<sp/>3.0;</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.rivers.push_back(thisriver);</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.rivers[0].flowinput<sp/>=<sp/>readFlowfile(XForcing.rivers[0].Riverflowfile,<sp/>XParam.reftime);</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/>checkparamsanity(XParam,<sp/>XForcing);</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/>InitMesh(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/>InitialConditions(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/>InitialAdaptation(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/>SetupGPU(XParam,<sp/>XModel,<sp/>XForcing,<sp/>XModel_g);</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structLoop" kindref="compound">Loop&lt;T&gt;</ref><sp/>XLoop;</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop.hugenegval<sp/>=<sp/>std::numeric_limits&lt;T&gt;::min();</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop.hugeposval<sp/>=<sp/>std::numeric_limits&lt;T&gt;::max();</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop.epsilon<sp/>=<sp/>std::numeric_limits&lt;T&gt;::epsilon();</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop.totaltime<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/>InitSave2Netcdf(XParam,<sp/>XModel);</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop.nextoutputtime<sp/>=<sp/>XParam.outputtimestep;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop.dtmax<sp/>=<sp/>0.025;</highlight><highlight class="comment">//<sp/>initdt(XParam,<sp/>XLoop,<sp/>XModel);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>0;<sp/>ibl<sp/>&lt;<sp/>XParam.nblk;<sp/>ibl++)</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;bl=%d\tblockxo[bl]=%f\tblockyo[bl]=%f\n&quot;,<sp/>bl,<sp/>blockxo[bl],<sp/>blockyo[bl]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>XModel.blocks.active[ibl];</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//delta<sp/>=<sp/>calcres(XParam.dx,<sp/>XModel.blocks.level[ib]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy<sp/>=<sp/>0;<sp/>iy<sp/>&lt;<sp/>XParam.blkwidth;<sp/>iy++)</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>0;<sp/>ix<sp/>&lt;<sp/>XParam.blkwidth;<sp/>ix++)</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>memloc(XParam,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XModel.zb[n]<sp/>&lt;<sp/>XParam.eps)</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;ix=%d,<sp/>iy=%d,<sp/>ib=%d,<sp/>n=%d;<sp/>zb=%f<sp/>\n&quot;</highlight><highlight class="normal">,<sp/>ix,<sp/>iy,<sp/>ib,<sp/>n,<sp/>XModel.zb[n]);</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.GPUDEVICE<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudaStream_t<sp/>stream;</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CUDA_CHECK(cudaStreamCreate(&amp;stream));</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fillHaloGPU(XParam,<sp/>XModel_g.blocks,<sp/>stream,<sp/>XModel_g.zb);</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudaStreamDestroy(stream);</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fillHaloC(XParam,<sp/>XModel.blocks,<sp/>XModel.zb);</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/>initVol<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>initial<sp/>water<sp/>volume</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>0;<sp/>ibl<sp/>&lt;<sp/>XParam.nblk;<sp/>ibl++)</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;bl=%d\tblockxo[bl]=%f\tblockyo[bl]=%f\n&quot;,<sp/>bl,<sp/>blockxo[bl],<sp/>blockyo[bl]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>XModel.blocks.active[ibl];</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delta<sp/>=<sp/>calcres(T(XParam.delta),<sp/>XModel.blocks.level[ib]);</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy<sp/>=<sp/>0;<sp/>iy<sp/>&lt;<sp/>XParam.blkwidth;<sp/>iy++)</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>0;<sp/>ix<sp/>&lt;<sp/>XParam.blkwidth;<sp/>ix++)</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>memloc(XParam,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initVol<sp/>=<sp/>initVol<sp/>+<sp/>XModel.evolv.h[n]<sp/>*<sp/>delta<sp/>*<sp/>delta;</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//InitSave2Netcdf(XParam,<sp/>XModel);+</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>modelgood<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(XLoop.totaltime<sp/>&lt;<sp/>XLoop.nextoutputtime)</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.GPUDEVICE<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FlowGPU(XParam,<sp/>XLoop,<sp/>XForcing,<sp/>XModel_g);</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FlowCPU(XParam,<sp/>XLoop,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XLoop.totaltime<sp/>=<sp/>XLoop.totaltime<sp/>+<sp/>XLoop.dt;</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Save2Netcdf(XParam,<sp/>XLoop,<sp/>XModel);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XLoop.nextoutputtime<sp/>-<sp/>XLoop.totaltime<sp/>&lt;=<sp/>XLoop.dt<sp/>*<sp/>T(0.00001)<sp/>&amp;&amp;<sp/>XParam.outputtimestep<sp/>&gt;<sp/>0.0)</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.GPUDEVICE<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ivar<sp/>=<sp/>0;<sp/>ivar<sp/>&lt;<sp/>XParam.outvars.size();<sp/>ivar++)</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CUDA_CHECK(cudaMemcpy(XModel.OutputVarMap[XParam.outvars[ivar]],<sp/>XModel_g.OutputVarMap[XParam.outvars[ivar]],<sp/>XParam.nblkmem<sp/>*<sp/>XParam.blksize<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T),<sp/>cudaMemcpyDeviceToHost));</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Save2Netcdf(XParam,<sp/>XLoop,<sp/>XModel);</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>the<sp/>Validity<sp/>of<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finalVol<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>0;<sp/>ibl<sp/>&lt;<sp/>XParam.nblk;<sp/>ibl++)</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;bl=%d\tblockxo[bl]=%f\tblockyo[bl]=%f\n&quot;,<sp/>bl,<sp/>blockxo[bl],<sp/>blockyo[bl]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>XModel.blocks.active[ibl];</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delta<sp/>=<sp/>calcres(T(XParam.delta),<sp/>XModel.blocks.level[ib]);</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy<sp/>=<sp/>0;<sp/>iy<sp/>&lt;<sp/>XParam.blkwidth;<sp/>iy++)</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>0;<sp/>ix<sp/>&lt;<sp/>XParam.blkwidth;<sp/>ix++)</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>memloc(XParam,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finalVol<sp/>=<sp/>finalVol<sp/>+<sp/>XModel.evolv.h[n]<sp/>*<sp/>delta<sp/>*<sp/>delta;</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>error<sp/>=<sp/>(finalVol<sp/>-<sp/>initVol)<sp/>-<sp/>TheoryInput;</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>modelgood<sp/>=<sp/>error<sp/>/<sp/>TheoryInput<sp/>&lt;<sp/>0.05;</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;#####&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>modelgood;</highlight></codeline>
<codeline lineno="1171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MassConserveSteepSlope&lt;float&gt;(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>zsnit,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gpu);</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MassConserveSteepSlope&lt;double&gt;(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>zsnit,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gpu);</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>reductiontest(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref><sp/>XModel,<sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref><sp/>XModel_g)</highlight></codeline>
<codeline lineno="1181"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/>dim3<sp/>blockDim(XParam.blkwidth,<sp/>XParam.blkwidth,<sp/>1);</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/>dim3<sp/>gridDim(XParam.nblk,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//srand(seed);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>mininput<sp/>=<sp/>T(rand())<sp/>/<sp/>T(RAND_MAX);</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>test<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structLoop" kindref="compound">Loop&lt;T&gt;</ref><sp/>XLoop;</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop.hugenegval<sp/>=<sp/>std::numeric_limits&lt;T&gt;::min();</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop.hugeposval<sp/>=<sp/>std::numeric_limits&lt;T&gt;::max();</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop.epsilon<sp/>=<sp/>std::numeric_limits&lt;T&gt;::epsilon();</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop.totaltime<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//InitSave2Netcdf(XParam,<sp/>XModel);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop.nextoutputtime<sp/>=<sp/>mininput<sp/>*<sp/>T(2.0);</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop.dtmax<sp/>=<sp/>mininput<sp/>*<sp/>T(2.01);</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>in<sp/>dtmax<sp/>with<sp/>random<sp/>values<sp/>that<sp/>are<sp/>larger<sp/>than<sp/><sp/>mininput</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>0;<sp/>ibl<sp/>&lt;<sp/>XParam.nblk;<sp/>ibl++)</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>XModel.blocks.active[ibl];</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy<sp/>=<sp/>0;<sp/>iy<sp/>&lt;<sp/>XParam.blkwidth;<sp/>iy++)</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>0;<sp/>ix<sp/>&lt;<sp/>XParam.blkwidth;<sp/>ix++)</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>memloc(XParam,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XModel.time.dtmax[n]<sp/>=<sp/>mininput<sp/>*<sp/>T(1.1)<sp/>+<sp/>utils::max(T(rand())<sp/>/<sp/>T(RAND_MAX),<sp/>T(0.0));</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>randomly<sp/>select<sp/>a<sp/>block<sp/>a<sp/>i<sp/>and<sp/>a<sp/>j<sp/>were<sp/>the<sp/>maximum<sp/>value<sp/>will<sp/>be<sp/>relocated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibbl<sp/>=<sp/>ftoi(floor(T(rand())<sp/>/<sp/>T(RAND_MAX)<sp/>*<sp/>XParam.nblk));</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibb<sp/>=<sp/>XModel.blocks.active[ibbl];</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ixx<sp/>=<sp/>ftoi(floor(T(rand())<sp/>/<sp/>T(RAND_MAX)<sp/>*<sp/>XParam.blkwidth));</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iyy<sp/>=<sp/>ftoi(floor(T(rand())<sp/>/<sp/>T(RAND_MAX)<sp/>*<sp/>XParam.blkwidth));</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nn<sp/>=<sp/>memloc(XParam,<sp/>ixx,<sp/>iyy,<sp/>ibb);</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/>XModel.time.dtmax[nn]<sp/>=<sp/>mininput;</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>reducedt<sp/>=<sp/>CalctimestepCPU(XParam,<sp/>XLoop,<sp/>XModel.blocks,<sp/>XModel.time);</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/>test<sp/>=<sp/>abs(reducedt<sp/>-<sp/>mininput)<sp/>&lt;<sp/>T(100.0)<sp/>*<sp/>(XLoop.epsilon);</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>testgpu;</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test)</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[256];<sp/>sprintf(buffer,<sp/></highlight><highlight class="stringliteral">&quot;%e&quot;</highlight><highlight class="normal">,<sp/>abs(reducedt<sp/>-<sp/>mininput));</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>str(buffer);</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t\t<sp/>CPU<sp/>test<sp/>failed!<sp/>:<sp/>Expected=&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(mininput)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;;<sp/><sp/>Reduced=&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(reducedt)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;;<sp/><sp/>error=&quot;</highlight><highlight class="normal"><sp/>+<sp/>str);</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.GPUDEVICE<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reset_var<sp/>&lt;&lt;&lt;<sp/>gridDim,<sp/>blockDim,<sp/>0<sp/>&gt;&gt;&gt;<sp/>(XParam.halowidth,<sp/>XModel_g.blocks.active,<sp/>XLoop.hugeposval,<sp/>XModel_g.time.dtmax);</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CUDA_CHECK(cudaDeviceSynchronize());</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CopytoGPU(XParam.nblkmem,<sp/>XParam.blksize,<sp/>XModel.time.dtmax,<sp/>XModel_g.time.dtmax);</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>reducedtgpu<sp/>=<sp/>CalctimestepGPU(XParam,<sp/>XLoop,<sp/>XModel_g.blocks,<sp/>XModel_g.time);</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testgpu<sp/>=<sp/>abs(reducedtgpu<sp/>-<sp/>mininput)<sp/>&lt;<sp/>T(100.0)<sp/>*<sp/>(XLoop.epsilon);</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!testgpu)</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[256];<sp/>sprintf(buffer,<sp/></highlight><highlight class="stringliteral">&quot;%e&quot;</highlight><highlight class="normal">,<sp/>abs(reducedtgpu<sp/>-<sp/>mininput));</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>str(buffer);</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t\t<sp/>GPU<sp/>test<sp/>failed!<sp/>:<sp/>Expected=&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(mininput)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;;<sp/><sp/>Reduced=&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(reducedtgpu)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;;<sp/><sp/>error=&quot;</highlight><highlight class="normal"><sp/>+<sp/>str);</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(reducedtgpu<sp/>-<sp/>reducedt)<sp/>&gt;<sp/>T(100.0)<sp/>*<sp/>(XLoop.epsilon))</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[256];<sp/>sprintf(buffer,<sp/></highlight><highlight class="stringliteral">&quot;%e&quot;</highlight><highlight class="normal">,<sp/>abs(reducedtgpu<sp/>-<sp/>reducedt));</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>str(buffer);</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t\t<sp/>CPU<sp/>vs<sp/>GPU<sp/>test<sp/>failed!<sp/>:<sp/>Expected=&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(reducedt)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;;<sp/><sp/>Reduced=&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(reducedtgpu)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;;<sp/><sp/>error=&quot;</highlight><highlight class="normal"><sp/>+<sp/>str);</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test<sp/>=<sp/>test<sp/>&amp;&amp;<sp/>testgpu;</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test;</highlight></codeline>
<codeline lineno="1268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>reductiontest&lt;float&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structModel" kindref="compound">Model&lt;float&gt;</ref><sp/>XModel,<sp/><ref refid="structModel" kindref="compound">Model&lt;float&gt;</ref><sp/>XModel_g);</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>reductiontest&lt;double&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structModel" kindref="compound">Model&lt;double&gt;</ref><sp/>XModel,<sp/><ref refid="structModel" kindref="compound">Model&lt;double&gt;</ref><sp/>XModel_g);</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CPUGPUtest(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref><sp/>XModel,<sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref><sp/>XModel_g)</highlight></codeline>
<codeline lineno="1277"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>test<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>initdepth<sp/>=<sp/>T(0.1);</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>testamp<sp/>=<sp/>T(1.0);</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/>dim3<sp/>blockDim(XParam.blkwidth,<sp/>XParam.blkwidth,<sp/>1);</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/>dim3<sp/>gridDim(XParam.nblk,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>flux<sp/>reconstruction<sp/>the<sp/>loop<sp/>overlap<sp/>the<sp/>right(or<sp/>top<sp/>for<sp/>the<sp/>y<sp/>direction)<sp/>halo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/>dim3<sp/>blockDimKX(XParam.blkwidth<sp/>+<sp/>XParam.halowidth,<sp/>XParam.blkwidth,<sp/>1);</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/>dim3<sp/>blockDimKY(XParam.blkwidth,<sp/>XParam.blkwidth<sp/>+<sp/>XParam.halowidth,<sp/>1);</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/>InitArrayBUQ(XParam,<sp/>XModel.blocks,<sp/>T(0.0),<sp/>XModel.zb);</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/>InitArrayBUQ(XParam,<sp/>XModel.blocks,<sp/>T(initdepth),<sp/>XModel.evolv.zs);</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/>InitArrayBUQ(XParam,<sp/>XModel.blocks,<sp/>T(initdepth),<sp/>XModel.evolv.h);</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/>InitArrayBUQ(XParam,<sp/>XModel.blocks,<sp/>T(0.0),<sp/>XModel.evolv.u);</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/>InitArrayBUQ(XParam,<sp/>XModel.blocks,<sp/>T(0.0),<sp/>XModel.evolv.v);</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/>reset_var<sp/>&lt;&lt;&lt;<sp/>gridDim,<sp/>blockDim,<sp/>0<sp/>&gt;&gt;&gt;<sp/>(XParam.halowidth,<sp/>XModel_g.blocks.active,<sp/>T(0.0),<sp/>XModel_g.zb);</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/>CUDA_CHECK(cudaDeviceSynchronize());</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>some<sp/>usefull<sp/>vectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>evolvst[4]<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;h&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;zs&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;u&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;v&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>evolvVar;</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nv<sp/>=<sp/>0;<sp/>nv<sp/>&lt;<sp/>4;<sp/>nv++)</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>evolvVar.push_back(evolvst[nv]);</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>fillhalo<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fill<sp/>with<sp/>all<sp/>evolv<sp/>array<sp/>with<sp/>random<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1314"><highlight class="comment"><sp/><sp/><sp/><sp/>fillrandom(XParam,<sp/>XModel.blocks,<sp/>XModel.evolv.zs);</highlight></codeline>
<codeline lineno="1315"><highlight class="comment"><sp/><sp/><sp/><sp/>fillrandom(XParam,<sp/>XModel.blocks,<sp/>XModel.evolv.h);</highlight></codeline>
<codeline lineno="1316"><highlight class="comment"><sp/><sp/><sp/><sp/>fillrandom(XParam,<sp/>XModel.blocks,<sp/>XModel.evolv.u);</highlight></codeline>
<codeline lineno="1317"><highlight class="comment"><sp/><sp/><sp/><sp/>fillrandom(XParam,<sp/>XModel.blocks,<sp/>XModel.evolv.v);</highlight></codeline>
<codeline lineno="1318"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/>fillgauss(XParam,<sp/>XModel.blocks,<sp/>testamp,<sp/>XModel.evolv.zs);</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/>fillgauss(XParam,<sp/>XModel.blocks,<sp/>testamp,<sp/>XModel.evolv.h);</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/>fillgauss(XParam,<sp/>XModel.blocks,<sp/>T(0.5<sp/>*<sp/>testamp),<sp/>XModel.evolv.u);</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/>fillgauss(XParam,<sp/>XModel.blocks,<sp/>T(0.5<sp/>*<sp/>testamp),<sp/>XModel.evolv.v);</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//copy<sp/>to<sp/>GPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/>CopytoGPU(XParam.nblkmem,<sp/>XParam.blksize,<sp/>XModel.evolv,<sp/>XModel_g.evolv);</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//============================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Fill<sp/>the<sp/>halo<sp/>for<sp/>gradient<sp/>reconstruction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/>fillHalo(XParam,<sp/>XModel.blocks,<sp/>XModel.evolv,<sp/>XModel.zb);</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/>fillHaloGPU(XParam,<sp/>XModel_g.blocks,<sp/>XModel_g.evolv,<sp/>XModel_g.zb);</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/>CompareCPUvsGPU(XParam,<sp/>XModel,<sp/>XModel_g,<sp/>evolvVar,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//============================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//perform<sp/>gradient<sp/>reconstruction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//gradientCPU(XParam,<sp/>XModel.blocks,<sp/>XModel.evolv,<sp/>XModel.grad,<sp/>XModel.zb);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//gradientGPU(XParam,<sp/>XModel_g.blocks,<sp/>XModel_g.evolv,<sp/>XModel_g.grad,<sp/>XModel.zb);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>CPU<sp/>gradients</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/>std::thread<sp/>t0(&amp;gradientC&lt;T&gt;,<sp/>XParam,<sp/>XModel.blocks,<sp/>XModel.evolv.h,<sp/>XModel.grad.dhdx,<sp/>XModel.grad.dhdy);</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/>std::thread<sp/>t1(&amp;gradientC&lt;T&gt;,<sp/>XParam,<sp/>XModel.blocks,<sp/>XModel.evolv.zs,<sp/>XModel.grad.dzsdx,<sp/>XModel.grad.dzsdy);</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/>std::thread<sp/>t2(&amp;gradientC&lt;T&gt;,<sp/>XParam,<sp/>XModel.blocks,<sp/>XModel.evolv.u,<sp/>XModel.grad.dudx,<sp/>XModel.grad.dudy);</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/>std::thread<sp/>t3(&amp;gradientC&lt;T&gt;,<sp/>XParam,<sp/>XModel.blocks,<sp/>XModel.evolv.v,<sp/>XModel.grad.dvdx,<sp/>XModel.grad.dvdy);</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/>t0.join();</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/>t1.join();</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/>t2.join();</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/>t3.join();</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//GPU<sp/>gradients</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1352"><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/>gradient<sp/>&lt;&lt;&lt;<sp/>gridDim,<sp/>blockDim,<sp/>0<sp/>&gt;&gt;&gt;<sp/>(XParam.halowidth,<sp/>XModel_g.blocks.active,<sp/>XModel_g.blocks.level,<sp/>(T)XParam.theta,<sp/>(T)XParam.delta,<sp/>XModel_g.evolv.h,<sp/>XModel_g.grad.dhdx,<sp/>XModel_g.grad.dhdy);</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/>CUDA_CHECK(cudaDeviceSynchronize());</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/>gradient<sp/>&lt;&lt;&lt;<sp/>gridDim,<sp/>blockDim,<sp/>0<sp/>&gt;&gt;&gt;<sp/>(XParam.halowidth,<sp/>XModel_g.blocks.active,<sp/>XModel_g.blocks.level,<sp/>(T)XParam.theta,<sp/>(T)XParam.delta,<sp/>XModel_g.evolv.zs,<sp/>XModel_g.grad.dzsdx,<sp/>XModel_g.grad.dzsdy);</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/>CUDA_CHECK(cudaDeviceSynchronize());</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/>gradient<sp/>&lt;&lt;&lt;<sp/>gridDim,<sp/>blockDim,<sp/>0<sp/>&gt;&gt;&gt;<sp/>(XParam.halowidth,<sp/>XModel_g.blocks.active,<sp/>XModel_g.blocks.level,<sp/>(T)XParam.theta,<sp/>(T)XParam.delta,<sp/>XModel_g.evolv.u,<sp/>XModel_g.grad.dudx,<sp/>XModel_g.grad.dudy);</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/>CUDA_CHECK(cudaDeviceSynchronize());</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/>gradient<sp/>&lt;&lt;&lt;<sp/>gridDim,<sp/>blockDim,<sp/>0<sp/>&gt;&gt;&gt;<sp/>(XParam.halowidth,<sp/>XModel_g.blocks.active,<sp/>XModel_g.blocks.level,<sp/>(T)XParam.theta,<sp/>(T)XParam.delta,<sp/>XModel_g.evolv.v,<sp/>XModel_g.grad.dvdx,<sp/>XModel_g.grad.dvdy);</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/>CUDA_CHECK(cudaDeviceSynchronize());</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>gradst[8]<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;dhdx&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;dzsdx&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;dudx&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;dvdx&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;dhdy&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;dzsdy&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;dudy&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;dvdy&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>gradVar;</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nv<sp/>=<sp/>0;<sp/>nv<sp/>&lt;<sp/>8;<sp/>nv++)</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gradVar.push_back(gradst[nv]);</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/>CompareCPUvsGPU(XParam,<sp/>XModel,<sp/>XModel_g,<sp/>gradVar,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Gradient<sp/>in<sp/>Halo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>CPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/>gradientHalo(XParam,<sp/>XModel.blocks,<sp/>XModel.evolv.h,<sp/>XModel.grad.dhdx,<sp/>XModel.grad.dhdy);</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/>gradientHalo(XParam,<sp/>XModel.blocks,<sp/>XModel.evolv.zs,<sp/>XModel.grad.dzsdx,<sp/>XModel.grad.dzsdy);</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/>gradientHalo(XParam,<sp/>XModel.blocks,<sp/>XModel.evolv.u,<sp/>XModel.grad.dudx,<sp/>XModel.grad.dudy);</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/>gradientHalo(XParam,<sp/>XModel.blocks,<sp/>XModel.evolv.v,<sp/>XModel.grad.dvdx,<sp/>XModel.grad.dvdy);</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>GPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/>gradientHaloGPU(XParam,<sp/>XModel_g.blocks,<sp/>XModel_g.evolv.h,<sp/>XModel_g.grad.dhdx,<sp/>XModel_g.grad.dhdy);</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/>gradientHaloGPU(XParam,<sp/>XModel_g.blocks,<sp/>XModel_g.evolv.zs,<sp/>XModel_g.grad.dzsdx,<sp/>XModel_g.grad.dzsdy);</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/>gradientHaloGPU(XParam,<sp/>XModel_g.blocks,<sp/>XModel_g.evolv.u,<sp/>XModel_g.grad.dudx,<sp/>XModel_g.grad.dudy);</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/>gradientHaloGPU(XParam,<sp/>XModel_g.blocks,<sp/>XModel_g.evolv.v,<sp/>XModel_g.grad.dvdx,<sp/>XModel_g.grad.dvdy);</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/>CompareCPUvsGPU(XParam,<sp/>XModel,<sp/>XModel_g,<sp/>gradVar,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//============================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Kurganov<sp/>scheme</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>fluxst[8]<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;Fhu&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Su&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Fqux&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Fqvx&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Fhv&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Sv&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Fqvy&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Fquy&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>fluxVar;</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nv<sp/>=<sp/>0;<sp/>nv<sp/>&lt;<sp/>8;<sp/>nv++)</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fluxVar.push_back(fluxst[nv]);</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/>updateKurgXCPU(XParam,<sp/>XModel.blocks,<sp/>XModel.evolv,<sp/>XModel.grad,<sp/>XModel.flux,<sp/>XModel.time.dtmax,<sp/>XModel.zb);</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//GPU<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/>updateKurgXGPU<sp/>&lt;&lt;&lt;<sp/>gridDim,<sp/>blockDimKX,<sp/>0<sp/>&gt;&gt;&gt;<sp/>(XParam,<sp/>XModel_g.blocks,<sp/>XModel_g.evolv,<sp/>XModel_g.grad,<sp/>XModel_g.flux,<sp/>XModel_g.time.dtmax,<sp/>XModel_g.zb);</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/>CUDA_CHECK(cudaDeviceSynchronize());</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Y-<sp/>direction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/>updateKurgYCPU(XParam,<sp/>XModel.blocks,<sp/>XModel.evolv,<sp/>XModel.grad,<sp/>XModel.flux,<sp/>XModel.time.dtmax,<sp/>XModel.zb);</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/>updateKurgYGPU<sp/>&lt;&lt;&lt;<sp/>gridDim,<sp/>blockDimKY,<sp/>0<sp/>&gt;&gt;&gt;<sp/>(XParam,<sp/>XModel_g.blocks,<sp/>XModel_g.evolv,<sp/>XModel_g.grad,<sp/>XModel_g.flux,<sp/>XModel_g.time.dtmax,<sp/>XModel_g.zb);</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/>CUDA_CHECK(cudaDeviceSynchronize());</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/>CompareCPUvsGPU(XParam,<sp/>XModel,<sp/>XModel_g,<sp/>fluxVar,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal"></highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/>fillHalo(XParam,<sp/>XModel.blocks,<sp/>XModel.flux);</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/>fillHaloGPU(XParam,<sp/>XModel_g.blocks,<sp/>XModel_g.flux);</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"></highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/>CompareCPUvsGPU(XParam,<sp/>XModel,<sp/>XModel_g,<sp/>fluxVar,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//============================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>advst[3]<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;dh&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;dhu&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;dhv&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>advVar;</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nv<sp/>=<sp/>0;<sp/>nv<sp/>&lt;<sp/>3;<sp/>nv++)</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>advVar.push_back(advst[nv]);</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/>updateEVCPU(XParam,<sp/>XModel.blocks,<sp/>XModel.evolv,<sp/>XModel.flux,<sp/>XModel.adv);</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/>updateEVGPU<sp/>&lt;&lt;&lt;<sp/>gridDim,<sp/>blockDim,<sp/>0<sp/>&gt;&gt;&gt;<sp/>(XParam,<sp/>XModel_g.blocks,<sp/>XModel_g.evolv,<sp/>XModel_g.flux,<sp/>XModel_g.adv);</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/>CUDA_CHECK(cudaDeviceSynchronize());</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/>CompareCPUvsGPU(XParam,<sp/>XModel,<sp/>XModel_g,<sp/>advVar,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"></highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//============================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Advance<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>evost[4]<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;zso&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;ho&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;uo&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;vo&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>evoVar;</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nv<sp/>=<sp/>0;<sp/>nv<sp/>&lt;<sp/>4;<sp/>nv++)</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>evoVar.push_back(evost[nv]);</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/>AdvkernelCPU(XParam,<sp/>XModel.blocks,<sp/>T(0.0005),<sp/>XModel.zb,<sp/>XModel.evolv,<sp/>XModel.adv,<sp/>XModel.evolv_o);</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/>AdvkernelGPU<sp/>&lt;&lt;&lt;<sp/>gridDim,<sp/>blockDim,<sp/>0<sp/>&gt;&gt;&gt;<sp/>(XParam,<sp/>XModel_g.blocks,<sp/>T(0.0005),<sp/>XModel_g.zb,<sp/>XModel_g.evolv,<sp/>XModel_g.adv,<sp/>XModel_g.evolv_o);</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/>CUDA_CHECK(cudaDeviceSynchronize());</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/>CompareCPUvsGPU(XParam,<sp/>XModel,<sp/>XModel_g,<sp/>evoVar,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//============================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Bottom<sp/>friction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/>bottomfrictionCPU(XParam,<sp/>XModel.blocks,<sp/>T(0.5),<sp/>XModel.cf,<sp/>XModel.evolv_o);</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/>bottomfrictionGPU<sp/>&lt;&lt;&lt;<sp/>gridDim,<sp/>blockDim,<sp/>0<sp/>&gt;&gt;&gt;<sp/>(XParam,<sp/>XModel_g.blocks,<sp/>T(0.5),<sp/>XModel_g.cf,<sp/>XModel_g.evolv_o);</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/>CUDA_CHECK(cudaDeviceSynchronize());</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/>CompareCPUvsGPU(XParam,<sp/>XModel,<sp/>XModel_g,<sp/>evoVar,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"></highlight></codeline>
<codeline lineno="1467"><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//============================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Repeat<sp/>the<sp/>full<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structLoop" kindref="compound">Loop&lt;T&gt;</ref><sp/>XLoop;</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structLoop" kindref="compound">Loop&lt;T&gt;</ref><sp/>XLoop_g;</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.endtime<sp/>=<sp/>utils::min(0.5<sp/>*<sp/>(XParam.ymax<sp/>-<sp/>XParam.yo),<sp/>0.5<sp/>*<sp/>(XParam.xmax<sp/>-<sp/>XParam.xo))<sp/>/<sp/>(sqrt(XParam.g<sp/>*<sp/>(testamp<sp/>+<sp/>initdepth)));</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.outputtimestep<sp/>=<sp/>XParam.endtime<sp/>/<sp/>10.0;</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"></highlight></codeline>
<codeline lineno="1476"><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop.hugenegval<sp/>=<sp/>std::numeric_limits&lt;T&gt;::min();</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop.hugeposval<sp/>=<sp/>std::numeric_limits&lt;T&gt;::max();</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop.epsilon<sp/>=<sp/>std::numeric_limits&lt;T&gt;::epsilon();</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop.totaltime<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//InitSave2Netcdf(XParam,<sp/>XModel);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop.nextoutputtime<sp/>=<sp/>XParam.outputtimestep;</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop.dtmax<sp/>=<sp/>initdt(XParam,<sp/>XLoop,<sp/>XModel);</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop_g.hugenegval<sp/>=<sp/>std::numeric_limits&lt;T&gt;::min();</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop_g.hugeposval<sp/>=<sp/>std::numeric_limits&lt;T&gt;::max();</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop_g.epsilon<sp/>=<sp/>std::numeric_limits&lt;T&gt;::epsilon();</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop_g.totaltime<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//InitSave2Netcdf(XParam,<sp/>XModel);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop_g.nextoutputtime<sp/>=<sp/>XLoop.nextoutputtime;</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop_g.dtmax<sp/>=<sp/>XLoop.dtmax;</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>outvi[18]<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;zb&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;h&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;zs&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;u&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;v&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Fqux&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Fqvx&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Fquy&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Fqvy&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Fhu&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Fhv&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dh&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dhu&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dhv&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ho&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;vo&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;uo&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;cf&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>outv;</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nv<sp/>=<sp/>0;<sp/>nv<sp/>&lt;<sp/>18;<sp/>nv++)</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outv.push_back(outvi[nv]);</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"></highlight></codeline>
<codeline lineno="1508"><highlight class="normal"></highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/>InitArrayBUQ(XParam,<sp/>XModel.blocks,<sp/>T(0.0),<sp/>XModel.evolv.u);</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/>InitArrayBUQ(XParam,<sp/>XModel.blocks,<sp/>T(0.0),<sp/>XModel.evolv.v);</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/>reset_var<sp/>&lt;&lt;&lt;<sp/>gridDim,<sp/>blockDim,<sp/>0<sp/>&gt;&gt;&gt;<sp/>(XParam.halowidth,<sp/>XModel_g.blocks.active,<sp/>T(0.0),<sp/>XModel_g.evolv.u);</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/>CUDA_CHECK(cudaDeviceSynchronize());</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"></highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/>reset_var<sp/>&lt;&lt;&lt;<sp/>gridDim,<sp/>blockDim,<sp/>0<sp/>&gt;&gt;&gt;<sp/>(XParam.halowidth,<sp/>XModel_g.blocks.active,<sp/>T(0.0),<sp/>XModel_g.evolv.v);</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/>CUDA_CHECK(cudaDeviceSynchronize());</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"></highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structForcing" kindref="compound">Forcing&lt;float&gt;</ref><sp/>XForcing;</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(XLoop.totaltime<sp/>&lt;<sp/>XParam.endtime)</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FlowGPU(XParam,<sp/>XLoop_g,<sp/>XForcing,<sp/>XModel_g);</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FlowCPU(XParam,<sp/>XLoop,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"></highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XLoop.totaltime<sp/>=<sp/>XLoop.totaltime<sp/>+<sp/>XLoop.dt;</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XLoop_g.totaltime<sp/>=<sp/>XLoop_g.totaltime<sp/>+<sp/>XLoop_g.dt;</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XLoop.nextoutputtime<sp/>-<sp/>XLoop.totaltime<sp/>&lt;=<sp/>XLoop.dt<sp/>*<sp/>T(0.00001)<sp/>&amp;&amp;<sp/>XParam.outputtimestep<sp/>&gt;<sp/>0.0)</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CompareCPUvsGPU(XParam,<sp/>XModel,<sp/>XModel_g,<sp/>outv,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XLoop.nextoutputtime<sp/>=<sp/>min(XLoop.nextoutputtime<sp/>+<sp/>XParam.outputtimestep,<sp/>XParam.endtime);</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XLoop_g.nextoutputtime<sp/>=<sp/>XLoop.nextoutputtime;</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"></highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test;</highlight></codeline>
<codeline lineno="1535"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/>T<sp/>ValleyBathy(T<sp/>x,<sp/>T<sp/>y,<sp/>T<sp/>slope,<sp/>T<sp/>center)</highlight></codeline>
<codeline lineno="1545"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>bathy;</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"></highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/>bathy<sp/>=<sp/>(abs(x<sp/>-<sp/>center)<sp/>+<sp/>y)<sp/>*<sp/>slope;</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"></highlight></codeline>
<codeline lineno="1552"><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bathy;</highlight></codeline>
<codeline lineno="1554"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"></highlight></codeline>
<codeline lineno="1556"><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/>T<sp/>ThackerBathy(T<sp/>x,<sp/>T<sp/>y,<sp/>T<sp/>L,<sp/>T<sp/>D)</highlight></codeline>
<codeline lineno="1569"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"></highlight></codeline>
<codeline lineno="1571"><highlight class="normal"></highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>bathy<sp/>=<sp/>D<sp/>*<sp/>((x<sp/>*<sp/>x<sp/>+<sp/>y<sp/>*<sp/>y)<sp/>/<sp/>(L<sp/>*<sp/>L)<sp/>-<sp/>1.0);</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"></highlight></codeline>
<codeline lineno="1574"><highlight class="normal"></highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bathy;</highlight></codeline>
<codeline lineno="1576"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ThackerLakeAtRest(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/>T<sp/>zsinit)</highlight></codeline>
<codeline lineno="1591"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>test<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>a<sp/>Parabolic<sp/>bathy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1594"><highlight class="normal"></highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>modeltype<sp/>=<sp/>XParam.doubleprecision<sp/>&lt;<sp/>1<sp/>?<sp/>float()<sp/>:<sp/>double();</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structModel" kindref="compound">Model</ref>&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(modeltype)&gt;<sp/>XModel;<sp/></highlight><highlight class="comment">//<sp/>For<sp/>CPU<sp/>pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structModel" kindref="compound">Model</ref>&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(modeltype)&gt;<sp/>XModel_g;<sp/></highlight><highlight class="comment">//<sp/>For<sp/>GPU<sp/>pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1598"><highlight class="normal"></highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structForcing" kindref="compound">Forcing&lt;float&gt;</ref><sp/>XForcing;</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structStaticForcingP" kindref="compound">StaticForcingP&lt;float&gt;</ref><sp/>bathy;</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"></highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy.push_back(bathy);</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialise<sp/>forcing<sp/>bathymetry<sp/>to<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1606"><highlight class="normal"></highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>Lo<sp/>=<sp/>T(2500.0);</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>Do<sp/>=<sp/>T(1.0);</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"></highlight></codeline>
<codeline lineno="1612"><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"></highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].xo<sp/>=<sp/>-4000.0;</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].yo<sp/>=<sp/>-4000.0;</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].xmax<sp/>=<sp/>4000.0;</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].ymax<sp/>=<sp/>4000.0;</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].nx<sp/>=<sp/>64;</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].ny<sp/>=<sp/>64;</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].dx<sp/>=<sp/>126.0;</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].dy<sp/>=<sp/>XForcing.Bathy[0].dx;</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"></highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(1,<sp/>1,<sp/>XForcing.left.blks,<sp/>XForcing.right.blks,<sp/>XForcing.top.blks,<sp/>XForcing.bot.blks);</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"></highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(XForcing.Bathy[0].nx,<sp/>XForcing.Bathy[0].ny,<sp/>XForcing.Bathy[0].val);</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>XForcing.Bathy[0].ny;<sp/>j++)</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>XForcing.Bathy[0].nx;<sp/>i++)</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>T(XForcing.Bathy[0].xo<sp/>+<sp/>i<sp/>*<sp/>XForcing.Bathy[0].dx);</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>T(XForcing.Bathy[0].yo<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].dx);</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.Bathy[0].val[i<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].nx]<sp/>=<sp/>float(ThackerBathy(x,<sp/>y,<sp/>Lo,<sp/>Do));</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"></highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Overrule<sp/>whatever<sp/>may<sp/>be<sp/>set<sp/>in<sp/>the<sp/>param<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.xmax<sp/>=<sp/>XForcing.Bathy[0].xmax;</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.ymax<sp/>=<sp/>XForcing.Bathy[0].ymax;</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.xo<sp/>=<sp/>XForcing.Bathy[0].xo;</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.yo<sp/>=<sp/>XForcing.Bathy[0].yo;</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.dx<sp/>=<sp/>XForcing.Bathy[0].dx;</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"></highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.zsinit<sp/>=<sp/>zsinit;</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.endtime<sp/>=<sp/>1390.0;</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"></highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.outputtimestep<sp/>=<sp/>XParam.endtime;</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"></highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/>checkparamsanity(XParam,<sp/>XForcing);</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"></highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/>InitMesh(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/>InitialConditions(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"></highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/>InitialAdaptation(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/>SetupGPU(XParam,<sp/>XModel,<sp/>XForcing,<sp/>XModel_g);</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"></highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/>MainLoop(XParam,<sp/>XForcing,<sp/>XModel,<sp/>XModel_g);</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"></highlight></codeline>
<codeline lineno="1665"><highlight class="normal"></highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>Lake<sp/>at<sp/>rest<sp/>state?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>velocities<sp/>should<sp/>be<sp/>very<sp/>small</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>smallvel<sp/>=<sp/>T(1e-6);</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>0;<sp/>ibl<sp/>&lt;<sp/>XParam.nblk;<sp/>ibl++)</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>XModel.blocks.active[ibl];</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy<sp/>=<sp/>0;<sp/>iy<sp/>&lt;<sp/>XParam.blkwidth;<sp/>iy++)</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>0;<sp/>ix<sp/>&lt;<sp/>(XParam.blkwidth);<sp/>ix++)</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>memloc(XParam,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(XModel.evolv.u[i])<sp/>&gt;<sp/>smallvel<sp/>||<sp/>abs(XModel.evolv.v[i])<sp/>&gt;<sp/>smallvel)</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;Lake<sp/>at<sp/>rest<sp/>state<sp/>not<sp/>acheived!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test;</highlight></codeline>
<codeline lineno="1688"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ThackerLakeAtRest&lt;float&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>zsinit);</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ThackerLakeAtRest&lt;double&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>zsinit);</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"></highlight></codeline>
<codeline lineno="1692"><highlight class="normal"></highlight></codeline>
<codeline lineno="1693"><highlight class="normal"></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>RiverVolumeAdapt(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/>T<sp/>maxslope)</highlight></codeline>
<codeline lineno="1706"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//T<sp/>maxslope<sp/>=<sp/>0.45;<sp/>//<sp/>tthe<sp/>mass<sp/>conservation<sp/>is<sp/>better<sp/>with<sp/>smaller<sp/>slopes<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1708"><highlight class="normal"></highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>UnitestA,<sp/>UnitestB,<sp/>UnitestC,<sp/>UnitestD;</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ctofA,<sp/>ctofB,<sp/>ctofC,<sp/>ctofD;</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ftocA,<sp/>ftocB,<sp/>ftocC,<sp/>ftocD;</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"></highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>details;</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"></highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.minlevel<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.maxlevel<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.initlevel<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"></highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.ForceMassConserve<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/>UnitestA=RiverVolumeAdapt(XParam,<sp/>maxslope,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/>UnitestB=RiverVolumeAdapt(XParam,<sp/>maxslope,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/>UnitestC=RiverVolumeAdapt(XParam,<sp/>maxslope,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/>UnitestD=RiverVolumeAdapt(XParam,<sp/>maxslope,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"></highlight></codeline>
<codeline lineno="1727"><highlight class="normal"></highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(UnitestA<sp/>&amp;&amp;<sp/>UnitestB<sp/>&amp;&amp;<sp/>UnitestC<sp/>&amp;&amp;<sp/>UnitestD)</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;River<sp/>Volume<sp/>Conservation<sp/>Test:<sp/>Uniform<sp/>mesh:<sp/>Success&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;River<sp/>Volume<sp/>Conservation<sp/>Test:<sp/>Uniform<sp/>mesh:<sp/>Failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>=<sp/>UnitestA<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;successful&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;failed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t<sp/>Uniform<sp/>mesh<sp/>A<sp/>:&quot;</highlight><highlight class="normal"><sp/>+<sp/>details);</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>=<sp/>UnitestB<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;successful&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;failed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t<sp/>Uniform<sp/>mesh<sp/>B<sp/>:&quot;</highlight><highlight class="normal"><sp/>+<sp/>details);</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>=<sp/>UnitestC<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;successful&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;failed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t<sp/>Uniform<sp/>mesh<sp/>C<sp/>:&quot;</highlight><highlight class="normal"><sp/>+<sp/>details);</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>=<sp/>UnitestD<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;successful&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;failed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t<sp/>Uniform<sp/>mesh<sp/>D<sp/>:&quot;</highlight><highlight class="normal"><sp/>+<sp/>details);</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"></highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.minlevel<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.maxlevel<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.initlevel<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"></highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Fine<sp/>to<sp/>coarse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Change<sp/>arg<sp/>1<sp/>and<sp/>2<sp/>if<sp/>the<sp/>slope<sp/>is<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.AdaptCrit<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Inrange&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.Adapt_arg1<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;28.0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.Adapt_arg2<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;40.0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.Adapt_arg3<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;zb&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"></highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/>ftocA<sp/>=<sp/>RiverVolumeAdapt(XParam,<sp/>maxslope,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/>ftocB<sp/>=<sp/>RiverVolumeAdapt(XParam,<sp/>maxslope,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/>ftocC<sp/>=<sp/>RiverVolumeAdapt(XParam,<sp/>maxslope,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/>ftocD<sp/>=<sp/>RiverVolumeAdapt(XParam,<sp/>maxslope,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ftocA<sp/>&amp;&amp;<sp/>ftocB<sp/>&amp;&amp;<sp/>ftocC<sp/>&amp;&amp;<sp/>ftocD)</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;River<sp/>Volume<sp/>Conservation<sp/>Test:<sp/>Flow<sp/>from<sp/>fine<sp/>to<sp/>coarse<sp/>adapted<sp/>mesh:<sp/>Success&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;River<sp/>Volume<sp/>Conservation<sp/>Test:<sp/>Flow<sp/>from<sp/>fine<sp/>to<sp/>coarse<sp/>adapted<sp/>mesh:<sp/>Failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>=<sp/>ftocA<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;successful&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;failed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t<sp/>Flow<sp/>from<sp/>fine<sp/>to<sp/>coarse<sp/>adapted<sp/>mesh<sp/>A<sp/>:&quot;</highlight><highlight class="normal"><sp/>+<sp/>details);</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>=<sp/>ftocB<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;successful&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;failed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t<sp/>Flow<sp/>from<sp/>fine<sp/>to<sp/>coarse<sp/>adapted<sp/>mesh<sp/>B<sp/>:&quot;</highlight><highlight class="normal"><sp/>+<sp/>details);</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>=<sp/>ftocC<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;successful&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;failed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t<sp/>Flow<sp/>from<sp/>fine<sp/>to<sp/>coarse<sp/>adapted<sp/>mesh<sp/>C<sp/>:&quot;</highlight><highlight class="normal"><sp/>+<sp/>details);</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>=<sp/>ftocD<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;successful&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;failed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t<sp/>Flow<sp/>from<sp/>fine<sp/>to<sp/>coarse<sp/>adapted<sp/>mesh<sp/>D<sp/>:&quot;</highlight><highlight class="normal"><sp/>+<sp/>details);</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"></highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//coarse<sp/>to<sp/>fine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Change<sp/>arg<sp/>1<sp/>and<sp/>2<sp/>if<sp/>the<sp/>slope<sp/>is<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.AdaptCrit<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Inrange&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.Adapt_arg1<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;0.0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.Adapt_arg2<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;2.0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.Adapt_arg3<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;zb&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"></highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/>ctofA<sp/>=<sp/>RiverVolumeAdapt(XParam,<sp/>maxslope,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/>ctofB<sp/>=<sp/>RiverVolumeAdapt(XParam,<sp/>maxslope,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/>ctofC<sp/>=<sp/>RiverVolumeAdapt(XParam,<sp/>maxslope,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/>ctofD<sp/>=<sp/>RiverVolumeAdapt(XParam,<sp/>maxslope,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctofA<sp/>&amp;&amp;<sp/>ctofB<sp/>&amp;&amp;<sp/>ctofC<sp/>&amp;&amp;<sp/>ctofD)</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;River<sp/>Volume<sp/>Conservation<sp/>Test:<sp/>Flow<sp/>from<sp/>coarse<sp/>to<sp/>fine<sp/>adapted<sp/>mesh:<sp/>Success&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;River<sp/>Volume<sp/>Conservation<sp/>Test:<sp/>Flow<sp/>from<sp/>coarse<sp/>to<sp/>fine<sp/>adapted:<sp/>Failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>=<sp/>ctofA<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;successful&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;failed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t<sp/>Flow<sp/>from<sp/>coarse<sp/>to<sp/>fine<sp/>adapted<sp/>mesh<sp/>A<sp/>:&quot;</highlight><highlight class="normal"><sp/>+<sp/>details);</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>=<sp/>ctofB<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;successful&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;failed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t<sp/>Flow<sp/>from<sp/>coarse<sp/>to<sp/>fine<sp/>adapted<sp/>mesh<sp/>B<sp/>:&quot;</highlight><highlight class="normal"><sp/>+<sp/>details);</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>=<sp/>ctofC<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;successful&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;failed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t<sp/>Flow<sp/>from<sp/>coarse<sp/>to<sp/>fine<sp/>adapted<sp/>mesh<sp/>C<sp/>:&quot;</highlight><highlight class="normal"><sp/>+<sp/>details);</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>=<sp/>ctofD<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;successful&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;failed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t<sp/>Flow<sp/>from<sp/>coarse<sp/>to<sp/>fine<sp/>adapted<sp/>mesh<sp/>D<sp/>:&quot;</highlight><highlight class="normal"><sp/>+<sp/>details);</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"></highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"></highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(UnitestA<sp/>*<sp/>UnitestB<sp/>*<sp/>UnitestC<sp/>*<sp/>UnitestD<sp/>*<sp/>ctofA<sp/>*<sp/>ctofB<sp/>*<sp/>ctofC<sp/>*<sp/>ctofD<sp/>*<sp/>ftocA<sp/>*<sp/>ftocB<sp/>*<sp/>ftocC<sp/>*<sp/>ftocD);</highlight></codeline>
<codeline lineno="1807"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"></highlight></codeline>
<codeline lineno="1809"><highlight class="normal"></highlight></codeline>
<codeline lineno="1828"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>RiverVolumeAdapt(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/>T<sp/>slope,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bottop,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flip)</highlight></codeline>
<codeline lineno="1829"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//bool<sp/>test<sp/>=<sp/>true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1832"><highlight class="normal"></highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>modeltype<sp/>=<sp/>XParam.doubleprecision<sp/>&lt;<sp/>1<sp/>?<sp/>float()<sp/>:<sp/>double();</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structModel" kindref="compound">Model</ref>&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(modeltype)&gt;<sp/>XModel;<sp/></highlight><highlight class="comment">//<sp/>For<sp/>CPU<sp/>pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structModel" kindref="compound">Model</ref>&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(modeltype)&gt;<sp/>XModel_g;<sp/></highlight><highlight class="comment">//<sp/>For<sp/>GPU<sp/>pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1836"><highlight class="normal"></highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structForcing" kindref="compound">Forcing&lt;float&gt;</ref><sp/>XForcing;</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"></highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing<sp/>=<sp/>MakValleyBathy(XParam,<sp/>slope,<sp/>bottop,<sp/>flip);</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"></highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>center<sp/>=<sp/>T(10.5);</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"></highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>maxtopo<sp/>=<sp/>std::numeric_limits&lt;float&gt;::min();</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mintopo<sp/>=<sp/>std::numeric_limits&lt;float&gt;::max();</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"></highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>XForcing.Bathy[0].ny;<sp/>j++)</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>XForcing.Bathy[0].nx;<sp/>i++)</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxtopo<sp/>=<sp/>max(XForcing.Bathy[0].val[i<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].nx],<sp/>maxtopo);</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mintopo<sp/>=<sp/>min(XForcing.Bathy[0].val[i<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].nx],<sp/>mintopo);</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"></highlight></codeline>
<codeline lineno="1856"><highlight class="normal"></highlight></codeline>
<codeline lineno="1857"><highlight class="normal"></highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Overrule<sp/>whatever<sp/>is<sp/>set<sp/>in<sp/>the<sp/>river<sp/>forcing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>Q<sp/>=<sp/>T(1.0);</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"></highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>upstream<sp/>=<sp/>!flip<sp/>?<sp/>24.0<sp/>:<sp/>8;</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>riverx<sp/>=<sp/>!bottop<sp/>?<sp/>upstream<sp/>:<sp/>center;</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rivery<sp/>=<sp/>!bottop<sp/>?<sp/>center<sp/>:<sp/>upstream;</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"></highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Create<sp/>a<sp/>temporary<sp/>file<sp/>with<sp/>river<sp/>fluxes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ofstream<sp/>river_file(</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;testriver.tmp&quot;</highlight><highlight class="normal">,<sp/>std::ios_base::out<sp/>|<sp/>std::ios_base::trunc);</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/>river_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;0.0<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(Q)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/>river_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;3600.0<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(Q)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/>river_file.close();<sp/></highlight><highlight class="comment">//destructor<sp/>implicitly<sp/>does<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1871"><highlight class="normal"></highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classRiver" kindref="compound">River</ref><sp/>thisriver;</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/>thisriver.Riverflowfile<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;testriver.tmp&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/>thisriver.xstart<sp/>=<sp/>riverx<sp/>-<sp/>1.0;</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/>thisriver.xend<sp/>=<sp/>riverx<sp/>+<sp/>1.0;</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/>thisriver.ystart<sp/>=<sp/>rivery<sp/>-<sp/>1.0;</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/>thisriver.yend<sp/>=<sp/>rivery<sp/>+<sp/>1.0;</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"></highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.rivers.push_back(thisriver);</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"></highlight></codeline>
<codeline lineno="1881"><highlight class="normal"></highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.rivers[0].flowinput<sp/>=<sp/>readFlowfile(XForcing.rivers[0].Riverflowfile,<sp/>XParam.reftime);</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"></highlight></codeline>
<codeline lineno="1884"><highlight class="normal"></highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Overrule<sp/>whatever<sp/>may<sp/>be<sp/>set<sp/>in<sp/>the<sp/>param<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.xmax<sp/>=<sp/>XForcing.Bathy[0].xmax;</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.ymax<sp/>=<sp/>XForcing.Bathy[0].ymax;</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.xo<sp/>=<sp/>XForcing.Bathy[0].xo;</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.yo<sp/>=<sp/>XForcing.Bathy[0].yo;</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"></highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.dx<sp/>=<sp/>XForcing.Bathy[0].dx;</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"></highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.zsinit<sp/>=<sp/>mintopo<sp/>+<sp/>0.5;</highlight><highlight class="comment">//<sp/>Had<sp/>a<sp/>small<sp/>amount<sp/>of<sp/>water<sp/>to<sp/>avoid<sp/>a<sp/>huge<sp/>first<sp/>step<sp/>that<sp/>would<sp/>surely<sp/>break<sp/>the<sp/>setup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.endtime<sp/>=<sp/>20.0;</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"></highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.outputtimestep<sp/>=<sp/>XParam.endtime;</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"></highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/>checkparamsanity(XParam,<sp/>XForcing);</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"></highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/>InitMesh(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"></highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/>InitialConditions(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"></highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/>InitialAdaptation(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"></highlight></codeline>
<codeline lineno="1906"><highlight class="normal"></highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/>SetupGPU(XParam,<sp/>XModel,<sp/>XForcing,<sp/>XModel_g);</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>initVol<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>0;<sp/>ibl<sp/>&lt;<sp/>XParam.nblk;<sp/>ibl++)</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>XModel.blocks.active[ibl];</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>delta<sp/>=<sp/>calcres(XParam.delta,<sp/>XModel.blocks.level[ib]);</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy<sp/>=<sp/>0;<sp/>iy<sp/>&lt;<sp/>XParam.blkwidth;<sp/>iy++)</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>0;<sp/>ix<sp/>&lt;<sp/>(XParam.blkwidth);<sp/>ix++)</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>memloc(XParam,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initVol<sp/>=<sp/>initVol<sp/>+<sp/>T(XModel.evolv.h[i])<sp/>*<sp/>delta<sp/>*<sp/>delta;</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"></highlight></codeline>
<codeline lineno="1923"><highlight class="normal"></highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/>MainLoop(XParam,<sp/>XForcing,<sp/>XModel,<sp/>XModel_g);</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"></highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>TheoryInput<sp/>=<sp/>Q<sp/>*<sp/>XParam.endtime;</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"></highlight></codeline>
<codeline lineno="1928"><highlight class="normal"></highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>SimulatedVolume<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>0;<sp/>ibl<sp/>&lt;<sp/>XParam.nblk;<sp/>ibl++)</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>XModel.blocks.active[ibl];</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>delta<sp/>=<sp/>calcres(XParam.delta,<sp/>XModel.blocks.level[ib]);</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy<sp/>=<sp/>0;<sp/>iy<sp/>&lt;<sp/>XParam.blkwidth;<sp/>iy++)</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>0;<sp/>ix<sp/>&lt;<sp/>(XParam.blkwidth);<sp/>ix++)</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>memloc(XParam,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SimulatedVolume<sp/>=<sp/>SimulatedVolume<sp/>+<sp/>XModel.evolv.h[i]<sp/>*<sp/>delta<sp/>*<sp/>delta;</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"></highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/>SimulatedVolume<sp/>=<sp/>SimulatedVolume<sp/>-<sp/>initVol;</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"></highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>error<sp/>=<sp/>abs(SimulatedVolume<sp/>-<sp/>TheoryInput);</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"></highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error<sp/>/<sp/>TheoryInput<sp/>&lt;<sp/>0.05;</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"></highlight></codeline>
<codeline lineno="1950"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"></highlight></codeline>
<codeline lineno="1952"><highlight class="normal"></highlight></codeline>
<codeline lineno="1953"><highlight class="normal"></highlight></codeline>
<codeline lineno="1961"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>testboundaries(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/>T<sp/>maxslope)</highlight></codeline>
<codeline lineno="1962"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//T<sp/>maxslope<sp/>=<sp/>0.45;<sp/>//<sp/>the<sp/>mass<sp/>conservation<sp/>is<sp/>better<sp/>with<sp/>smaller<sp/>slopes<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1964"><highlight class="normal"></highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Wall_B;</highlight><highlight class="comment">//<sp/>,<sp/>Wall_R,<sp/>Wall_L,<sp/>Wall_T;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//bool<sp/>ctofA,<sp/>ctofB,<sp/>ctofC,<sp/>ctofD;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//bool<sp/>ftocA,<sp/>ftocB,<sp/>ftocC,<sp/>ftocD;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1968"><highlight class="normal"></highlight></codeline>
<codeline lineno="1969"><highlight class="normal"></highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>details;</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Bound_type;</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"></highlight></codeline>
<codeline lineno="1973"><highlight class="normal"></highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.GPUDEVICE<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/>maxslope<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Dir<sp/>=<sp/>3;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/>Bound_type<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/>Wall_B<sp/>=<sp/>RiverOnBoundary(XParam,<sp/>maxslope,<sp/>3,<sp/>Bound_type);</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Wall_R<sp/>=<sp/>RiverOnBoundary(XParam,<sp/>maxslope,<sp/>0,<sp/>0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Wall_L<sp/>=<sp/>RiverOnBoundary(XParam,<sp/>maxslope,<sp/>1,<sp/>0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Wall_T<sp/>=<sp/>RiverOnBoundary(XParam,<sp/>maxslope,<sp/>2,<sp/>0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1983"><highlight class="comment"></highlight></codeline>
<codeline lineno="1984"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(UnitestA<sp/>&amp;&amp;<sp/>UnitestB<sp/>&amp;&amp;<sp/>UnitestC<sp/>&amp;&amp;<sp/>UnitestD)</highlight></codeline>
<codeline lineno="1985"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1986"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(&quot;River<sp/>Volume<sp/>Conservation<sp/>Test:<sp/>Uniform<sp/>mesh:<sp/>Success&quot;);</highlight></codeline>
<codeline lineno="1987"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1988"><highlight class="comment"><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="1989"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1990"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(&quot;River<sp/>Volume<sp/>Conservation<sp/>Test:<sp/>Uniform<sp/>mesh:<sp/>Failed&quot;);</highlight></codeline>
<codeline lineno="1991"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>=<sp/>UnitestA<sp/>?<sp/>&quot;successful&quot;<sp/>:<sp/>&quot;failed&quot;;</highlight></codeline>
<codeline lineno="1992"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(&quot;\t<sp/>Uniform<sp/>mesh<sp/>A<sp/>:&quot;<sp/>+<sp/>details);</highlight></codeline>
<codeline lineno="1993"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>=<sp/>UnitestB<sp/>?<sp/>&quot;successful&quot;<sp/>:<sp/>&quot;failed&quot;;</highlight></codeline>
<codeline lineno="1994"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(&quot;\t<sp/>Uniform<sp/>mesh<sp/>B<sp/>:&quot;<sp/>+<sp/>details);</highlight></codeline>
<codeline lineno="1995"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>=<sp/>UnitestC<sp/>?<sp/>&quot;successful&quot;<sp/>:<sp/>&quot;failed&quot;;</highlight></codeline>
<codeline lineno="1996"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(&quot;\t<sp/>Uniform<sp/>mesh<sp/>C<sp/>:&quot;<sp/>+<sp/>details);</highlight></codeline>
<codeline lineno="1997"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>=<sp/>UnitestD<sp/>?<sp/>&quot;successful&quot;<sp/>:<sp/>&quot;failed&quot;;</highlight></codeline>
<codeline lineno="1998"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(&quot;\t<sp/>Uniform<sp/>mesh<sp/>D<sp/>:&quot;<sp/>+<sp/>details);</highlight></codeline>
<codeline lineno="1999"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2000"><highlight class="comment"></highlight></codeline>
<codeline lineno="2001"><highlight class="comment"><sp/><sp/><sp/><sp/>XParam.minlevel<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2002"><highlight class="comment"><sp/><sp/><sp/><sp/>XParam.maxlevel<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2003"><highlight class="comment"><sp/><sp/><sp/><sp/>XParam.initlevel<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2004"><highlight class="comment"></highlight></codeline>
<codeline lineno="2005"><highlight class="comment"><sp/><sp/><sp/><sp/>//Fine<sp/>to<sp/>coarse</highlight></codeline>
<codeline lineno="2006"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Change<sp/>arg<sp/>1<sp/>and<sp/>2<sp/>if<sp/>the<sp/>slope<sp/>is<sp/>changed</highlight></codeline>
<codeline lineno="2007"><highlight class="comment"><sp/><sp/><sp/><sp/>XParam.AdaptCrit<sp/>=<sp/>&quot;Inrange&quot;;</highlight></codeline>
<codeline lineno="2008"><highlight class="comment"><sp/><sp/><sp/><sp/>XParam.Adapt_arg1<sp/>=<sp/>&quot;28.0&quot;;</highlight></codeline>
<codeline lineno="2009"><highlight class="comment"><sp/><sp/><sp/><sp/>XParam.Adapt_arg2<sp/>=<sp/>&quot;40.0&quot;;</highlight></codeline>
<codeline lineno="2010"><highlight class="comment"><sp/><sp/><sp/><sp/>XParam.Adapt_arg3<sp/>=<sp/>&quot;zb&quot;;</highlight></codeline>
<codeline lineno="2011"><highlight class="comment"></highlight></codeline>
<codeline lineno="2012"><highlight class="comment"><sp/><sp/><sp/><sp/>ftocA<sp/>=<sp/>RiverVolumeAdapt(XParam,<sp/>maxslope,<sp/>false,<sp/>false);</highlight></codeline>
<codeline lineno="2013"><highlight class="comment"><sp/><sp/><sp/><sp/>ftocB<sp/>=<sp/>RiverVolumeAdapt(XParam,<sp/>maxslope,<sp/>true,<sp/>false);</highlight></codeline>
<codeline lineno="2014"><highlight class="comment"><sp/><sp/><sp/><sp/>ftocC<sp/>=<sp/>RiverVolumeAdapt(XParam,<sp/>maxslope,<sp/>false,<sp/>true);</highlight></codeline>
<codeline lineno="2015"><highlight class="comment"><sp/><sp/><sp/><sp/>ftocD<sp/>=<sp/>RiverVolumeAdapt(XParam,<sp/>maxslope,<sp/>true,<sp/>true);</highlight></codeline>
<codeline lineno="2016"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(ftocA<sp/>&amp;&amp;<sp/>ftocB<sp/>&amp;&amp;<sp/>ftocC<sp/>&amp;&amp;<sp/>ftocD)</highlight></codeline>
<codeline lineno="2017"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2018"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(&quot;River<sp/>Volume<sp/>Conservation<sp/>Test:<sp/>Flow<sp/>from<sp/>fine<sp/>to<sp/>coarse<sp/>adapted<sp/>mesh:<sp/>Success&quot;);</highlight></codeline>
<codeline lineno="2019"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2020"><highlight class="comment"><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="2021"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2022"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(&quot;River<sp/>Volume<sp/>Conservation<sp/>Test:<sp/>Flow<sp/>from<sp/>fine<sp/>to<sp/>coarse<sp/>adapted<sp/>mesh:<sp/>Failed&quot;);</highlight></codeline>
<codeline lineno="2023"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>=<sp/>ftocA<sp/>?<sp/>&quot;successful&quot;<sp/>:<sp/>&quot;failed&quot;;</highlight></codeline>
<codeline lineno="2024"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(&quot;\t<sp/>Flow<sp/>from<sp/>fine<sp/>to<sp/>coarse<sp/>adapted<sp/>mesh<sp/>A<sp/>:&quot;<sp/>+<sp/>details);</highlight></codeline>
<codeline lineno="2025"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>=<sp/>ftocB<sp/>?<sp/>&quot;successful&quot;<sp/>:<sp/>&quot;failed&quot;;</highlight></codeline>
<codeline lineno="2026"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(&quot;\t<sp/>Flow<sp/>from<sp/>fine<sp/>to<sp/>coarse<sp/>adapted<sp/>mesh<sp/>B<sp/>:&quot;<sp/>+<sp/>details);</highlight></codeline>
<codeline lineno="2027"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>=<sp/>ftocC<sp/>?<sp/>&quot;successful&quot;<sp/>:<sp/>&quot;failed&quot;;</highlight></codeline>
<codeline lineno="2028"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(&quot;\t<sp/>Flow<sp/>from<sp/>fine<sp/>to<sp/>coarse<sp/>adapted<sp/>mesh<sp/>C<sp/>:&quot;<sp/>+<sp/>details);</highlight></codeline>
<codeline lineno="2029"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>=<sp/>ftocD<sp/>?<sp/>&quot;successful&quot;<sp/>:<sp/>&quot;failed&quot;;</highlight></codeline>
<codeline lineno="2030"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(&quot;\t<sp/>Flow<sp/>from<sp/>fine<sp/>to<sp/>coarse<sp/>adapted<sp/>mesh<sp/>D<sp/>:&quot;<sp/>+<sp/>details);</highlight></codeline>
<codeline lineno="2031"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2032"><highlight class="comment"></highlight></codeline>
<codeline lineno="2033"><highlight class="comment"><sp/><sp/><sp/><sp/>//coarse<sp/>to<sp/>fine</highlight></codeline>
<codeline lineno="2034"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Change<sp/>arg<sp/>1<sp/>and<sp/>2<sp/>if<sp/>the<sp/>slope<sp/>is<sp/>changed</highlight></codeline>
<codeline lineno="2035"><highlight class="comment"><sp/><sp/><sp/><sp/>XParam.AdaptCrit<sp/>=<sp/>&quot;Inrange&quot;;</highlight></codeline>
<codeline lineno="2036"><highlight class="comment"><sp/><sp/><sp/><sp/>XParam.Adapt_arg1<sp/>=<sp/>&quot;0.0&quot;;</highlight></codeline>
<codeline lineno="2037"><highlight class="comment"><sp/><sp/><sp/><sp/>XParam.Adapt_arg2<sp/>=<sp/>&quot;2.0&quot;;</highlight></codeline>
<codeline lineno="2038"><highlight class="comment"><sp/><sp/><sp/><sp/>XParam.Adapt_arg3<sp/>=<sp/>&quot;zb&quot;;</highlight></codeline>
<codeline lineno="2039"><highlight class="comment"></highlight></codeline>
<codeline lineno="2040"><highlight class="comment"><sp/><sp/><sp/><sp/>ctofA<sp/>=<sp/>RiverVolumeAdapt(XParam,<sp/>maxslope,<sp/>false,<sp/>false);</highlight></codeline>
<codeline lineno="2041"><highlight class="comment"><sp/><sp/><sp/><sp/>ctofB<sp/>=<sp/>RiverVolumeAdapt(XParam,<sp/>maxslope,<sp/>true,<sp/>false);</highlight></codeline>
<codeline lineno="2042"><highlight class="comment"><sp/><sp/><sp/><sp/>ctofC<sp/>=<sp/>RiverVolumeAdapt(XParam,<sp/>maxslope,<sp/>false,<sp/>true);</highlight></codeline>
<codeline lineno="2043"><highlight class="comment"><sp/><sp/><sp/><sp/>ctofD<sp/>=<sp/>RiverVolumeAdapt(XParam,<sp/>maxslope,<sp/>true,<sp/>true);</highlight></codeline>
<codeline lineno="2044"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(ctofA<sp/>&amp;&amp;<sp/>ctofB<sp/>&amp;&amp;<sp/>ctofC<sp/>&amp;&amp;<sp/>ctofD)</highlight></codeline>
<codeline lineno="2045"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2046"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(&quot;River<sp/>Volume<sp/>Conservation<sp/>Test:<sp/>Flow<sp/>from<sp/>coarse<sp/>to<sp/>fine<sp/>adapted<sp/>mesh:<sp/>Success&quot;);</highlight></codeline>
<codeline lineno="2047"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2048"><highlight class="comment"><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="2049"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2050"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(&quot;River<sp/>Volume<sp/>Conservation<sp/>Test:<sp/>Flow<sp/>from<sp/>coarse<sp/>to<sp/>fine<sp/>adapted:<sp/>Failed&quot;);</highlight></codeline>
<codeline lineno="2051"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>=<sp/>ctofA<sp/>?<sp/>&quot;successful&quot;<sp/>:<sp/>&quot;failed&quot;;</highlight></codeline>
<codeline lineno="2052"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(&quot;\t<sp/>Flow<sp/>from<sp/>coarse<sp/>to<sp/>fine<sp/>adapted<sp/>mesh<sp/>A<sp/>:&quot;<sp/>+<sp/>details);</highlight></codeline>
<codeline lineno="2053"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>=<sp/>ctofB<sp/>?<sp/>&quot;successful&quot;<sp/>:<sp/>&quot;failed&quot;;</highlight></codeline>
<codeline lineno="2054"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(&quot;\t<sp/>Flow<sp/>from<sp/>coarse<sp/>to<sp/>fine<sp/>adapted<sp/>mesh<sp/>B<sp/>:&quot;<sp/>+<sp/>details);</highlight></codeline>
<codeline lineno="2055"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>=<sp/>ctofC<sp/>?<sp/>&quot;successful&quot;<sp/>:<sp/>&quot;failed&quot;;</highlight></codeline>
<codeline lineno="2056"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(&quot;\t<sp/>Flow<sp/>from<sp/>coarse<sp/>to<sp/>fine<sp/>adapted<sp/>mesh<sp/>C<sp/>:&quot;<sp/>+<sp/>details);</highlight></codeline>
<codeline lineno="2057"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>=<sp/>ctofD<sp/>?<sp/>&quot;successful&quot;<sp/>:<sp/>&quot;failed&quot;;</highlight></codeline>
<codeline lineno="2058"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(&quot;\t<sp/>Flow<sp/>from<sp/>coarse<sp/>to<sp/>fine<sp/>adapted<sp/>mesh<sp/>D<sp/>:&quot;<sp/>+<sp/>details);</highlight></codeline>
<codeline lineno="2059"><highlight class="comment"><sp/><sp/><sp/><sp/>}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2060"><highlight class="normal"></highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//return<sp/>(UnitestA<sp/>*<sp/>UnitestB<sp/>*<sp/>UnitestC<sp/>*<sp/>UnitestD<sp/>*<sp/>ctofA<sp/>*<sp/>ctofB<sp/>*<sp/>ctofC<sp/>*<sp/>ctofD<sp/>*<sp/>ftocA<sp/>*<sp/>ftocB<sp/>*<sp/>ftocC<sp/>*<sp/>ftocD);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(Wall_B);</highlight></codeline>
<codeline lineno="2063"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"></highlight></codeline>
<codeline lineno="2065"><highlight class="normal"></highlight></codeline>
<codeline lineno="2080"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>RiverOnBoundary(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/>T<sp/>slope,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Dir,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Bound_type)</highlight></codeline>
<codeline lineno="2081"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//bool<sp/>test<sp/>=<sp/>true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>a<sp/>Parabolic<sp/>bathy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2084"><highlight class="normal"></highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Param<sp/>XParam;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.GPUDEVICE<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"></highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>modeltype<sp/>=<sp/>XParam.doubleprecision<sp/>&lt;<sp/>1<sp/>?<sp/>float()<sp/>:<sp/>double();</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structModel" kindref="compound">Model</ref>&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(modeltype)&gt;<sp/>XModel;<sp/></highlight><highlight class="comment">//<sp/>For<sp/>CPU<sp/>pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structModel" kindref="compound">Model</ref>&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(modeltype)&gt;<sp/>XModel_g;<sp/></highlight><highlight class="comment">//<sp/>For<sp/>GPU<sp/>pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2091"><highlight class="normal"></highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structForcing" kindref="compound">Forcing&lt;float&gt;</ref><sp/>XForcing;</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"></highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structStaticForcingP" kindref="compound">StaticForcingP&lt;float&gt;</ref><sp/>bathy;</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"></highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>dummybathy;</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"></highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Boundary<sp/>conditions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.top.type<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.bot.type<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.right.type<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.left.type<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"></highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Physical<sp/>wall<sp/>boundary<sp/>condition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PhysWall<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Bound_type<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PhysWall<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Bound_type<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"></highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Dir<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">//To<sp/>right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.right.type<sp/>=<sp/>Bound_type;</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.top.type<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Dir<sp/>==<sp/>1)<sp/></highlight><highlight class="comment">//To<sp/>left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.left.type<sp/>=<sp/>Bound_type;</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.bot.type<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Dir<sp/>==<sp/>2)<sp/></highlight><highlight class="comment">//To<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.top.type<sp/>=<sp/>Bound_type;</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.left.type<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Dir<sp/>==<sp/>3)<sp/></highlight><highlight class="comment">//To<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.bot.type<sp/>=<sp/>Bound_type;</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.right.type<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"></highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy.push_back(bathy);</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"></highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].xo<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].yo<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].xmax<sp/>=<sp/>31.0;</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].ymax<sp/>=<sp/>31.0;</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].nx<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].ny<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"></highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].dx<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].dy<sp/>=<sp/>XForcing.Bathy[0].dx;</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>center<sp/>=<sp/>T(31.0);</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"></highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(1,<sp/>1,<sp/>XForcing.left.blks,<sp/>XForcing.right.blks,<sp/>XForcing.top.blks,<sp/>XForcing.bot.blks);</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"></highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(XForcing.Bathy[0].nx,<sp/>XForcing.Bathy[0].ny,<sp/>XForcing.Bathy[0].val);</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(XForcing.Bathy[0].nx,<sp/>XForcing.Bathy[0].ny,<sp/>dummybathy);</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"></highlight></codeline>
<codeline lineno="2152"><highlight class="normal"></highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//float<sp/>maxtopo<sp/>=<sp/>std::numeric_limits&lt;float&gt;::min();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mintopo<sp/>=<sp/>1000000000000.0f;</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>XForcing.Bathy[0].ny;<sp/>j++)</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>XForcing.Bathy[0].nx;<sp/>i++)</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>T(XForcing.Bathy[0].xo<sp/>+<sp/>i<sp/>*<sp/>XForcing.Bathy[0].dx);</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>T(XForcing.Bathy[0].yo<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].dx);</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"></highlight></codeline>
<codeline lineno="2162"><highlight class="normal"></highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dummybathy[i<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].nx]<sp/>=<sp/>float(ValleyBathy(y,<sp/>x,<sp/>slope,<sp/>center));</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"></highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Add<sp/>physical<sp/>walls</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PhysWall<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(j<sp/>&lt;<sp/>3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>dummybathy[i<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].nx]<sp/>=<sp/>100.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&gt;<sp/>XForcing.Bathy[0].ny<sp/>-<sp/>3)</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dummybathy[i<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].nx]<sp/>=<sp/>100.0;</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>XForcing.Bathy[0].nx<sp/>-<sp/>3)</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dummybathy[i<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].nx]<sp/>=<sp/>100.0;</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>17)</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dummybathy[i<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].nx]<sp/>=<sp/>1000.0;</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"></highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mintopo<sp/>=<sp/>utils::min(dummybathy[i<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].nx],<sp/>mintopo);</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//maxtopo<sp/>=<sp/>max(dummybathy[i<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].nx],<sp/>maxtopo);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2188"><highlight class="normal"></highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"></highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Flip<sp/>or<sp/>rotate<sp/>the<sp/>bathy<sp/>according<sp/>to<sp/>what<sp/>is<sp/>requested</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>XForcing.Bathy[0].ny;<sp/>j++)</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>XForcing.Bathy[0].nx;<sp/>i++)</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Dir<sp/>==<sp/>1)<sp/></highlight><highlight class="comment">//left<sp/>wise</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.Bathy[0].val[i<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].nx]<sp/>=<sp/>dummybathy[i<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].nx];</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Dir<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">//right<sp/>wise</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.Bathy[0].val[(XForcing.Bathy[0].nx<sp/>-<sp/>1<sp/>-<sp/>i)<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].nx]<sp/>=<sp/>dummybathy[i<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].nx];</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Dir<sp/>==<sp/>3)<sp/></highlight><highlight class="comment">//bottom<sp/>wise</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.Bathy[0].val[i<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].nx]<sp/>=<sp/>dummybathy[j<sp/>+<sp/>i<sp/>*<sp/>XForcing.Bathy[0].nx];</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Dir<sp/>==<sp/>2)<sp/></highlight><highlight class="comment">//top<sp/>wise</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.Bathy[0].val[i<sp/>+<sp/>(XForcing.Bathy[0].ny<sp/>-<sp/>1<sp/>-<sp/>j)<sp/>*<sp/>XForcing.Bathy[0].nx]<sp/>=<sp/>dummybathy[j<sp/>+<sp/>i<sp/>*<sp/>XForcing.Bathy[0].nx];</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"></highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/>free(dummybathy);</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"></highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Overrule<sp/>whatever<sp/>is<sp/>set<sp/>in<sp/>the<sp/>river<sp/>forcing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>Q<sp/>=<sp/>T(1.0);</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"></highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>riverx<sp/>=<sp/>(Dir<sp/>==<sp/>0<sp/>|<sp/>Dir<sp/>==<sp/>2)<sp/>?<sp/>6.0<sp/>:<sp/>25.0;<sp/></highlight><highlight class="comment">//Dir=1<sp/>=&gt;leftward</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rivery<sp/>=<sp/>(Dir<sp/>==<sp/>2<sp/>|<sp/>Dir<sp/>==<sp/>1)<sp/>?<sp/>6.0<sp/>:<sp/>25.0;<sp/></highlight><highlight class="comment">//Dir=2<sp/>=&gt;topward</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2223"><highlight class="normal"></highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Create<sp/>a<sp/>temporary<sp/>file<sp/>with<sp/>river<sp/>fluxes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ofstream<sp/>river_file(</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;testriver.tmp&quot;</highlight><highlight class="normal">,<sp/>std::ios_base::out<sp/>|<sp/>std::ios_base::trunc);</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/>river_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;0.0<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(Q)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/>river_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;3600.0<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(Q)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/>river_file.close();<sp/></highlight><highlight class="comment">//destructor<sp/>implicitly<sp/>does<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2230"><highlight class="normal"></highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classRiver" kindref="compound">River</ref><sp/>thisriver;</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/><sp/>thisriver.Riverflowfile<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;testriver.tmp&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/>thisriver.xstart<sp/>=<sp/>riverx<sp/>-<sp/>1.0;</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/><sp/>thisriver.xend<sp/>=<sp/>riverx<sp/>+<sp/>1.0;</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/>thisriver.ystart<sp/>=<sp/>rivery<sp/>-<sp/>1.0;</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/>thisriver.yend<sp/>=<sp/>rivery<sp/>+<sp/>1.0;</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"></highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.rivers.push_back(thisriver);</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"></highlight></codeline>
<codeline lineno="2240"><highlight class="normal"></highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.rivers[0].flowinput<sp/>=<sp/>readFlowfile(XForcing.rivers[0].Riverflowfile,<sp/>XParam.reftime);</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"></highlight></codeline>
<codeline lineno="2243"><highlight class="normal"></highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Overrule<sp/>whatever<sp/>may<sp/>be<sp/>set<sp/>in<sp/>the<sp/>param<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.xmax<sp/>=<sp/>XForcing.Bathy[0].xmax;</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.ymax<sp/>=<sp/>XForcing.Bathy[0].ymax;</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.xo<sp/>=<sp/>XForcing.Bathy[0].xo;</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.yo<sp/>=<sp/>XForcing.Bathy[0].yo;</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"></highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.dx<sp/>=<sp/>XForcing.Bathy[0].dx;</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"></highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.zsinit<sp/>=<sp/>mintopo<sp/>+<sp/>0.5;</highlight><highlight class="comment">//<sp/>Had<sp/>a<sp/>small<sp/>amount<sp/>of<sp/>water<sp/>to<sp/>avoid<sp/>a<sp/>huge<sp/>first<sp/>step<sp/>that<sp/>would<sp/>surely<sp/>break<sp/>the<sp/>setup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//XParam.zsoffset<sp/>=<sp/>0.2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.endtime<sp/>=<sp/>50.0;</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.dtinit<sp/>=<sp/>0.1;</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.mask<sp/>=<sp/>999.0;</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.outishift<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.outjshift<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.ForceMassConserve<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"></highlight></codeline>
<codeline lineno="2261"><highlight class="normal"></highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.outputtimestep<sp/>=<sp/>10.0;</highlight><highlight class="comment">//<sp/>XParam.endtime;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2263"><highlight class="normal"></highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/><sp/><sp/>checkparamsanity(XParam,<sp/>XForcing);</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"></highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/><sp/>InitMesh(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"></highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/>InitialConditions(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"></highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/><sp/>InitialAdaptation(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"></highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/>InitSave2Netcdf(XParam,<sp/>XModel);</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"></highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/>SetupGPU(XParam,<sp/>XModel,<sp/>XForcing,<sp/>XModel_g);</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>initVol<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>0;<sp/>ibl<sp/>&lt;<sp/>XParam.nblk;<sp/>ibl++)</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>XModel.blocks.active[ibl];</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>delta<sp/>=<sp/>calcres(XParam.delta,<sp/>XModel.blocks.level[ib]);</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy<sp/>=<sp/>0;<sp/>iy<sp/>&lt;<sp/>XParam.blkwidth;<sp/>iy++)</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>0;<sp/>ix<sp/>&lt;<sp/>(XParam.blkwidth);<sp/>ix++)</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>memloc(XParam,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initVol<sp/>=<sp/>initVol<sp/>+<sp/>XModel.evolv.h[i]<sp/>*<sp/>delta<sp/>*<sp/>delta;</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"></highlight></codeline>
<codeline lineno="2290"><highlight class="normal"></highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/>MainLoop(XParam,<sp/>XForcing,<sp/>XModel,<sp/>XModel_g);</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"></highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>TheoryInput<sp/>=<sp/>Q<sp/>*<sp/>(T)XParam.endtime;</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"></highlight></codeline>
<codeline lineno="2295"><highlight class="normal"></highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>SimulatedVolume<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>0;<sp/>ibl<sp/>&lt;<sp/>XParam.nblk;<sp/>ibl++)</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>XModel.blocks.active[ibl];</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>delta<sp/>=<sp/>calcres(XParam.delta,<sp/>XModel.blocks.level[ib]);</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy<sp/>=<sp/>0;<sp/>iy<sp/>&lt;<sp/>XParam.blkwidth;<sp/>iy++)</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>0;<sp/>ix<sp/>&lt;<sp/>(XParam.blkwidth);<sp/>ix++)</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>memloc(XParam,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SimulatedVolume<sp/>=<sp/>SimulatedVolume<sp/>+<sp/>XModel.evolv.h[i]<sp/>*<sp/>delta<sp/>*<sp/>delta;</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"></highlight></codeline>
<codeline lineno="2311"><highlight class="normal"></highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;End<sp/>Volume<sp/>:<sp/>%f<sp/>\n&quot;</highlight><highlight class="normal">,<sp/>SimulatedVolume);</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Init<sp/>Volume<sp/>:<sp/>%f<sp/>\n&quot;</highlight><highlight class="normal">,<sp/>initVol);</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"></highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/>SimulatedVolume<sp/>=<sp/>SimulatedVolume<sp/>-<sp/>initVol;</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"></highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;End<sp/>Volume<sp/>-<sp/>Init<sp/>volume<sp/>:<sp/>%f<sp/>\n&quot;</highlight><highlight class="normal">,<sp/>SimulatedVolume);</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"></highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>error<sp/>=<sp/>abs(SimulatedVolume<sp/>-<sp/>TheoryInput);</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"></highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;error<sp/>:<sp/>%f<sp/>\n&quot;</highlight><highlight class="normal">,<sp/>error);</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Theory<sp/>input<sp/>:<sp/>%f<sp/>\n&quot;</highlight><highlight class="normal">,<sp/>TheoryInput);</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;return<sp/>:<sp/>%f<sp/>\n&quot;</highlight><highlight class="normal">,<sp/>(error<sp/>/<sp/>TheoryInput));</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"></highlight></codeline>
<codeline lineno="2325"><highlight class="normal"></highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error<sp/>/<sp/>TheoryInput<sp/>&lt;<sp/>0.01;</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"></highlight></codeline>
<codeline lineno="2328"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"></highlight></codeline>
<codeline lineno="2330"><highlight class="normal"></highlight></codeline>
<codeline lineno="2331"><highlight class="normal"></highlight></codeline>
<codeline lineno="2336"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>LakeAtRest(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref><sp/>XModel)</highlight></codeline>
<codeline lineno="2337"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>epsi<sp/>=<sp/>T(1e-5);</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib;</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"></highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>test<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"></highlight></codeline>
<codeline lineno="2343"><highlight class="normal"></highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structLoop" kindref="compound">Loop&lt;T&gt;</ref><sp/>XLoop<sp/>=<sp/>InitLoop(XParam,<sp/>XModel);</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"></highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/><sp/><sp/>fillHaloC(XParam,<sp/>XModel.blocks,<sp/>XModel.zb);</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"></highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/><sp/><sp/>gradientC(XParam,<sp/>XModel.blocks,<sp/>XModel.zb,<sp/>XModel.grad.dzbdx,<sp/>XModel.grad.dzbdy);</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/><sp/>gradientHalo(XParam,<sp/>XModel.blocks,<sp/>XModel.zb,<sp/>XModel.grad.dzbdx,<sp/>XModel.grad.dzbdy);</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"></highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/><sp/>refine_linear(XParam,<sp/>XModel.blocks,<sp/>XModel.zb,<sp/>XModel.grad.dzbdx,<sp/>XModel.grad.dzbdy);</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/><sp/><sp/>gradientHalo(XParam,<sp/>XModel.blocks,<sp/>XModel.zb,<sp/>XModel.grad.dzbdx,<sp/>XModel.grad.dzbdy);</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"></highlight></codeline>
<codeline lineno="2354"><highlight class="normal"></highlight></codeline>
<codeline lineno="2355"><highlight class="normal"></highlight></codeline>
<codeline lineno="2356"><highlight class="normal"></highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//============================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Predictor<sp/>step<sp/>in<sp/>reimann<sp/>solver</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//============================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2360"><highlight class="normal"></highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//============================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Fill<sp/>the<sp/>halo<sp/>for<sp/>gradient<sp/>reconstruction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/>fillHalo(XParam,<sp/>XModel.blocks,<sp/>XModel.evolv,<sp/>XModel.zb);</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"></highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//============================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>DTmax</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/><sp/><sp/>InitArrayBUQ(XParam,<sp/>XModel.blocks,<sp/>XLoop.hugeposval,<sp/>XModel.time.dtmax);</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"></highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//============================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>gradient<sp/>for<sp/>evolving<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/><sp/><sp/>gradientCPU(XParam,<sp/>XModel.blocks,<sp/>XModel.evolv,<sp/>XModel.grad,<sp/>XModel.zb);</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"></highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//============================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Flux<sp/>and<sp/>Source<sp/>term<sp/>reconstruction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X-<sp/>direction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//updateKurgXCPU(XParam,<sp/>XModel.blocks,<sp/>XModel.evolv,<sp/>XModel.grad,<sp/>XModel.flux,<sp/>XModel.time.dtmax,<sp/>XModel.zb);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateButtingerXCPU(XParam,<sp/>XModel.blocks,<sp/>XModel.evolv,<sp/>XModel.grad,<sp/>XModel.flux,<sp/>XModel.time.dtmax,<sp/>XModel.zb);</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//AddSlopeSourceXCPU(XParam,<sp/>XModel.blocks,<sp/>XModel.evolv,<sp/>XModel.grad,<sp/>XModel.flux,<sp/>XModel.zb);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2379"><highlight class="normal"></highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Y-<sp/>direction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//updateKurgYCPU(XParam,<sp/>XModel.blocks,<sp/>XModel.evolv,<sp/>XModel.grad,<sp/>XModel.flux,<sp/>XModel.time.dtmax,<sp/>XModel.zb);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateButtingerYCPU(XParam,<sp/>XModel.blocks,<sp/>XModel.evolv,<sp/>XModel.grad,<sp/>XModel.flux,<sp/>XModel.time.dtmax,<sp/>XModel.zb);</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//AddSlopeSourceYCPU(XParam,<sp/>XModel.blocks,<sp/>XModel.evolv,<sp/>XModel.grad,<sp/>XModel.flux,<sp/>XModel.zb);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2384"><highlight class="normal"></highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//============================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>Halo<sp/>for<sp/>flux<sp/>from<sp/>fine<sp/>to<sp/>coarse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/>fillHalo(XParam,<sp/>XModel.blocks,<sp/>XModel.flux);</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"></highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>we<sp/>need<sp/>to<sp/>check<sp/>also<sp/>before<sp/>fill<sp/>halo<sp/>part?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2390"><highlight class="normal"></highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>Fhu<sp/>and<sp/>Fhv<sp/>(they<sp/>should<sp/>be<sp/>zero)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>iright;</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>0;<sp/>ibl<sp/>&lt;<sp/>XParam.nblk;<sp/>ibl++)</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ib<sp/>=<sp/>XModel.blocks.active[ibl];</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy<sp/>=<sp/>0;<sp/>iy<sp/>&lt;<sp/>XParam.blkwidth;<sp/>iy++)</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>0;<sp/>ix<sp/>&lt;<sp/>(XParam.blkwidth);<sp/>ix++)</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>memloc(XParam,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iright<sp/>=<sp/>memloc(XParam,<sp/>ix<sp/>+<sp/>1,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ileft<sp/>=<sp/>memloc(XParam,<sp/>ix<sp/>-<sp/>1,<sp/>iy,<sp/>ib);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//itop<sp/>=<sp/>memloc(XParam,<sp/>ix,<sp/>iy<sp/>+<sp/>1,<sp/>ib);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ibot<sp/>=<sp/>memloc(XParam,<sp/>ix,<sp/>iy<sp/>-<sp/>1,<sp/>ib);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2405"><highlight class="normal"></highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(XModel.flux.Fhu[i])<sp/>&gt;<sp/>epsi)</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;Fhu<sp/>is<sp/>not<sp/>zero.<sp/>Lake<sp/>at<sp/>rest<sp/>not<sp/>preserved!!!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"></highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(XModel.flux.Fhv[i])<sp/>&gt;<sp/>epsi)</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;Fhv<sp/>is<sp/>not<sp/>zero.<sp/>Lake<sp/>at<sp/>rest<sp/>not<sp/>preserved!!!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"></highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>dhus<sp/>=<sp/>(XModel.flux.Fqux[i]<sp/>-<sp/>XModel.flux.Su[iright]);</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(dhus)<sp/>&gt;<sp/>epsi)</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"></highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;dhu<sp/>is<sp/>not<sp/>zero.<sp/>Lake<sp/>at<sp/>rest<sp/>not<sp/>preserved!!!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"></highlight></codeline>
<codeline lineno="2425"><highlight class="normal"></highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Fhu[i]=%f\n&quot;</highlight><highlight class="normal">,<sp/>XModel.flux.Fhu[i]);</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"></highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Fqux[i]=%f;<sp/>Su[iright]=%f;<sp/>Diff=%f<sp/>\n&quot;</highlight><highlight class="normal">,<sp/>XModel.flux.Fqux[i],<sp/>XModel.flux.Su[iright],<sp/>(XModel.flux.Fqux[i]<sp/>-<sp/>XModel.flux.Su[iright]));</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"></highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>At<sp/>i:<sp/>(ib=%d;<sp/>ix=%d;<sp/>iy=%d)\n&quot;</highlight><highlight class="normal">,<sp/>ib,<sp/>ix,<sp/>iy);</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testButtingerX(XParam,<sp/>ib,<sp/>ix,<sp/>iy,<sp/>XModel);</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"></highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>At<sp/>iright:<sp/>(ib=%d;<sp/>ix=%d;<sp/>iy=%d)\n&quot;</highlight><highlight class="normal">,<sp/>ib,<sp/>ix<sp/>+<sp/>1,<sp/>iy);</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testButtingerX(XParam,<sp/>ib,<sp/>ix<sp/>+<sp/>1,<sp/>iy,<sp/>XModel);</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"></highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"></highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"></highlight></codeline>
<codeline lineno="2442"><highlight class="normal"></highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test)</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copyID2var(XParam,<sp/>XModel.blocks,<sp/>XModel.flux.Fhu);</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copyBlockinfo2var(XParam,<sp/>XModel.blocks,<sp/>XModel.blocks.LeftBot,<sp/>XModel.grad.dhdx);</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copyBlockinfo2var(XParam,<sp/>XModel.blocks,<sp/>XModel.blocks.LeftTop,<sp/>XModel.grad.dhdy);</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copyBlockinfo2var(XParam,<sp/>XModel.blocks,<sp/>XModel.blocks.TopLeft,<sp/>XModel.grad.dzsdx);</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copyBlockinfo2var(XParam,<sp/>XModel.blocks,<sp/>XModel.blocks.TopRight,<sp/>XModel.grad.dzsdy);</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copyBlockinfo2var(XParam,<sp/>XModel.blocks,<sp/>XModel.blocks.RightTop,<sp/>XModel.grad.dudx);</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copyBlockinfo2var(XParam,<sp/>XModel.blocks,<sp/>XModel.blocks.RightBot,<sp/>XModel.grad.dudy);</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copyBlockinfo2var(XParam,<sp/>XModel.blocks,<sp/>XModel.blocks.BotRight,<sp/>XModel.grad.dvdx);</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copyBlockinfo2var(XParam,<sp/>XModel.blocks,<sp/>XModel.blocks.BotLeft,<sp/>XModel.grad.dvdy);</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"></highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>creatncfileBUQ(XParam,<sp/>XModel.blocks.active,<sp/>XModel.blocks.level,<sp/>XModel.blocks.xo,<sp/>XModel.blocks.yo,<sp/>XModel.blocks.outZone[0]);</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defncvarBUQ(XParam,<sp/>XModel.blocks.active,<sp/>XModel.blocks.level,<sp/>XModel.blocks.xo,<sp/>XModel.blocks.yo,<sp/></highlight><highlight class="stringliteral">&quot;blockID&quot;</highlight><highlight class="normal">,<sp/>3,<sp/>XModel.flux.Fhu,<sp/>XModel.blocks.outZone[0]);</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"></highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defncvarBUQ(XParam,<sp/>XModel.blocks.active,<sp/>XModel.blocks.level,<sp/>XModel.blocks.xo,<sp/>XModel.blocks.yo,<sp/></highlight><highlight class="stringliteral">&quot;LeftBot&quot;</highlight><highlight class="normal">,<sp/>3,<sp/>XModel.grad.dhdx,<sp/>XModel.blocks.outZone[0]);</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defncvarBUQ(XParam,<sp/>XModel.blocks.active,<sp/>XModel.blocks.level,<sp/>XModel.blocks.xo,<sp/>XModel.blocks.yo,<sp/></highlight><highlight class="stringliteral">&quot;LeftTop&quot;</highlight><highlight class="normal">,<sp/>3,<sp/>XModel.grad.dhdy,<sp/>XModel.blocks.outZone[0]);</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"></highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defncvarBUQ(XParam,<sp/>XModel.blocks.active,<sp/>XModel.blocks.level,<sp/>XModel.blocks.xo,<sp/>XModel.blocks.yo,<sp/></highlight><highlight class="stringliteral">&quot;TopLeft&quot;</highlight><highlight class="normal">,<sp/>3,<sp/>XModel.grad.dzsdx,<sp/>XModel.blocks.outZone[0]);</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defncvarBUQ(XParam,<sp/>XModel.blocks.active,<sp/>XModel.blocks.level,<sp/>XModel.blocks.xo,<sp/>XModel.blocks.yo,<sp/></highlight><highlight class="stringliteral">&quot;TopRight&quot;</highlight><highlight class="normal">,<sp/>3,<sp/>XModel.grad.dzsdy,<sp/>XModel.blocks.outZone[0]);</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"></highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defncvarBUQ(XParam,<sp/>XModel.blocks.active,<sp/>XModel.blocks.level,<sp/>XModel.blocks.xo,<sp/>XModel.blocks.yo,<sp/></highlight><highlight class="stringliteral">&quot;RightTop&quot;</highlight><highlight class="normal">,<sp/>3,<sp/>XModel.grad.dudx,<sp/>XModel.blocks.outZone[0]);</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defncvarBUQ(XParam,<sp/>XModel.blocks.active,<sp/>XModel.blocks.level,<sp/>XModel.blocks.xo,<sp/>XModel.blocks.yo,<sp/></highlight><highlight class="stringliteral">&quot;RightBot&quot;</highlight><highlight class="normal">,<sp/>3,<sp/>XModel.grad.dudy,<sp/>XModel.blocks.outZone[0]);</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"></highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defncvarBUQ(XParam,<sp/>XModel.blocks.active,<sp/>XModel.blocks.level,<sp/>XModel.blocks.xo,<sp/>XModel.blocks.yo,<sp/></highlight><highlight class="stringliteral">&quot;BotLeft&quot;</highlight><highlight class="normal">,<sp/>3,<sp/>XModel.grad.dvdx,<sp/>XModel.blocks.outZone[0]);</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defncvarBUQ(XParam,<sp/>XModel.blocks.active,<sp/>XModel.blocks.level,<sp/>XModel.blocks.xo,<sp/>XModel.blocks.yo,<sp/></highlight><highlight class="stringliteral">&quot;BotRight&quot;</highlight><highlight class="normal">,<sp/>3,<sp/>XModel.grad.dvdy,<sp/>XModel.blocks.outZone[0]);</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"></highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test;</highlight></codeline>
<codeline lineno="2472"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"></highlight></codeline>
<codeline lineno="2474"><highlight class="normal"></highlight></codeline>
<codeline lineno="2482"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testButtingerX(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy,<sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref><sp/>XModel)</highlight></codeline>
<codeline lineno="2483"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RB,<sp/>levRB,<sp/>LBRB,<sp/>LB,<sp/>levLB,<sp/>RBLB;</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>memloc(XParam.halowidth,<sp/>XParam.blkmemwidth,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ileft<sp/>=<sp/>memloc(XParam.halowidth,<sp/>XParam.blkmemwidth,<sp/>ix<sp/>-<sp/>1,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"></highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lev<sp/>=<sp/>XModel.blocks.level[ib];</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>delta<sp/>=<sp/>calcres(T(XParam.delta),<sp/>lev);</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"></highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>g<sp/>=<sp/>T(XParam.g);</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>CFL<sp/>=<sp/>T(XParam.CFL);</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>epsi<sp/>=<sp/>nextafter(T(1.0),<sp/>T(2.0))<sp/>-<sp/>T(1.0);</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>eps<sp/>=<sp/>T(XParam.eps)<sp/>+<sp/>epsi;</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"></highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>neighbours<sp/>for<sp/>source<sp/>term</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2497"><highlight class="normal"></highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/><sp/><sp/>RB<sp/>=<sp/>XModel.blocks.RightBot[ib];</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/>levRB<sp/>=<sp/>XModel.blocks.level[RB];</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/>LBRB<sp/>=<sp/>XModel.blocks.LeftBot[RB];</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"></highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/><sp/>LB<sp/>=<sp/>XModel.blocks.LeftBot[ib];</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/><sp/><sp/>levLB<sp/>=<sp/>XModel.blocks.level[LB];</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/><sp/>RBLB<sp/>=<sp/>XModel.blocks.RightBot[LB];</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"></highlight></codeline>
<codeline lineno="2506"><highlight class="normal"></highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>cm<sp/>=<sp/>T(1.0);</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>fmu<sp/>=<sp/>T(1.0);</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"></highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>hi<sp/>=<sp/>XModel.evolv.h[i];</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"></highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>hn<sp/>=<sp/>XModel.evolv.h[ileft];</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"></highlight></codeline>
<codeline lineno="2514"><highlight class="normal"></highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(hi<sp/>&gt;<sp/>eps<sp/>||<sp/>hn<sp/>&gt;<sp/>eps)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>dx,<sp/>zi,<sp/>zn,<sp/>hr,<sp/>hl,<sp/>etar,<sp/>etal,<sp/>zr,<sp/>zl,<sp/>zA,<sp/>zCN,<sp/>hCNr,<sp/>hCNl;</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>ui,<sp/>vi,<sp/>uli,<sp/>vli,<sp/>dhdxi,<sp/>dhdxil,<sp/>dudxi,<sp/>dudxil,<sp/>dvdxi,<sp/>dvdxil;</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"></highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>ga<sp/>=<sp/>g<sp/>*<sp/>T(0.5);</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>along<sp/>X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dx<sp/>=<sp/>delta<sp/>*<sp/>T(0.5);</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zi<sp/>=<sp/>XModel.zb[i];</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zn<sp/>=<sp/>XModel.zb[ileft];</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"></highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ui<sp/>=<sp/>XModel.evolv.u[i];</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vi<sp/>=<sp/>XModel.evolv.v[i];</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uli<sp/>=<sp/>XModel.evolv.u[ileft];</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vli<sp/>=<sp/>XModel.evolv.v[ileft];</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"></highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dhdxi<sp/>=<sp/>XModel.grad.dhdx[i];</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dhdxil<sp/>=<sp/>XModel.grad.dhdx[ileft];</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dudxi<sp/>=<sp/>XModel.grad.dudx[i];</highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dudxil<sp/>=<sp/>XModel.grad.dudx[ileft];</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dvdxi<sp/>=<sp/>XModel.grad.dvdx[i];</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dvdxil<sp/>=<sp/>XModel.grad.dvdx[ileft];</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"></highlight></codeline>
<codeline lineno="2538"><highlight class="normal"></highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hr<sp/>=<sp/>hi<sp/>-<sp/>dx<sp/>*<sp/>dhdxi;</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hl<sp/>=<sp/>hn<sp/>+<sp/>dx<sp/>*<sp/>dhdxil;</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>etar<sp/>=<sp/>XModel.evolv.zs[i]<sp/>-<sp/>dx<sp/>*<sp/>XModel.grad.dzsdx[i];</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>etal<sp/>=<sp/>XModel.evolv.zs[ileft]<sp/>+<sp/>dx<sp/>*<sp/>XModel.grad.dzsdx[ileft];</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"></highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//define<sp/>the<sp/>topography<sp/>term<sp/>at<sp/>the<sp/>interfaces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zr<sp/>=<sp/>zi<sp/>-<sp/>dx<sp/>*<sp/>XModel.grad.dzbdx[i];</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zl<sp/>=<sp/>zn<sp/>+<sp/>dx<sp/>*<sp/>XModel.grad.dzbdx[ileft];</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"></highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//define<sp/>the<sp/>Audusse<sp/>terms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zA<sp/>=<sp/>max(zr,<sp/>zl);</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"></highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>the<sp/>CN<sp/>terms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zCN<sp/>=<sp/>min(zA,<sp/>min(etal,<sp/>etar));</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hCNr<sp/>=<sp/>max(T(0.0),<sp/>min(etar<sp/>-<sp/>zCN,<sp/>hr));</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hCNl<sp/>=<sp/>max(T(0.0),<sp/>min(etal<sp/>-<sp/>zCN,<sp/>hl));</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"></highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Velocity<sp/>reconstruction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//To<sp/>avoid<sp/>high<sp/>velocities<sp/>near<sp/>dry<sp/>cells,<sp/>we<sp/>reconstruct<sp/>velocities<sp/>according<sp/>to<sp/>Bouchut.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>ul,<sp/>ur,<sp/>vl,<sp/>vr,<sp/>sl,<sp/>sr;</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hi<sp/>&gt;<sp/>eps)<sp/>{</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ur<sp/>=<sp/>ui<sp/>-<sp/>(T(1.)<sp/>+<sp/>dx<sp/>*<sp/>dhdxi<sp/>/<sp/>hi)<sp/>*<sp/>dx<sp/>*<sp/>dudxi;</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vr<sp/>=<sp/>vi<sp/>-<sp/>(T(1.)<sp/>+<sp/>dx<sp/>*<sp/>dhdxi<sp/>/<sp/>hi)<sp/>*<sp/>dx<sp/>*<sp/>dvdxi;</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ur<sp/>=<sp/>ui<sp/>-<sp/>dx<sp/>*<sp/>dudxi;</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vr<sp/>=<sp/>vi<sp/>-<sp/>dx<sp/>*<sp/>dvdxi;</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hn<sp/>&gt;<sp/>eps)<sp/>{</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ul<sp/>=<sp/>uli<sp/>+<sp/>(T(1.)<sp/>-<sp/>dx<sp/>*<sp/>dhdxil<sp/>/<sp/>hn)<sp/>*<sp/>dx<sp/>*<sp/>dudxil;</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vl<sp/>=<sp/>vli<sp/>+<sp/>(T(1.)<sp/>-<sp/>dx<sp/>*<sp/>dhdxil<sp/>/<sp/>hn)<sp/>*<sp/>dx<sp/>*<sp/>dvdxil;</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ul<sp/>=<sp/>uli<sp/>+<sp/>dx<sp/>*<sp/>dudxil;</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vl<sp/>=<sp/>vli<sp/>+<sp/>dx<sp/>*<sp/>dvdxil;</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"></highlight></codeline>
<codeline lineno="2576"><highlight class="normal"></highlight></codeline>
<codeline lineno="2577"><highlight class="normal"></highlight></codeline>
<codeline lineno="2578"><highlight class="normal"></highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>fh,<sp/>fu,<sp/>fv,<sp/>dt;</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"></highlight></codeline>
<codeline lineno="2581"><highlight class="normal"></highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//solver<sp/>below<sp/>also<sp/>modifies<sp/>fh<sp/>and<sp/>fu</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dt<sp/>=<sp/>hllc(g,<sp/>delta,<sp/>epsi,<sp/>CFL,<sp/>cm,<sp/>fmu,<sp/>hCNl,<sp/>hCNr,<sp/>ul,<sp/>ur,<sp/>fh,<sp/>fu);</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//hllc(T<sp/>g,<sp/>T<sp/>delta,<sp/>T<sp/>epsi,<sp/>T<sp/>CFL,<sp/>T<sp/>cm,<sp/>T<sp/>fm,<sp/>T<sp/>hm,<sp/>T<sp/>hp,<sp/>T<sp/>um,<sp/>T<sp/>up,<sp/>T<sp/>&amp;<sp/>fh,<sp/>T<sp/>&amp;<sp/>fq)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2585"><highlight class="normal"></highlight></codeline>
<codeline lineno="2586"><highlight class="normal"></highlight></codeline>
<codeline lineno="2587"><highlight class="normal"></highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fv<sp/>=<sp/>(fh<sp/>&gt;<sp/>0.<sp/>?<sp/>vl<sp/>:<sp/>vr)<sp/>*<sp/>fh;</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"></highlight></codeline>
<codeline lineno="2590"><highlight class="normal"></highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Topographic<sp/>source<sp/>term</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2592"><highlight class="normal"></highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>the<sp/>case<sp/>of<sp/>adaptive<sp/>refinement,<sp/>care<sp/>must<sp/>be<sp/>taken<sp/>to<sp/>ensure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>well-balancing<sp/>at<sp/>coarse/fine<sp/>faces<sp/>(see<sp/>[notes/balanced.tm]()).<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ix<sp/>==<sp/>XParam.blkwidth)<sp/>&amp;&amp;<sp/>levRB<sp/>&lt;<sp/>lev)</highlight><highlight class="comment">//(ix==16)<sp/>i.e.<sp/>in<sp/>the<sp/>right<sp/>halo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jj<sp/>=<sp/>LBRB<sp/>==<sp/>ib<sp/>?<sp/>ftoi(floor(iy<sp/>*<sp/>(T)0.5))<sp/>:<sp/>ftoi(floor(iy<sp/>*<sp/>(T)0.5)<sp/>+<sp/>XParam.blkwidth<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iright<sp/>=<sp/>memloc(XParam.halowidth,<sp/>XParam.blkmemwidth,<sp/>0,<sp/>jj,<sp/>RB);;</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hi<sp/>=<sp/>XModel.evolv.h[iright];</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zi<sp/>=<sp/>XModel.zb[iright];</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ix<sp/>==<sp/>0)<sp/>&amp;&amp;<sp/>levLB<sp/>&lt;<sp/>lev)</highlight><highlight class="comment">//(ix==16)<sp/>i.e.<sp/>in<sp/>the<sp/>right<sp/>halo<sp/>if<sp/>you<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jj<sp/>=<sp/>RBLB<sp/>==<sp/>ib<sp/>?<sp/>ftoi(floor(iy<sp/>*<sp/>(T)0.5))<sp/>:<sp/>ftoi(floor(iy<sp/>*<sp/>(T)0.5)<sp/>+<sp/>XParam.blkwidth<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ilc<sp/>=<sp/>memloc(XParam.halowidth,<sp/>XParam.blkmemwidth,<sp/>XParam.blkwidth<sp/>-<sp/>1,<sp/>jj,<sp/>LB);</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//int<sp/>ilc<sp/>=<sp/>memloc(halowidth,<sp/>blkmemwidth,<sp/>-1,<sp/>iy,<sp/>ib);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hn<sp/>=<sp/>XModel.evolv.h[ilc];</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zn<sp/>=<sp/>XModel.zb[ilc];</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"></highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl<sp/>=<sp/>ga<sp/>*<sp/>(hi<sp/>+<sp/>hCNr)<sp/>*<sp/>(zi<sp/>-<sp/>zCN);</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sr<sp/>=<sp/>ga<sp/>*<sp/>(hCNl<sp/>+<sp/>hn)<sp/>*<sp/>(zn<sp/>-<sp/>zCN);</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"></highlight></codeline>
<codeline lineno="2614"><highlight class="normal"></highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;dt=%f;<sp/>etar=%f;<sp/>etal=%f;<sp/>zCN=%f;<sp/>zi=%f;<sp/>zn=%f;<sp/>zA=%f,<sp/>zr=%f,<sp/>zl=%f\n&quot;</highlight><highlight class="normal">,<sp/>dt,<sp/>etar,<sp/>etal,<sp/>zCN,<sp/>zi,<sp/>zn,<sp/>zA,<sp/>zr,<sp/>zl);</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"></highlight></codeline>
<codeline lineno="2617"><highlight class="normal"></highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;hi=%f;<sp/>hn=%f,fh=%f;<sp/>fu=%f;<sp/>sl=%f;<sp/>sr=%f;<sp/>hCNl=%f;<sp/>hCNr=%f;<sp/>hr=%f;<sp/>hl=%f;<sp/>zr=%f;<sp/>zl=%f;\n&quot;</highlight><highlight class="normal">,<sp/>hi,<sp/>hn,<sp/>fh,<sp/>fu,<sp/>sl,<sp/>sr,<sp/>hCNl,<sp/>hCNr,<sp/>hr,<sp/>hl,<sp/>zr,<sp/>zl);</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"></highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;h[i]=%f;<sp/>h[ileft]=%f<sp/>dhdx[i]=%f,<sp/>dhdx[ileft]=%f,<sp/>zs[i]=%f,<sp/>zs[ileft]=%f,<sp/>dzsdx[i]=%f,<sp/>dzsdx[ileft]=%f,<sp/>dzbdx[i]=%f,<sp/>dzbdx[ileft]=%f\n\n&quot;</highlight><highlight class="normal">,<sp/>XModel.evolv.h[i],<sp/>XModel.evolv.h[ileft],<sp/>XModel.grad.dhdx[i],<sp/>XModel.grad.dhdx[ileft],<sp/>XModel.evolv.zs[i],<sp/>XModel.evolv.zs[ileft],<sp/>XModel.grad.dzsdx[i],<sp/>XModel.grad.dzsdx[ileft],<sp/>XModel.grad.dzbdx[i],<sp/>XModel.grad.dzbdx[ileft]);</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2622"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"></highlight></codeline>
<codeline lineno="2624"><highlight class="normal"></highlight></codeline>
<codeline lineno="2630"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testkurganovX(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy,<sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref><sp/>XModel)</highlight></codeline>
<codeline lineno="2631"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RB,<sp/>levRB,<sp/>LBRB,<sp/>LB,<sp/>levLB,<sp/>RBLB;</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>memloc(XParam.halowidth,<sp/>XParam.blkmemwidth,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ileft<sp/>=<sp/>memloc(XParam.halowidth,<sp/>XParam.blkmemwidth,<sp/>ix<sp/>-<sp/>1,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"></highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lev<sp/>=<sp/>XModel.blocks.level[ib];</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>delta<sp/>=<sp/>calcres(T(XParam.delta),<sp/>lev);</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"></highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>g<sp/>=<sp/>T(XParam.g);</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>CFL<sp/>=<sp/>T(XParam.CFL);</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>epsi<sp/>=<sp/>nextafter(T(1.0),<sp/>T(2.0))<sp/>-<sp/>T(1.0);</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>eps<sp/>=<sp/>T(XParam.eps)<sp/>+<sp/>epsi;</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"></highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>neighbours<sp/>for<sp/>source<sp/>term</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2645"><highlight class="normal"></highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/><sp/><sp/>RB<sp/>=<sp/>XModel.blocks.RightBot[ib];</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/><sp/><sp/>levRB<sp/>=<sp/>XModel.blocks.level[RB];</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/><sp/>LBRB<sp/>=<sp/>XModel.blocks.LeftBot[RB];</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"></highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/><sp/><sp/>LB<sp/>=<sp/>XModel.blocks.LeftBot[ib];</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/><sp/><sp/>levLB<sp/>=<sp/>XModel.blocks.level[LB];</highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/><sp/><sp/>RBLB<sp/>=<sp/>XModel.blocks.RightBot[LB];</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"></highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>dhdxi<sp/>=<sp/>XModel.grad.dhdx[i];</highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>dhdxmin<sp/>=<sp/>XModel.grad.dhdx[ileft];</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>cm<sp/>=<sp/>T(1.0);</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>fmu<sp/>=<sp/>T(1.0);</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"></highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>hi<sp/>=<sp/>XModel.evolv.h[i];</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"></highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>hn<sp/>=<sp/>XModel.evolv.h[ileft];</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>dx,<sp/>zi,<sp/>zl,<sp/>zn,<sp/>zr,<sp/>zlr,<sp/>hl,<sp/>up,<sp/>hp,<sp/>hr,<sp/>um,<sp/>hm,<sp/>ga;</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"></highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>along<sp/>X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/><sp/><sp/>dx<sp/>=<sp/>delta<sp/>*<sp/>T(0.5);</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/><sp/><sp/>zi<sp/>=<sp/>XModel.evolv.zs[i]<sp/>-<sp/>hi;</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"></highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;%f\n&quot;,<sp/>zi);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2669"><highlight class="normal"></highlight></codeline>
<codeline lineno="2670"><highlight class="normal"></highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//zl<sp/>=<sp/>zi<sp/>-<sp/>dx*(dzsdx[i]<sp/>-<sp/>dhdx[i]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/><sp/><sp/>zl<sp/>=<sp/>zi<sp/>-<sp/>dx<sp/>*<sp/>(XModel.grad.dzsdx[i]<sp/>-<sp/>dhdxi);</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;%f\n&quot;,<sp/>zl);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2674"><highlight class="normal"></highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/><sp/><sp/>zn<sp/>=<sp/>XModel.evolv.zs[ileft]<sp/>-<sp/>hn;</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"></highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;%f\n&quot;,<sp/>zn);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/><sp/><sp/>zr<sp/>=<sp/>zn<sp/>+<sp/>dx<sp/>*<sp/>(XModel.grad.dzsdx[ileft]<sp/>-<sp/>dhdxmin);</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"></highlight></codeline>
<codeline lineno="2680"><highlight class="normal"></highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/><sp/><sp/>zlr<sp/>=<sp/>max(zl,<sp/>zr);</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"></highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//hl<sp/>=<sp/>hi<sp/>-<sp/>dx*dhdx[i];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/><sp/><sp/>hl<sp/>=<sp/>hi<sp/>-<sp/>dx<sp/>*<sp/>dhdxi;</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/><sp/><sp/>up<sp/>=<sp/>XModel.evolv.u[i]<sp/>-<sp/>dx<sp/>*<sp/>XModel.grad.dudx[i];</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/><sp/><sp/>hp<sp/>=<sp/>max(T(0.0),<sp/>hl<sp/>+<sp/>zl<sp/>-<sp/>zlr);</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"></highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/><sp/><sp/>hr<sp/>=<sp/>hn<sp/>+<sp/>dx<sp/>*<sp/>dhdxmin;</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/><sp/><sp/>um<sp/>=<sp/>XModel.evolv.u[ileft]<sp/>+<sp/>dx<sp/>*<sp/>XModel.grad.dudx[ileft];</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/><sp/><sp/>hm<sp/>=<sp/>max(T(0.0),<sp/>hr<sp/>+<sp/>zr<sp/>-<sp/>zlr);</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"></highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/><sp/><sp/>ga<sp/>=<sp/>g<sp/>*<sp/>T(0.5);</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>fh,<sp/>fu,<sp/>fv,<sp/>sl,<sp/>sr,<sp/>dt;</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"></highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//solver<sp/>below<sp/>also<sp/>modifies<sp/>fh<sp/>and<sp/>fu</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/><sp/><sp/>dt<sp/>=<sp/>KurgSolver(g,<sp/>delta,<sp/>epsi,<sp/>CFL,<sp/>cm,<sp/>fmu,<sp/>hp,<sp/>hm,<sp/>up,<sp/>um,<sp/>fh,<sp/>fu);</highlight></codeline>
<codeline lineno="2698"><highlight class="normal"></highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ix<sp/>==<sp/>XParam.blkwidth)<sp/>&amp;&amp;<sp/>levRB<sp/>&lt;<sp/>lev)</highlight><highlight class="comment">//(ix==16)<sp/>i.e.<sp/>in<sp/>the<sp/>right<sp/>halo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jj<sp/>=<sp/>LBRB<sp/>==<sp/>ib<sp/>?<sp/>floor(iy<sp/>*<sp/>(T)0.5)<sp/>:<sp/>floor(iy<sp/>*<sp/>(T)0.5)<sp/>+<sp/>XParam.blkwidth<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iright<sp/>=<sp/>memloc(XParam.halowidth,<sp/>XParam.blkmemwidth,<sp/>0,<sp/>jj,<sp/>RB);;</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hi<sp/>=<sp/>XModel.evolv.h[iright];</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zi<sp/>=<sp/>XModel.zb[iright];</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ix<sp/>==<sp/>0)<sp/>&amp;&amp;<sp/>levLB<sp/>&lt;<sp/>lev)</highlight><highlight class="comment">//(ix==16)<sp/>i.e.<sp/>in<sp/>the<sp/>right<sp/>halo<sp/>if<sp/>you<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jj<sp/>=<sp/>RBLB<sp/>==<sp/>ib<sp/>?<sp/>floor(iy<sp/>*<sp/>(T)0.5)<sp/>:<sp/>floor(iy<sp/>*<sp/>(T)0.5)<sp/>+<sp/>XParam.blkwidth<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ilc<sp/>=<sp/>memloc(XParam.halowidth,<sp/>XParam.blkmemwidth,<sp/>XParam.blkwidth<sp/>-<sp/>1,<sp/>jj,<sp/>LB);</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hn<sp/>=<sp/>XModel.evolv.h[ilc];</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zn<sp/>=<sp/>XModel.zb[ilc];</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"></highlight></codeline>
<codeline lineno="2714"><highlight class="normal"></highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/><sp/><sp/>sl<sp/>=<sp/>ga<sp/>*<sp/>(utils::sq(hp)<sp/>-<sp/>utils::sq(hl)<sp/>+<sp/>(hl<sp/>+<sp/>hi)<sp/>*<sp/>(zi<sp/>-<sp/>zl));</highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/><sp/><sp/>sr<sp/>=<sp/>ga<sp/>*<sp/>(utils::sq(hm)<sp/>-<sp/>utils::sq(hr)<sp/>+<sp/>(hr<sp/>+<sp/>hn)<sp/>*<sp/>(zn<sp/>-<sp/>zr));</highlight></codeline>
<codeline lineno="2717"><highlight class="normal"></highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Fhu[i]<sp/>=<sp/>fmu<sp/>*<sp/>fh;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Fqux[i]<sp/>=<sp/>fmu<sp/>*<sp/>(fu<sp/>-<sp/>sl);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Su[i]<sp/>=<sp/>fmu<sp/>*<sp/>(fu<sp/>-<sp/>sr);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Fqvx[i]<sp/>=<sp/>fmu<sp/>*<sp/>fv;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2723"><highlight class="normal"></highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;hi=%f;<sp/>hn=%f,fh=%f;<sp/>fu=%f;<sp/>sl=%f;<sp/>sr=%f;<sp/>hp=%f;<sp/>hm=%f;<sp/>hr=%f;<sp/>hl=%f;<sp/>zr=%f;<sp/>zl=%f;\n&quot;</highlight><highlight class="normal">,<sp/>hi,<sp/>hn,<sp/>fh,<sp/>fu,<sp/>sl,<sp/>sr,<sp/>hp,<sp/>hm,<sp/>hr,<sp/>hl,<sp/>zr,<sp/>zl);</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"></highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;h[i]=%f;<sp/>h[ileft]=%f<sp/>dhdx[i]=%f,<sp/>dhdx[ileft]=%f,<sp/>zs[i]=%f,<sp/>zs[ileft]=%f,<sp/>dzsdx[i]=%f,<sp/>dzsdx[ileft]=%f\n&quot;</highlight><highlight class="normal">,<sp/>XModel.evolv.h[i],<sp/>XModel.evolv.h[ileft],<sp/>XModel.grad.dhdx[i],<sp/>XModel.grad.dhdx[ileft],<sp/>XModel.evolv.zs[i],<sp/>XModel.evolv.zs[ileft],<sp/>XModel.grad.dzsdx[i],<sp/>XModel.grad.dzsdx[ileft]);</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"></highlight></codeline>
<codeline lineno="2728"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"></highlight></codeline>
<codeline lineno="2737"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Raintest(T<sp/>zsnit,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gpu,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>alpha,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>engine)</highlight></codeline>
<codeline lineno="2738"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;#####&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classParam" kindref="compound">Param</ref><sp/>XParam;</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>initVol,<sp/>TheoryInput;</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/>TheoryInput<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialise<sp/>domain<sp/>and<sp/>required<sp/>resolution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.dx<sp/>=<sp/>1.0<sp/>/<sp/>((1<sp/>&lt;&lt;<sp/>6));<sp/></highlight><highlight class="comment">//1&lt;&lt;8<sp/><sp/>=<sp/>2^8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.xo<sp/>=<sp/>-0.5;</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.yo<sp/>=<sp/>-0.5;</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.xmax<sp/>=<sp/>0.5;</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.ymax<sp/>=<sp/>0.5;</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"></highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.engine<sp/>=<sp/>engine;</highlight></codeline>
<codeline lineno="2751"><highlight class="normal"></highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//XParam.initlevel<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//XParam.minlevel<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//XParam.maxlevel<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2755"><highlight class="normal"></highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.zsinit<sp/>=<sp/>zsnit;</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//XParam.zsoffset<sp/>=<sp/>0.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2758"><highlight class="normal"></highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Output<sp/>times<sp/>for<sp/>comparisons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.endtime<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.outputtimestep<sp/>=<sp/>0.1;</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"></highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.smallnc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"></highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.cf<sp/>=<sp/>0.01;</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.frictionmodel<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"></highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Specification<sp/>of<sp/>the<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//XParam.test<sp/>=<sp/>7;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2770"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.rainforcing<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.ForceMassConserve<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2772"><highlight class="normal"></highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Enforce<sp/>GPU/CPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2774"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.GPUDEVICE<sp/>=<sp/>gpu;</highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.rainbnd<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//output<sp/>vars</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>outv<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;zb&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;h&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;zs&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;u&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;v&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.outvars<sp/>=<sp/>outv;</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"></highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>Model<sp/>setup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref><sp/>XModel;</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref><sp/>XModel_g;</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"></highlight></codeline>
<codeline lineno="2784"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structForcing" kindref="compound">Forcing&lt;float&gt;</ref><sp/>XForcing;</highlight></codeline>
<codeline lineno="2785"><highlight class="normal"></highlight></codeline>
<codeline lineno="2786"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structStaticForcingP" kindref="compound">StaticForcingP&lt;float&gt;</ref><sp/>bathy;</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"></highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy.push_back(bathy);</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"></highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialise<sp/>forcing<sp/>bathymetry<sp/>to<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].xo<sp/>=<sp/>-1.0;</highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].yo<sp/>=<sp/>-1.0;</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].xmax<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].ymax<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].nx<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].ny<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"></highlight></codeline>
<codeline lineno="2798"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].dx<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].dy<sp/>=<sp/>XForcing.Bathy[0].dx;</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"></highlight></codeline>
<codeline lineno="2801"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(1,<sp/>1,<sp/>XForcing.left.blks,<sp/>XForcing.right.blks,<sp/>XForcing.top.blks,<sp/>XForcing.bot.blks);</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"></highlight></codeline>
<codeline lineno="2803"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(XForcing.Bathy[0].nx,<sp/>XForcing.Bathy[0].ny,<sp/>XForcing.Bathy[0].val);</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"></highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>XForcing.Bathy[0].ny;<sp/>j++)</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>XForcing.Bathy[0].nx;<sp/>i++)</highlight></codeline>
<codeline lineno="2808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.Bathy[0].val[i<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].nx]<sp/>=<sp/>i<sp/>*<sp/>alpha<sp/>/<sp/>100;</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"></highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>wall<sp/>boundary<sp/>conditions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.right.type<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2815"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.left.type<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.top.type<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2817"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.bot.type<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"></highlight></codeline>
<codeline lineno="2819"><highlight class="normal"></highlight></codeline>
<codeline lineno="2820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Value<sp/>definition<sp/>for<sp/>surface<sp/>rain<sp/>fall</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2821"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>Q<sp/>=<sp/>300;<sp/></highlight><highlight class="comment">//<sp/>mm/hr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Theoretical<sp/>volume<sp/>of<sp/>water<sp/>input<sp/>during<sp/>the<sp/>simulation<sp/>in<sp/>m3:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>TheoryInput<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>from<sp/>a<sp/>rain<sp/>input<sp/>of:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Q<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;mm/hr.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Create<sp/>a<sp/>temporary<sp/>file<sp/>with<sp/>rain<sp/>fluxes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ofstream<sp/>rain_file(</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;testrain.tmp&quot;</highlight><highlight class="normal">,<sp/>std::ios_base::out<sp/>|<sp/>std::ios_base::trunc);</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/><sp/><sp/><sp/>rain_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;0.0<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(Q)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"><sp/><sp/><sp/><sp/>rain_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;3600.0<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(Q)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/><sp/><sp/>rain_file.close();<sp/></highlight><highlight class="comment">//destructor<sp/>implicitly<sp/>does<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2829"><highlight class="normal"></highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Rain.inputfile<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;testrain.tmp&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Rain.uniform<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2832"><highlight class="normal"></highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reading<sp/>rain<sp/>forcing<sp/>from<sp/>file<sp/>for<sp/>CPU<sp/>and<sp/>unifor<sp/>rain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2834"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Rain.unidata<sp/>=<sp/>readINfileUNI(XForcing.Rain.inputfile,<sp/>XParam.reftime);</highlight></codeline>
<codeline lineno="2835"><highlight class="normal"></highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/><sp/><sp/>checkparamsanity(XParam,<sp/>XForcing);</highlight></codeline>
<codeline lineno="2837"><highlight class="normal"></highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/><sp/><sp/>InitMesh(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"></highlight></codeline>
<codeline lineno="2840"><highlight class="normal"><sp/><sp/><sp/><sp/>InitialConditions(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"></highlight></codeline>
<codeline lineno="2842"><highlight class="normal"><sp/><sp/><sp/><sp/>InitialAdaptation(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="2843"><highlight class="normal"></highlight></codeline>
<codeline lineno="2844"><highlight class="normal"><sp/><sp/><sp/><sp/>SetupGPU(XParam,<sp/>XModel,<sp/>XForcing,<sp/>XModel_g);</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/><sp/><sp/>initVol<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>0;<sp/>ibl<sp/>&lt;<sp/>XParam.nblk;<sp/>ibl++)</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>XModel.blocks.active[ibl];</highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>delta<sp/>=<sp/>calcres(XParam.delta,<sp/>XModel.blocks.level[ib]);</highlight></codeline>
<codeline lineno="2850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy<sp/>=<sp/>0;<sp/>iy<sp/>&lt;<sp/>XParam.blkwidth;<sp/>iy++)</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>0;<sp/>ix<sp/>&lt;<sp/>(XParam.blkwidth);<sp/>ix++)</highlight></codeline>
<codeline lineno="2853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>memloc(XParam,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initVol<sp/>=<sp/>initVol<sp/>+<sp/>XModel.evolv.h[i]<sp/>*<sp/>delta<sp/>*<sp/>delta;</highlight></codeline>
<codeline lineno="2856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2858"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"></highlight></codeline>
<codeline lineno="2860"><highlight class="normal"></highlight></codeline>
<codeline lineno="2861"><highlight class="normal"><sp/><sp/><sp/><sp/>MainLoop(XParam,<sp/>XForcing,<sp/>XModel,<sp/>XModel_g);</highlight></codeline>
<codeline lineno="2862"><highlight class="normal"></highlight></codeline>
<codeline lineno="2863"><highlight class="normal"><sp/><sp/><sp/><sp/>TheoryInput<sp/>=<sp/>Q<sp/>/<sp/>T(1000.0)<sp/>/<sp/>T(3600.0)<sp/>*<sp/>XParam.endtime;</highlight></codeline>
<codeline lineno="2864"><highlight class="normal"></highlight></codeline>
<codeline lineno="2865"><highlight class="normal"></highlight></codeline>
<codeline lineno="2866"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>SimulatedVolume<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="2867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>0;<sp/>ibl<sp/>&lt;<sp/>XParam.nblk;<sp/>ibl++)</highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>XModel.blocks.active[ibl];</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>delta<sp/>=<sp/>calcres(XParam.delta,<sp/>XModel.blocks.level[ib]);</highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy<sp/>=<sp/>0;<sp/>iy<sp/>&lt;<sp/>XParam.blkwidth;<sp/>iy++)</highlight></codeline>
<codeline lineno="2872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>0;<sp/>ix<sp/>&lt;<sp/>(XParam.blkwidth);<sp/>ix++)</highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>memloc(XParam,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SimulatedVolume<sp/>=<sp/>SimulatedVolume<sp/>+<sp/>XModel.evolv.h[i]<sp/>*<sp/>delta<sp/>*<sp/>delta;</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2880"><highlight class="normal"></highlight></codeline>
<codeline lineno="2881"><highlight class="normal"><sp/><sp/><sp/><sp/>SimulatedVolume<sp/>=<sp/>SimulatedVolume<sp/>-<sp/>initVol;</highlight></codeline>
<codeline lineno="2882"><highlight class="normal"></highlight></codeline>
<codeline lineno="2883"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>error<sp/>=<sp/>abs(SimulatedVolume<sp/>-<sp/>TheoryInput);</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"></highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>modelgood<sp/>=<sp/>error<sp/>/<sp/>TheoryInput<sp/>&lt;<sp/>0.05;</highlight></codeline>
<codeline lineno="2886"><highlight class="normal"></highlight></codeline>
<codeline lineno="2887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//log(&quot;#####&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>modelgood;</highlight></codeline>
<codeline lineno="2889"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"></highlight></codeline>
<codeline lineno="2891"><highlight class="normal"></highlight></codeline>
<codeline lineno="2901"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Raintestinput(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gpu)</highlight></codeline>
<codeline lineno="2902"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Results<sp/>of<sp/>the<sp/>experiment<sp/>of<sp/>Aureli,<sp/>interpolated<sp/>to<sp/>output<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>modelgood1,<sp/>modelgood2;</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>result;</highlight></codeline>
<codeline lineno="2906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//int<sp/>dim_flux;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2907"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;float&gt;<sp/>Flux1D,<sp/>Flux3DUni,<sp/>Flux3D,<sp/>Flux_obs;</highlight></codeline>
<codeline lineno="2908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>diff,<sp/>ref,<sp/>error;</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"></highlight></codeline>
<codeline lineno="2910"><highlight class="normal"></highlight></codeline>
<codeline lineno="2911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Comparison<sp/>between<sp/>the<sp/>1D<sp/>forcing<sp/>and<sp/>the<sp/>3D<sp/>hommgeneous<sp/>forcing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2912"><highlight class="normal"><sp/><sp/><sp/><sp/>Flux1D<sp/>=<sp/>Raintestmap(gpu,<sp/>1,<sp/>-0.03);</highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/><sp/><sp/>Flux3DUni<sp/>=<sp/>Raintestmap(gpu,<sp/>31,<sp/>-0.03);</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><sp/><sp/><sp/><sp/>ref<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/><sp/><sp/><sp/>diff<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Flux1D.size();<sp/>i++)</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diff<sp/>=<sp/>diff<sp/>+<sp/>Flux1D[i]<sp/>-<sp/>Flux3DUni[i];</highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ref<sp/>=<sp/>ref<sp/>+<sp/>Flux1D[i];</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2921"><highlight class="normal"></highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/><sp/><sp/>error<sp/>=<sp/>abs(diff<sp/>/<sp/>ref);</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Error<sp/>%f<sp/>\n&quot;</highlight><highlight class="normal">,<sp/>error);</highlight></codeline>
<codeline lineno="2924"><highlight class="normal"></highlight></codeline>
<codeline lineno="2925"><highlight class="normal"><sp/><sp/><sp/><sp/>modelgood1<sp/>=<sp/>error<sp/>&lt;<sp/>0.005;</highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>modelgood1<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;successful&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;failed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t\tRain<sp/>test<sp/>input<sp/>1D<sp/>vs<sp/>3D<sp/>homogeneous:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>result);</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"></highlight></codeline>
<codeline lineno="2929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Comparison<sp/>between<sp/>the<sp/>3D<sp/>forcing<sp/>and<sp/>the<sp/>observations<sp/>from<sp/>Iwagaki1955.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2930"><highlight class="normal"></highlight></codeline>
<codeline lineno="2931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//From<sp/>Observations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Flux_obs<sp/>=<sp/>{<sp/>1.75136262,<sp/><sp/>4.31856716,<sp/>24.36350225,<sp/>32.02235696,<sp/>32.41207121,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>31.68632601,<sp/>29.8140878<sp/>,<sp/>47.9632521<sp/>,<sp/>68.78608061,<sp/>57.03656989<sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2934"><highlight class="normal"></highlight></codeline>
<codeline lineno="2935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//From<sp/>BG_run<sp/>of<sp/>the<sp/>testcase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><sp/><sp/><sp/><sp/>Flux_obs<sp/>=<sp/>{<sp/>4.003079,<sp/>12.664897,<sp/>25.376514,<sp/>33.214722,<sp/>34.987427,<sp/>34.054474,</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>32.696472,<sp/>30.718161,<sp/>89.497993,<sp/>58.156021<sp/>};</highlight></codeline>
<codeline lineno="2938"><highlight class="normal"></highlight></codeline>
<codeline lineno="2939"><highlight class="normal"><sp/><sp/><sp/><sp/>Flux3D<sp/>=<sp/>Raintestmap(gpu,<sp/>3,<sp/>-0.03);</highlight></codeline>
<codeline lineno="2940"><highlight class="normal"><sp/><sp/><sp/><sp/>ref<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><sp/><sp/><sp/><sp/>diff<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="2942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Flux3D.size();<sp/>i++)</highlight></codeline>
<codeline lineno="2943"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diff<sp/>=<sp/>diff<sp/>+<sp/>Flux_obs[i]<sp/>-<sp/>Flux3D[i];</highlight></codeline>
<codeline lineno="2945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ref<sp/>=<sp/>ref<sp/>+<sp/>Flux3D[i];</highlight></codeline>
<codeline lineno="2946"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2947"><highlight class="normal"></highlight></codeline>
<codeline lineno="2948"><highlight class="normal"><sp/><sp/><sp/><sp/>error<sp/>=<sp/>abs(diff<sp/>/<sp/>ref);</highlight></codeline>
<codeline lineno="2949"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Error<sp/>%f<sp/>\n&quot;</highlight><highlight class="normal">,<sp/>error);</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"></highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/><sp/><sp/>modelgood2<sp/>=<sp/>error<sp/>&lt;<sp/>0.00005;</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>modelgood2<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;successful&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;failed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t\tRain<sp/>test<sp/>input<sp/>3D<sp/>map<sp/>vs<sp/>Iwagaki1955:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>result);</highlight></codeline>
<codeline lineno="2954"><highlight class="normal"></highlight></codeline>
<codeline lineno="2955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(modelgood1<sp/>*<sp/>modelgood2);</highlight></codeline>
<codeline lineno="2956"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2957"><highlight class="normal"></highlight></codeline>
<codeline lineno="2963"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/>std::vector&lt;float&gt;<sp/>Raintestmap(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gpu,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dimf,<sp/>T<sp/>zinit)</highlight></codeline>
<codeline lineno="2964"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2965"><highlight class="normal"><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;#####&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k;</highlight></codeline>
<codeline lineno="2967"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>rainDuration<sp/>=<sp/>10.0;</highlight></codeline>
<codeline lineno="2968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NX<sp/>=<sp/>2502;</highlight></codeline>
<codeline lineno="2969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NY<sp/>=<sp/>22;</highlight></codeline>
<codeline lineno="2970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NT;</highlight></codeline>
<codeline lineno="2971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>xRain;</highlight></codeline>
<codeline lineno="2972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>yRain;</highlight></codeline>
<codeline lineno="2973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>tRain;</highlight></codeline>
<codeline lineno="2974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>rainForcing;</highlight></codeline>
<codeline lineno="2975"><highlight class="normal"></highlight></codeline>
<codeline lineno="2976"><highlight class="normal"></highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classParam" kindref="compound">Param</ref><sp/>XParam;</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>delta;</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"></highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialise<sp/>domain<sp/>and<sp/>required<sp/>resolution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.xo<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2982"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.yo<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2983"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.ymax<sp/>=<sp/>0.196;</highlight></codeline>
<codeline lineno="2984"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.dx<sp/>=<sp/>(XParam.ymax<sp/>-<sp/>XParam.yo)<sp/>/<sp/>(1<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.delta<sp/>=<sp/>XParam.dx;</highlight></codeline>
<codeline lineno="2986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Xmax_exp<sp/>=<sp/>28.0;<sp/></highlight><highlight class="comment">//minimum<sp/>Xmax<sp/>position<sp/>(adjust<sp/>to<sp/>have<sp/>a<sp/>&quot;full<sp/>blocks&quot;<sp/>config)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Calculating<sp/>xmax<sp/>to<sp/>have<sp/>full<sp/>blocs<sp/>with<sp/>at<sp/>least<sp/>a<sp/>full<sp/>block<sp/>behaving<sp/>as<sp/>a<sp/>reservoir</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.xmax<sp/>=<sp/>XParam.xo<sp/>+<sp/>(16<sp/>*<sp/>XParam.dx)<sp/>*<sp/>std::ceil((Xmax_exp<sp/>-<sp/>XParam.xo)<sp/>/<sp/>(16<sp/>*<sp/>XParam.dx))<sp/>+<sp/>(16<sp/>*<sp/>XParam.dx);</highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Surf<sp/>=<sp/>T((XParam.xmax<sp/>-<sp/>XParam.xo)<sp/>*<sp/>(XParam.ymax<sp/>-<sp/>XParam.yo));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.nblk<sp/>=<sp/>ftoi(((XParam.xmax<sp/>-<sp/>XParam.xo)<sp/>/<sp/>XParam.dx<sp/>/<sp/>16)<sp/>*<sp/>((XParam.ymax<sp/>-<sp/>XParam.yo)<sp/>/<sp/>XParam.dx<sp/>/<sp/>16));</highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.rainbnd<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.zsinit<sp/>=<sp/>zinit;</highlight></codeline>
<codeline lineno="2993"><highlight class="normal"></highlight></codeline>
<codeline lineno="2994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Output<sp/>times<sp/>for<sp/>comparisons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2995"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.endtime<sp/>=<sp/>30.0;</highlight></codeline>
<codeline lineno="2996"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.outputtimestep<sp/>=<sp/>3.0;</highlight></codeline>
<codeline lineno="2997"><highlight class="normal"></highlight></codeline>
<codeline lineno="2998"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.smallnc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2999"><highlight class="normal"></highlight></codeline>
<codeline lineno="3000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Specification<sp/>of<sp/>the<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3001"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.test<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="3002"><highlight class="normal"></highlight></codeline>
<codeline lineno="3003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Enforce<sp/>GPU/CPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3004"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.GPUDEVICE<sp/>=<sp/>gpu;</highlight></codeline>
<codeline lineno="3005"><highlight class="normal"></highlight></codeline>
<codeline lineno="3006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Bottom<sp/>friction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3007"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.frictionmodel<sp/>=<sp/>-1;<sp/></highlight><highlight class="comment">//Manning<sp/>model</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3008"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.cf<sp/>=<sp/>0.009;<sp/></highlight><highlight class="comment">//n<sp/>in<sp/>m^(-1/3)s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3009"><highlight class="normal"></highlight></codeline>
<codeline lineno="3010"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>outvi[16]<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;zb&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;h&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;zs&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;u&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;v&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Fqux&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Fqvx&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Fquy&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Fqvy&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Fhu&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Fhv&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dh&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dhu&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dhv&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Su&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Sv&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="3011"><highlight class="normal"></highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>outv;</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"></highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nv<sp/>=<sp/>0;<sp/>nv<sp/>&lt;<sp/>15;<sp/>nv++)</highlight></codeline>
<codeline lineno="3015"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outv.push_back(outvi[nv]);</highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"></highlight></codeline>
<codeline lineno="3019"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.outvars<sp/>=<sp/>outv;</highlight></codeline>
<codeline lineno="3020"><highlight class="normal"></highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>Model<sp/>setup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref><sp/>XModel;</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref><sp/>XModel_g;</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"></highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structForcing" kindref="compound">Forcing&lt;float&gt;</ref><sp/>XForcing;</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"></highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structStaticForcingP" kindref="compound">StaticForcingP&lt;float&gt;</ref><sp/>bathy;</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"></highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy.push_back(bathy);</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"></highlight></codeline>
<codeline lineno="3031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialise<sp/>forcing<sp/>bathymetry<sp/>to<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3032"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].xo<sp/>=<sp/>-1.0;</highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].yo<sp/>=<sp/>-1.0;</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].xmax<sp/>=<sp/>28.0;</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].ymax<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].dx<sp/>=<sp/>0.1;</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].dy<sp/>=<sp/>XForcing.Bathy[0].dx;</highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].nx<sp/>=<sp/>ftoi((XForcing.Bathy[0].xmax<sp/>-<sp/>XForcing.Bathy[0].xo)<sp/>/<sp/>XForcing.Bathy[0].dx<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].ny<sp/>=<sp/>ftoi((XForcing.Bathy[0].ymax<sp/>-<sp/>XForcing.Bathy[0].yo)<sp/>/<sp/>XForcing.Bathy[0].dx<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="3040"><highlight class="normal"></highlight></codeline>
<codeline lineno="3041"><highlight class="normal"></highlight></codeline>
<codeline lineno="3042"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(1,<sp/>1,<sp/>XForcing.left.blks,<sp/>XForcing.right.blks,<sp/>XForcing.top.blks,<sp/>XForcing.bot.blks);</highlight></codeline>
<codeline lineno="3043"><highlight class="normal"></highlight></codeline>
<codeline lineno="3044"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(XForcing.Bathy[0].nx,<sp/>XForcing.Bathy[0].ny,<sp/>XForcing.Bathy[0].val);</highlight></codeline>
<codeline lineno="3045"><highlight class="normal"></highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>XForcing.Bathy[0].ny;<sp/>j++)</highlight></codeline>
<codeline lineno="3047"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>XForcing.Bathy[0].nx;<sp/>i++)</highlight></codeline>
<codeline lineno="3049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.Bathy[0].val[i<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].nx]<sp/>=<sp/>-10.0;</highlight></codeline>
<codeline lineno="3051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>(9<sp/>/<sp/>XForcing.Bathy[0].dx<sp/>+<sp/>1))</highlight></codeline>
<codeline lineno="3052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.Bathy[0].val[i<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].nx]<sp/>=<sp/>T(0.2<sp/>+<sp/>(9.0<sp/>-<sp/>i<sp/>*<sp/>XForcing.Bathy[0].dx)<sp/>*<sp/>2.0<sp/>/<sp/>100.0);</highlight></codeline>
<codeline lineno="3054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>(17<sp/>/<sp/>XForcing.Bathy[0].dx<sp/>+<sp/>1))</highlight></codeline>
<codeline lineno="3056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.Bathy[0].val[i<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].nx]<sp/>=<sp/>T(0.08<sp/>+<sp/>(17.0<sp/>-<sp/>i<sp/>*<sp/>XForcing.Bathy[0].dx)<sp/>*<sp/>1.5<sp/>/<sp/>100.0);</highlight></codeline>
<codeline lineno="3058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>(25<sp/>/<sp/>XForcing.Bathy[0].dx<sp/>+<sp/>1))</highlight></codeline>
<codeline lineno="3060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.Bathy[0].val[i<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].nx]<sp/>=<sp/>T(0.0<sp/>+<sp/>(25.0<sp/>-<sp/>i<sp/>*<sp/>XForcing.Bathy[0].dx)<sp/>*<sp/>1.0<sp/>/<sp/>100.0);</highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3064"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3065"><highlight class="normal"></highlight></codeline>
<codeline lineno="3066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>wall<sp/>boundary<sp/>conditions<sp/>but<sp/>at<sp/>the<sp/>bottom<sp/>of<sp/>the<sp/>slope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3067"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//XForcing.right.type<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3068"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.left.type<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//XForcing.top.type<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//XForcing.bot.type<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3071"><highlight class="normal"></highlight></codeline>
<codeline lineno="3072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Value<sp/>definition<sp/>for<sp/>surface<sp/>rain<sp/>fall</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3073"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>r1<sp/>=<sp/>T(3888.0);<sp/></highlight><highlight class="comment">//<sp/>mm/hr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3074"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>r2<sp/>=<sp/>T(2296.8);<sp/></highlight><highlight class="comment">//mm/hr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>r3<sp/>=<sp/>T(2880.0);<sp/></highlight><highlight class="comment">//mm/hr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>Q<sp/>=<sp/>(r1<sp/>+<sp/>r2<sp/>+<sp/>r3)<sp/>/<sp/>3;</highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TheoryInput<sp/>=<sp/>Q<sp/>*<sp/>XParam.outputtimestep<sp/>/<sp/>T(1000.0)<sp/>/<sp/>T(3600.0)<sp/>*<sp/>Surf;<sp/>//m3/s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;#<sp/>Theoretical<sp/>volume<sp/>of<sp/>water<sp/>input<sp/>during<sp/>the<sp/>simulation<sp/>in<sp/>m3:<sp/>%f<sp/>,<sp/>from<sp/>a<sp/>mean<sp/>rain<sp/>input<sp/>of:<sp/>%f<sp/>mm/hr.\n&quot;,<sp/>TheoryInput,<sp/>Q);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eps<sp/>=<sp/>0.0001;</highlight></codeline>
<codeline lineno="3080"><highlight class="normal"></highlight></codeline>
<codeline lineno="3081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>rain<sp/>forcing<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dimf<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="3083"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Create<sp/>a<sp/>temporary<sp/>file<sp/>with<sp/>rain<sp/>fluxes<sp/>for<sp/>uniform<sp/>rain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ofstream<sp/>rain_file(</highlight></codeline>
<codeline lineno="3086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;testrain.tmp&quot;</highlight><highlight class="normal">,<sp/>std::ios_base::out<sp/>|<sp/>std::ios_base::trunc);</highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rain_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;0.0<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(Q)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rain_file<sp/>&lt;&lt;<sp/>std::to_string(rainDuration)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(Q)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="3089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rain_file<sp/>&lt;&lt;<sp/>std::to_string(rainDuration<sp/>+<sp/>eps)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>0.0&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="3090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rain_file<sp/>&lt;&lt;<sp/>std::to_string(rainDuration<sp/>+<sp/>360000)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>0.0&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="3091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rain_file.close();<sp/></highlight><highlight class="comment">//destructor<sp/>implicitly<sp/>does<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3092"><highlight class="normal"></highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.Rain.inputfile<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;testrain.tmp&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.Rain.uniform<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"></highlight></codeline>
<codeline lineno="3096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reading<sp/>rain<sp/>forcing<sp/>from<sp/>file<sp/>for<sp/>CPU<sp/>and<sp/>uniform<sp/>rain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.Rain.unidata<sp/>=<sp/>readINfileUNI(XForcing.Rain.inputfile,<sp/>XParam.reftime);</highlight></codeline>
<codeline lineno="3098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;1D<sp/>rain<sp/>forcing<sp/>read\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3099"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//non-uniform<sp/>forcing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3101"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.Rain.uniform<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3103"><highlight class="normal"></highlight></codeline>
<codeline lineno="3104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//X<sp/>Y<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3105"><highlight class="normal"></highlight></codeline>
<codeline lineno="3106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xRain<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>*<sp/>NX);</highlight></codeline>
<codeline lineno="3107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yRain<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>*<sp/>NY);</highlight></codeline>
<codeline lineno="3108"><highlight class="normal"></highlight></codeline>
<codeline lineno="3109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NX;<sp/>i++)<sp/>{<sp/>xRain[i]<sp/>=<sp/>-0.005<sp/>+<sp/>0.01<sp/>*<sp/>i;<sp/>}</highlight></codeline>
<codeline lineno="3110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>NY;<sp/>j++)<sp/>{<sp/>yRain[j]<sp/>=<sp/>-0.01<sp/>+<sp/>0.01<sp/>*<sp/>j;<sp/>}</highlight></codeline>
<codeline lineno="3111"><highlight class="normal"></highlight></codeline>
<codeline lineno="3112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NT<sp/>=<sp/>601;</highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tRain<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>*<sp/>NT);</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tt<sp/>=<sp/>0;<sp/>tt<sp/>&lt;<sp/>NT;<sp/>tt++)<sp/>{<sp/>tRain[tt]<sp/>=<sp/>XParam.endtime<sp/>/<sp/>(NT<sp/>-<sp/>1)<sp/>*<sp/>tt;<sp/>}</highlight></codeline>
<codeline lineno="3115"><highlight class="normal"></highlight></codeline>
<codeline lineno="3116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rainForcing<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>*<sp/>NT<sp/>*<sp/>NY<sp/>*<sp/>NX);</highlight></codeline>
<codeline lineno="3117"><highlight class="normal"></highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Create<sp/>a<sp/>non-uniform<sp/>time-variable<sp/>rain<sp/>forcing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dimf<sp/>==<sp/>3)</highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Create<sp/>the<sp/>rain<sp/>forcing:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>NT;<sp/>k++)</highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>NY;<sp/>j++)</highlight></codeline>
<codeline lineno="3125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NX;<sp/>i++)</highlight></codeline>
<codeline lineno="3127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tRain[k]<sp/>&lt;<sp/>rainDuration<sp/>+<sp/>eps)</highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xRain[i]<sp/>&lt;<sp/>8.0)</highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rainForcing[k<sp/>*<sp/>(NX<sp/>*<sp/>NY)<sp/>+<sp/>j<sp/>*<sp/>NX<sp/>+<sp/>i]<sp/>=<sp/>r1;</highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xRain[i]<sp/>&lt;<sp/>16.0)</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rainForcing[k<sp/>*<sp/>(NX<sp/>*<sp/>NY)<sp/>+<sp/>j<sp/>*<sp/>NX<sp/>+<sp/>i]<sp/>=<sp/>r2;</highlight></codeline>
<codeline lineno="3137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rainForcing[k<sp/>*<sp/>(NX<sp/>*<sp/>NY)<sp/>+<sp/>j<sp/>*<sp/>NX<sp/>+<sp/>i]<sp/>=<sp/>r3;</highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rainForcing[k<sp/>*<sp/>(NX<sp/>*<sp/>NY)<sp/>+<sp/>i<sp/>*<sp/>NY<sp/>+<sp/>j]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3150"><highlight class="normal"></highlight></codeline>
<codeline lineno="3151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Write<sp/>the<sp/>netcdf<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>create3dnc(</highlight><highlight class="stringliteral">&quot;rainTemp.nc&quot;</highlight><highlight class="normal">,<sp/>NX,<sp/>NY,<sp/>NT,<sp/>xRain,<sp/>yRain,<sp/>tRain,<sp/>rainForcing,<sp/></highlight><highlight class="stringliteral">&quot;myrainforcing&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3153"><highlight class="normal"></highlight></codeline>
<codeline lineno="3154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;non-uniform<sp/>forcing\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3155"><highlight class="normal"></highlight></codeline>
<codeline lineno="3156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//End<sp/>creation<sp/>of<sp/>the<sp/>nc<sp/>file<sp/>for<sp/>rain<sp/>forcing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Create<sp/>a<sp/>uniform<sp/>time-variable<sp/>rain<sp/>forcing<sp/>using<sp/>a<sp/>map<sp/>forcing<sp/>(nc<sp/>file)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dimf<sp/>==<sp/>31)</highlight></codeline>
<codeline lineno="3160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Create<sp/>the<sp/>rain<sp/>forcing:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>NT;<sp/>k++)</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>NY;<sp/>j++)</highlight></codeline>
<codeline lineno="3165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NX;<sp/>i++)</highlight></codeline>
<codeline lineno="3167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tRain[k]<sp/>&lt;<sp/>rainDuration<sp/>+<sp/>eps)</highlight></codeline>
<codeline lineno="3169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rainForcing[k<sp/>*<sp/>(NX<sp/>*<sp/>NY)<sp/>+<sp/>j<sp/>*<sp/>NX<sp/>+<sp/>i]<sp/>=<sp/>Q;</highlight></codeline>
<codeline lineno="3171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rainForcing[k<sp/>*<sp/>(NX<sp/>*<sp/>NY)<sp/>+<sp/>i<sp/>*<sp/>NY<sp/>+<sp/>j]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="3175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3179"><highlight class="normal"></highlight></codeline>
<codeline lineno="3180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Write<sp/>the<sp/>netcdf<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>create3dnc(</highlight><highlight class="stringliteral">&quot;rainTemp.nc&quot;</highlight><highlight class="normal">,<sp/>NX,<sp/>NY,<sp/>NT,<sp/>xRain,<sp/>yRain,<sp/>tRain,<sp/>rainForcing,<sp/></highlight><highlight class="stringliteral">&quot;myrainforcing&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3182"><highlight class="normal"></highlight></codeline>
<codeline lineno="3183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;non-uniform<sp/>forcing<sp/>31\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//End<sp/>creation<sp/>of<sp/>the<sp/>nc<sp/>file<sp/>for<sp/>rain<sp/>forcing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3187"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//2D<sp/>forcing<sp/>(map<sp/>without<sp/>time<sp/>variation<sp/>is<sp/>not<sp/>working)</highlight></codeline>
<codeline lineno="3188"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(dimf<sp/>==<sp/>2)//dimf==2<sp/>for<sp/>rain<sp/>forcing</highlight></codeline>
<codeline lineno="3189"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3190"><highlight class="comment"></highlight></codeline>
<codeline lineno="3191"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Create<sp/>a<sp/>non-uniform<sp/>time-constant<sp/>rain<sp/>forcing</highlight></codeline>
<codeline lineno="3192"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rainForcing<sp/>=<sp/>(double*)malloc(sizeof(double)<sp/>*<sp/>NY<sp/>*<sp/>NX);</highlight></codeline>
<codeline lineno="3193"><highlight class="comment"></highlight></codeline>
<codeline lineno="3194"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Create<sp/>the<sp/>rain<sp/>forcing:</highlight></codeline>
<codeline lineno="3195"><highlight class="comment"></highlight></codeline>
<codeline lineno="3196"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>NY;<sp/>j++)</highlight></codeline>
<codeline lineno="3197"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3198"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NX;<sp/>i++)</highlight></codeline>
<codeline lineno="3199"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3200"><highlight class="comment"></highlight></codeline>
<codeline lineno="3201"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(xRain[i]<sp/>&lt;<sp/>8.0)</highlight></codeline>
<codeline lineno="3202"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3203"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rainForcing[j<sp/>*<sp/>NX<sp/>+<sp/>i]<sp/>=<sp/>r1;</highlight></codeline>
<codeline lineno="3204"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3205"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(xRain[i]<sp/>&lt;<sp/>16.0)</highlight></codeline>
<codeline lineno="3206"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3207"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rainForcing[j<sp/>*<sp/>NX<sp/>+<sp/>i]<sp/>=<sp/>r2;</highlight></codeline>
<codeline lineno="3208"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3209"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="3210"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3211"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rainForcing[j<sp/>*<sp/>NX<sp/>+<sp/>i]<sp/>=<sp/>r3;</highlight></codeline>
<codeline lineno="3212"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3213"><highlight class="comment"></highlight></codeline>
<codeline lineno="3214"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3215"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3216"><highlight class="comment"></highlight></codeline>
<codeline lineno="3217"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>create2dnc(&quot;rainTempt.nc&quot;,<sp/>NX,<sp/>NY,<sp/>xRain,<sp/>yRain,<sp/>rainForcing,<sp/>&quot;myrainforcing&quot;);</highlight></codeline>
<codeline lineno="3218"><highlight class="comment"></highlight></codeline>
<codeline lineno="3219"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//End<sp/>creation<sp/>of<sp/>the<sp/>nc<sp/>file<sp/>for<sp/>rain<sp/>forcing</highlight></codeline>
<codeline lineno="3220"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3221"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>printf(</highlight><highlight class="stringliteral">&quot;Error<sp/>in<sp/>rain<sp/>forcing<sp/>dimension<sp/>(should<sp/>be<sp/>in<sp/>[1,3,31])\n&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="3223"><highlight class="normal"></highlight></codeline>
<codeline lineno="3224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Reading<sp/>non-unform<sp/>forcing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>gpgpu<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.GPUDEVICE<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="3227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpgpu<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3230"><highlight class="normal"></highlight></codeline>
<codeline lineno="3231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.Rain<sp/>=<sp/>readfileinfo(</highlight><highlight class="stringliteral">&quot;rainTemp.nc&quot;</highlight><highlight class="normal">,<sp/>XForcing.Rain);</highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.Rain.uniform<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.Rain.varname<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;myrainforcing&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3234"><highlight class="normal"></highlight></codeline>
<codeline lineno="3235"><highlight class="normal"></highlight></codeline>
<codeline lineno="3236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InitDynforcing(gpgpu,<sp/>XParam,<sp/>XForcing.Rain);</highlight></codeline>
<codeline lineno="3237"><highlight class="normal"></highlight></codeline>
<codeline lineno="3238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//readDynforcing(gpgpu,<sp/>XParam.totaltime,<sp/>XForcing.Rain);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3239"><highlight class="normal"></highlight></codeline>
<codeline lineno="3240"><highlight class="normal"></highlight></codeline>
<codeline lineno="3241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(rainForcing);</highlight></codeline>
<codeline lineno="3242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(xRain);</highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(yRain);</highlight></codeline>
<codeline lineno="3244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(tRain);</highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3246"><highlight class="normal"></highlight></codeline>
<codeline lineno="3247"><highlight class="normal"></highlight></codeline>
<codeline lineno="3248"><highlight class="normal"><sp/><sp/><sp/><sp/>checkparamsanity(XParam,<sp/>XForcing);</highlight></codeline>
<codeline lineno="3249"><highlight class="normal"></highlight></codeline>
<codeline lineno="3250"><highlight class="normal"><sp/><sp/><sp/><sp/>InitMesh(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="3251"><highlight class="normal"></highlight></codeline>
<codeline lineno="3252"><highlight class="normal"><sp/><sp/><sp/><sp/>InitialConditions(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="3253"><highlight class="normal"></highlight></codeline>
<codeline lineno="3254"><highlight class="normal"><sp/><sp/><sp/><sp/>InitialAdaptation(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="3255"><highlight class="normal"></highlight></codeline>
<codeline lineno="3256"><highlight class="normal"><sp/><sp/><sp/><sp/>SetupGPU(XParam,<sp/>XModel,<sp/>XForcing,<sp/>XModel_g);</highlight></codeline>
<codeline lineno="3257"><highlight class="normal"></highlight></codeline>
<codeline lineno="3258"><highlight class="normal"><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;Initialising<sp/>model<sp/>main<sp/>loop&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3259"><highlight class="normal"></highlight></codeline>
<codeline lineno="3260"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structLoop" kindref="compound">Loop&lt;T&gt;</ref><sp/>XLoop<sp/>=<sp/>InitLoop(XParam,<sp/>XModel);</highlight></codeline>
<codeline lineno="3261"><highlight class="normal"></highlight></codeline>
<codeline lineno="3262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Define<sp/>some<sp/>useful<sp/>variables<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3263"><highlight class="normal"><sp/><sp/><sp/><sp/>Initmeanmax(XParam,<sp/>XLoop,<sp/>XModel,<sp/>XModel_g);</highlight></codeline>
<codeline lineno="3264"><highlight class="normal"></highlight></codeline>
<codeline lineno="3265"><highlight class="normal"></highlight></codeline>
<codeline lineno="3266"><highlight class="normal"><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\t\tCompleted&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3267"><highlight class="normal"><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;Model<sp/>Running...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3268"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;float&gt;<sp/>Flux;</highlight></codeline>
<codeline lineno="3269"><highlight class="normal"></highlight></codeline>
<codeline lineno="3270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(XLoop.totaltime<sp/>&lt;<sp/>XParam.endtime)</highlight></codeline>
<codeline lineno="3271"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3272"><highlight class="normal"></highlight></codeline>
<codeline lineno="3273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>Forcing<sp/>at<sp/>this<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>updateforcing(XParam,<sp/>XLoop,<sp/>XForcing);</highlight></codeline>
<codeline lineno="3275"><highlight class="normal"></highlight></codeline>
<codeline lineno="3276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Core<sp/>engine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.GPUDEVICE<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FlowGPU(XParam,<sp/>XLoop,<sp/>XForcing,<sp/>XModel_g);</highlight></codeline>
<codeline lineno="3280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FlowCPU(XParam,<sp/>XLoop,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="3284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3285"><highlight class="normal"></highlight></codeline>
<codeline lineno="3286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Time<sp/>keeping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XLoop.totaltime<sp/>=<sp/>XLoop.totaltime<sp/>+<sp/>XLoop.dt;</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;\tTime<sp/>=<sp/>%f<sp/>\n&quot;,<sp/>XLoop.totaltime);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3289"><highlight class="normal"></highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>Toutput,<sp/>calculate<sp/>the<sp/>flux<sp/>at<sp/>x=24m;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3291"><highlight class="normal"></highlight></codeline>
<codeline lineno="3292"><highlight class="normal"></highlight></codeline>
<codeline lineno="3293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Getting<sp/>the<sp/>coordinate<sp/>for<sp/>the<sp/>flux<sp/>calculation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bl,<sp/>ixx,<sp/>ibl,<sp/>ix,<sp/>ib;</highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>dist<sp/>=<sp/>T(1000000000.0);</highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ibl<sp/>=<sp/>0;<sp/>ibl<sp/>&lt;<sp/>XParam.nblk;<sp/>ibl++)</highlight></codeline>
<codeline lineno="3297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ib<sp/>=<sp/>XModel.blocks.active[ibl];</highlight></codeline>
<codeline lineno="3299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delta<sp/>=<sp/>calcres(T(XParam.dx),<sp/>XModel.blocks.level[ib]);</highlight></codeline>
<codeline lineno="3300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ix<sp/>=<sp/>0;<sp/>ix<sp/>&lt;<sp/>XParam.blkwidth;<sp/>ix++)</highlight></codeline>
<codeline lineno="3301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//n<sp/>=<sp/>memloc(XParam,<sp/>ix,<sp/>0,<sp/>ib);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(XModel.blocks.xo[ibl]<sp/>+<sp/>ix<sp/>*<sp/>delta<sp/>-<sp/>24.0)<sp/>&lt;<sp/>dist)</highlight></codeline>
<codeline lineno="3304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ixx<sp/>=<sp/>ix;</highlight></codeline>
<codeline lineno="3306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bl<sp/>=<sp/>ibl;</highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist<sp/>=<sp/>T(abs(XModel.blocks.xo[ibl]<sp/>+<sp/>ix<sp/>*<sp/>delta<sp/>-<sp/>24.0));</highlight></codeline>
<codeline lineno="3308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3311"><highlight class="normal"></highlight></codeline>
<codeline lineno="3312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XLoop.nextoutputtime<sp/>-<sp/>XLoop.totaltime<sp/>&lt;=<sp/>XLoop.dt<sp/>*<sp/>T(0.00001)<sp/>&amp;&amp;<sp/>XParam.outputtimestep<sp/>&gt;<sp/>0.0)</highlight></codeline>
<codeline lineno="3313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>finalFlux<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="3315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.GPUDEVICE<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="3316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ivar<sp/>=<sp/>0;<sp/>ivar<sp/>&lt;<sp/>XParam.outvars.size();<sp/>ivar++)</highlight></codeline>
<codeline lineno="3318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CUDA_CHECK(cudaMemcpy(XModel.OutputVarMap[XParam.outvars[ivar]],<sp/>XModel_g.OutputVarMap[XParam.outvars[ivar]],<sp/>XParam.nblkmem<sp/>*<sp/>XParam.blksize<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T),<sp/>cudaMemcpyDeviceToHost));</highlight></codeline>
<codeline lineno="3320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3322"><highlight class="normal"></highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Save2Netcdf(XParam,<sp/>XLoop,<sp/>XModel);</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"></highlight></codeline>
<codeline lineno="3325"><highlight class="normal"></highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Calculation<sp/>of<sp/>the<sp/>flux<sp/>at<sp/>the<sp/>bottom<sp/>of<sp/>the<sp/>slope<sp/>(x=24m)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ib<sp/>=<sp/>XModel.blocks.active[bl];</highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delta<sp/>=<sp/>calcres(T(XParam.delta),<sp/>XModel.blocks.level[ib]);</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"></highlight></codeline>
<codeline lineno="3330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy<sp/>=<sp/>0;<sp/>iy<sp/>&lt;<sp/>XParam.blkwidth;<sp/>iy++)</highlight></codeline>
<codeline lineno="3331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>memloc(XParam,<sp/>ixx,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="3333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finalFlux<sp/>=<sp/>finalFlux<sp/>+<sp/>XModel.evolv.h[n]<sp/>*<sp/>XModel.evolv.u[n]<sp/>*<sp/>delta;</highlight></codeline>
<codeline lineno="3334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finalFlux<sp/>=<sp/>finalFlux<sp/>/<sp/>float(XParam.ymax<sp/>-<sp/>XParam.yo)<sp/>*<sp/>100.0f<sp/>*<sp/>100.0f;</highlight></codeline>
<codeline lineno="3336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Flux.push_back(finalFlux);</highlight></codeline>
<codeline lineno="3337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XLoop.nextoutputtime<sp/>=<sp/>XLoop.nextoutputtime<sp/>+<sp/>XParam.outputtimestep;</highlight></codeline>
<codeline lineno="3338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\tTime<sp/>=<sp/>%f,<sp/>Flux<sp/>at<sp/>bottom<sp/>end<sp/>of<sp/>slope<sp/>:<sp/>%f<sp/>\n&quot;</highlight><highlight class="normal">,<sp/>XLoop.totaltime,<sp/>finalFlux);</highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3340"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3342"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>Flux.size();<sp/>n++)</highlight></codeline>
<codeline lineno="3343"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3344"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;Flux<sp/>at<sp/>%i<sp/>:<sp/>%f<sp/>\n&quot;,<sp/>n,<sp/>Flux[n]);</highlight></codeline>
<codeline lineno="3345"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3346"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3347"><highlight class="normal"></highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Flux;</highlight></codeline>
<codeline lineno="3349"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3350"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>std::vector&lt;float&gt;<sp/>Raintestmap&lt;float&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gpu,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dimf,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Zsinit);</highlight></codeline>
<codeline lineno="3351"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>std::vector&lt;float&gt;<sp/>Raintestmap&lt;double&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gpu,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dimf,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Zsinit);</highlight></codeline>
<codeline lineno="3352"><highlight class="normal"></highlight></codeline>
<codeline lineno="3353"><highlight class="normal"></highlight></codeline>
<codeline lineno="3358"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ZoneOutputTest(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nzones,<sp/>T<sp/>zsinit)</highlight></codeline>
<codeline lineno="3359"><highlight class="normal"></highlight><highlight class="comment">//template<sp/>bool<sp/>ZoneOutputTest&lt;float&gt;(int<sp/>nzones,<sp/>float<sp/>zsinit);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3360"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3361"><highlight class="normal"><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;#####&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3362"><highlight class="normal"></highlight></codeline>
<codeline lineno="3363"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classParam" kindref="compound">Param</ref><sp/>XParam;</highlight></codeline>
<codeline lineno="3364"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structForcing" kindref="compound">Forcing&lt;float&gt;</ref><sp/>XForcing;</highlight></codeline>
<codeline lineno="3365"><highlight class="normal"></highlight></codeline>
<codeline lineno="3366"><highlight class="normal"></highlight></codeline>
<codeline lineno="3367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nzones<sp/>==<sp/>3)</highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>param<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//readforcing(XParam,<sp/>XForcing);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classoutzoneP" kindref="compound">outzoneP</ref><sp/>zone;</highlight></codeline>
<codeline lineno="3372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zone.outname<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;whole.nc&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zone.xstart<sp/>=<sp/>-10;</highlight></codeline>
<codeline lineno="3374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zone.xend<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="3375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zone.ystart<sp/>=<sp/>-10;</highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zone.yend<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="3377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XParam.outzone.push_back(zone);</highlight></codeline>
<codeline lineno="3378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zone.outname<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;zoomed.nc&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zone.xstart<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zone.xend<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="3381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zone.ystart<sp/>=<sp/>-2;</highlight></codeline>
<codeline lineno="3382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zone.yend<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="3383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XParam.outzone.push_back(zone);</highlight></codeline>
<codeline lineno="3384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zone.outname<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;zoomed2.nc&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zone.xstart<sp/>=<sp/>-2;</highlight></codeline>
<codeline lineno="3386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zone.xend<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zone.ystart<sp/>=<sp/>-4;</highlight></codeline>
<codeline lineno="3388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zone.yend<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="3389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XParam.outzone.push_back(zone);</highlight></codeline>
<codeline lineno="3390"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3391"><highlight class="normal"></highlight></codeline>
<codeline lineno="3392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialise<sp/>domain<sp/>and<sp/>required<sp/>resolution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3393"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.dx<sp/>=<sp/>1.0<sp/>/<sp/>((1<sp/>&lt;&lt;<sp/>6));<sp/></highlight><highlight class="comment">//1&lt;&lt;8<sp/><sp/>=<sp/>2^8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3394"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.xo<sp/>=<sp/>-5;</highlight></codeline>
<codeline lineno="3395"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.yo<sp/>=<sp/>-5;</highlight></codeline>
<codeline lineno="3396"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.xmax<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="3397"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.ymax<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="3398"><highlight class="normal"></highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.initlevel<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3400"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.minlevel<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="3401"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.maxlevel<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3402"><highlight class="normal"></highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.zsinit<sp/>=<sp/>zsinit;</highlight></codeline>
<codeline lineno="3404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//XParam.zsoffset<sp/>=<sp/>0.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3405"><highlight class="normal"></highlight></codeline>
<codeline lineno="3406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Output<sp/>times<sp/>for<sp/>comparisons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3407"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.endtime<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="3408"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.outputtimestep<sp/>=<sp/>0.5;</highlight></codeline>
<codeline lineno="3409"><highlight class="normal"></highlight></codeline>
<codeline lineno="3410"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.smallnc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3411"><highlight class="normal"></highlight></codeline>
<codeline lineno="3412"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.cf<sp/>=<sp/>0.0001;</highlight></codeline>
<codeline lineno="3413"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.frictionmodel<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3414"><highlight class="normal"></highlight></codeline>
<codeline lineno="3415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Specification<sp/>of<sp/>the<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//XParam.test<sp/>=<sp/>7;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3417"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.rainforcing<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3418"><highlight class="normal"></highlight></codeline>
<codeline lineno="3419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Enforce<sp/>GPU/CPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//XParam.GPUDEVICE<sp/>=<sp/>gpu;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//XParam.rainbnd<sp/>=<sp/>true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3422"><highlight class="normal"></highlight></codeline>
<codeline lineno="3423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>Model<sp/>setup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3424"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref><sp/>XModel;</highlight></codeline>
<codeline lineno="3425"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref><sp/>XModel_g;</highlight></codeline>
<codeline lineno="3426"><highlight class="normal"></highlight></codeline>
<codeline lineno="3427"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structStaticForcingP" kindref="compound">StaticForcingP&lt;float&gt;</ref><sp/>bathy;</highlight></codeline>
<codeline lineno="3428"><highlight class="normal"></highlight></codeline>
<codeline lineno="3429"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy.push_back(bathy);</highlight></codeline>
<codeline lineno="3430"><highlight class="normal"></highlight></codeline>
<codeline lineno="3431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialise<sp/>forcing<sp/>bathymetry<sp/>to<sp/>a<sp/>central<sp/>hill</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3432"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].xo<sp/>=<sp/>-10.0;</highlight></codeline>
<codeline lineno="3433"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].yo<sp/>=<sp/>-10.0;</highlight></codeline>
<codeline lineno="3434"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].xmax<sp/>=<sp/>10.0;</highlight></codeline>
<codeline lineno="3435"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].ymax<sp/>=<sp/>10.0;</highlight></codeline>
<codeline lineno="3436"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].nx<sp/>=<sp/>501;</highlight></codeline>
<codeline lineno="3437"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].ny<sp/>=<sp/>501;</highlight></codeline>
<codeline lineno="3438"><highlight class="normal"></highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].dx<sp/>=<sp/>0.1;</highlight></codeline>
<codeline lineno="3440"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].dy<sp/>=<sp/>XForcing.Bathy[0].dx;</highlight></codeline>
<codeline lineno="3441"><highlight class="normal"></highlight></codeline>
<codeline lineno="3442"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(1,<sp/>1,<sp/>XForcing.left.blks,<sp/>XForcing.right.blks,<sp/>XForcing.top.blks,<sp/>XForcing.bot.blks);</highlight></codeline>
<codeline lineno="3443"><highlight class="normal"></highlight></codeline>
<codeline lineno="3444"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(XForcing.Bathy[0].nx,<sp/>XForcing.Bathy[0].ny,<sp/>XForcing.Bathy[0].val);</highlight></codeline>
<codeline lineno="3445"><highlight class="normal"></highlight></codeline>
<codeline lineno="3446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>rs,<sp/>x,<sp/>y,<sp/>r,<sp/>hm;</highlight></codeline>
<codeline lineno="3447"><highlight class="normal"><sp/><sp/><sp/><sp/>rs<sp/>=<sp/>20;<sp/></highlight><highlight class="comment">//hill<sp/>radio<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3448"><highlight class="normal"><sp/><sp/><sp/><sp/>hm<sp/>=<sp/>5;<sp/></highlight><highlight class="comment">//hill<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>XForcing.Bathy[0].ny;<sp/>j++)</highlight></codeline>
<codeline lineno="3450"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>XForcing.Bathy[0].nx;<sp/>i++)</highlight></codeline>
<codeline lineno="3452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>float(XForcing.Bathy[0].xo<sp/>+<sp/>i<sp/>*<sp/>XForcing.Bathy[0].dx);</highlight></codeline>
<codeline lineno="3454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>float(XForcing.Bathy[0].yo<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].dx);</highlight></codeline>
<codeline lineno="3455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>sqrt(x<sp/>*<sp/>x<sp/>+<sp/>y<sp/>*<sp/>y);</highlight></codeline>
<codeline lineno="3456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>&lt;<sp/>rs)</highlight></codeline>
<codeline lineno="3457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.Bathy[0].val[i<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].nx]<sp/>=<sp/>hm<sp/>*<sp/>(1<sp/>-<sp/>r<sp/>/<sp/>rs);</highlight></codeline>
<codeline lineno="3459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>-4.7<sp/>|<sp/>x<sp/>&gt;<sp/>4.7<sp/>|<sp/>y<sp/>&lt;<sp/>-4.7<sp/>|<sp/>y<sp/>&gt;<sp/>4.7)</highlight></codeline>
<codeline lineno="3461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.Bathy[0].val[i<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].nx]<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="3463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3465"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3466"><highlight class="normal"></highlight></codeline>
<codeline lineno="3467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Adaptation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3468"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.AdaptCrit<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Targetlevel&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3469"><highlight class="normal"></highlight></codeline>
<codeline lineno="3470"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structStaticForcingP" kindref="compound">StaticForcingP&lt;int&gt;</ref><sp/>Target;</highlight></codeline>
<codeline lineno="3471"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.targetadapt.push_back(Target);</highlight></codeline>
<codeline lineno="3472"><highlight class="normal"></highlight></codeline>
<codeline lineno="3473"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.targetadapt[0].xo<sp/>=<sp/>-10;</highlight></codeline>
<codeline lineno="3474"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.targetadapt[0].yo<sp/>=<sp/>-10;</highlight></codeline>
<codeline lineno="3475"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.targetadapt[0].xmax<sp/>=<sp/>10.0;</highlight></codeline>
<codeline lineno="3476"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.targetadapt[0].ymax<sp/>=<sp/>10.0;</highlight></codeline>
<codeline lineno="3477"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.targetadapt[0].nx<sp/>=<sp/>501;</highlight></codeline>
<codeline lineno="3478"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.targetadapt[0].ny<sp/>=<sp/>501;</highlight></codeline>
<codeline lineno="3479"><highlight class="normal"></highlight></codeline>
<codeline lineno="3480"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.targetadapt[0].dx<sp/>=<sp/>0.1;</highlight></codeline>
<codeline lineno="3481"><highlight class="normal"></highlight></codeline>
<codeline lineno="3482"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(XForcing.targetadapt[0].nx,<sp/>XForcing.targetadapt[0].ny,<sp/>XForcing.targetadapt[0].val);</highlight></codeline>
<codeline lineno="3483"><highlight class="normal"></highlight></codeline>
<codeline lineno="3484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>XForcing.targetadapt[0].ny;<sp/>j++)</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>XForcing.targetadapt[0].nx;<sp/>i++)</highlight></codeline>
<codeline lineno="3487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>float(XForcing.targetadapt[0].xo<sp/>+<sp/>i<sp/>*<sp/>XForcing.targetadapt[0].dx);</highlight></codeline>
<codeline lineno="3489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>float(XForcing.targetadapt[0].yo<sp/>+<sp/>j<sp/>*<sp/>XForcing.targetadapt[0].dx);</highlight></codeline>
<codeline lineno="3490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>0.0)</highlight></codeline>
<codeline lineno="3491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.targetadapt[0].val[i<sp/>+<sp/>j<sp/>*<sp/>XForcing.targetadapt[0].nx]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="3493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>0.0)</highlight></codeline>
<codeline lineno="3497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.targetadapt[0].val[i<sp/>+<sp/>j<sp/>*<sp/>XForcing.targetadapt[0].nx]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.targetadapt[0].val[i<sp/>+<sp/>j<sp/>*<sp/>XForcing.targetadapt[0].nx]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3506"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3507"><highlight class="normal"></highlight></codeline>
<codeline lineno="3508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>wall<sp/>boundary<sp/>conditions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3509"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.right.type<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3510"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.left.type<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3511"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.top.type<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3512"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.bot.type<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3513"><highlight class="normal"></highlight></codeline>
<codeline lineno="3514"><highlight class="normal"></highlight></codeline>
<codeline lineno="3515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Create<sp/>a<sp/>temporary<sp/>file<sp/>with<sp/>river<sp/>fluxes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Q<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3517"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ofstream<sp/>river_file(</highlight></codeline>
<codeline lineno="3518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;testriver.tmp&quot;</highlight><highlight class="normal">,<sp/>std::ios_base::out<sp/>|<sp/>std::ios_base::trunc);</highlight></codeline>
<codeline lineno="3519"><highlight class="normal"><sp/><sp/><sp/><sp/>river_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;0.0<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(Q)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="3520"><highlight class="normal"><sp/><sp/><sp/><sp/>river_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;3600.0<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(Q)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="3521"><highlight class="normal"><sp/><sp/><sp/><sp/>river_file.close();<sp/></highlight><highlight class="comment">//destructor<sp/>implicitly<sp/>does<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3522"><highlight class="normal"></highlight></codeline>
<codeline lineno="3523"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classRiver" kindref="compound">River</ref><sp/>thisriver;</highlight></codeline>
<codeline lineno="3524"><highlight class="normal"><sp/><sp/><sp/><sp/>thisriver.Riverflowfile<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;testriver.tmp&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3525"><highlight class="normal"><sp/><sp/><sp/><sp/>thisriver.xstart<sp/>=<sp/>-0.2;</highlight></codeline>
<codeline lineno="3526"><highlight class="normal"><sp/><sp/><sp/><sp/>thisriver.xend<sp/>=<sp/>0.2;</highlight></codeline>
<codeline lineno="3527"><highlight class="normal"><sp/><sp/><sp/><sp/>thisriver.ystart<sp/>=<sp/>-0.2;</highlight></codeline>
<codeline lineno="3528"><highlight class="normal"><sp/><sp/><sp/><sp/>thisriver.yend<sp/>=<sp/>0.2;</highlight></codeline>
<codeline lineno="3529"><highlight class="normal"></highlight></codeline>
<codeline lineno="3530"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.rivers.push_back(thisriver);</highlight></codeline>
<codeline lineno="3531"><highlight class="normal"></highlight></codeline>
<codeline lineno="3532"><highlight class="normal"></highlight></codeline>
<codeline lineno="3533"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.rivers[0].flowinput<sp/>=<sp/>readFlowfile(XForcing.rivers[0].Riverflowfile,<sp/>XParam.reftime);</highlight></codeline>
<codeline lineno="3534"><highlight class="normal"></highlight></codeline>
<codeline lineno="3535"><highlight class="normal"></highlight></codeline>
<codeline lineno="3536"><highlight class="normal"><sp/><sp/><sp/><sp/>checkparamsanity(XParam,<sp/>XForcing);</highlight></codeline>
<codeline lineno="3537"><highlight class="normal"></highlight></codeline>
<codeline lineno="3538"><highlight class="normal"><sp/><sp/><sp/><sp/>InitMesh(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="3539"><highlight class="normal"></highlight></codeline>
<codeline lineno="3540"><highlight class="normal"><sp/><sp/><sp/><sp/>InitialConditions(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="3541"><highlight class="normal"></highlight></codeline>
<codeline lineno="3542"><highlight class="normal"><sp/><sp/><sp/><sp/>InitialAdaptation(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="3543"><highlight class="normal"></highlight></codeline>
<codeline lineno="3544"><highlight class="normal"><sp/><sp/><sp/><sp/>SetupGPU(XParam,<sp/>XModel,<sp/>XForcing,<sp/>XModel_g);</highlight></codeline>
<codeline lineno="3545"><highlight class="normal"></highlight></codeline>
<codeline lineno="3546"><highlight class="normal"><sp/><sp/><sp/><sp/>MainLoop(XParam,<sp/>XForcing,<sp/>XModel,<sp/>XModel_g);</highlight></codeline>
<codeline lineno="3547"><highlight class="normal"></highlight></codeline>
<codeline lineno="3548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Test<sp/>if<sp/>file<sp/>exist<sp/>and<sp/>can<sp/>be<sp/>open:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3550"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>observedSize{<sp/>473251462,23304761,130802886<sp/>};</highlight></codeline>
<codeline lineno="3551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>o<sp/>=<sp/>0;<sp/>o<sp/>&lt;<sp/>XModel.blocks.outZone.size();<sp/>o++)</highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ifstream<sp/>fs(XModel.blocks.outZone[o].outname);</highlight></codeline>
<codeline lineno="3554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fs.fail())</highlight></codeline>
<codeline lineno="3555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error++;</highlight></codeline>
<codeline lineno="3557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Calculate<sp/>the<sp/>size<sp/>of<sp/>the<sp/>file<sp/>in<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ifstream<sp/>in_file(XModel.blocks.outZone[o].outname,<sp/>std::ios::binary);</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in_file.seekg(0,<sp/>std::ios::end);</highlight></codeline>
<codeline lineno="3563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>file_size<sp/>=<sp/>in_file.tellg();</highlight></codeline>
<codeline lineno="3564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;sizes<sp/>:<sp/>%i<sp/>in<sp/>bytes\n&quot;</highlight><highlight class="normal">,<sp/>file_size);</highlight></codeline>
<codeline lineno="3565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/>error<sp/>*<sp/>(observedSize[o]<sp/>/<sp/>file_size);</highlight></codeline>
<codeline lineno="3566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3567"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3568"><highlight class="normal"></highlight></codeline>
<codeline lineno="3569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>modelgood<sp/>=<sp/>(1<sp/>-<sp/>abs(error))<sp/>&lt;<sp/>0.05;</highlight></codeline>
<codeline lineno="3570"><highlight class="normal"></highlight></codeline>
<codeline lineno="3571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//log(&quot;#####&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>modelgood;</highlight></codeline>
<codeline lineno="3573"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3574"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ZoneOutputTest&lt;float&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nzones,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>zsinit);</highlight></codeline>
<codeline lineno="3575"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ZoneOutputTest&lt;double&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nzones,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>zsinit);</highlight></codeline>
<codeline lineno="3576"><highlight class="normal"></highlight></codeline>
<codeline lineno="3577"><highlight class="normal"></highlight></codeline>
<codeline lineno="3578"><highlight class="normal"></highlight></codeline>
<codeline lineno="3586"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Rainlossestest(T<sp/>zsinit,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gpu,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>alpha)</highlight></codeline>
<codeline lineno="3587"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NX<sp/>=<sp/>21;</highlight></codeline>
<codeline lineno="3589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NY<sp/>=<sp/>21;</highlight></codeline>
<codeline lineno="3590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>xLoss;</highlight></codeline>
<codeline lineno="3591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>yLoss;</highlight></codeline>
<codeline lineno="3592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>ilForcing;</highlight></codeline>
<codeline lineno="3593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>clForcing;</highlight></codeline>
<codeline lineno="3594"><highlight class="normal"></highlight></codeline>
<codeline lineno="3595"><highlight class="normal"><sp/><sp/><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;#####&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3596"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classParam" kindref="compound">Param</ref><sp/>XParam;</highlight></codeline>
<codeline lineno="3597"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>initVol,<sp/>TheoryInput;</highlight></codeline>
<codeline lineno="3598"><highlight class="normal"><sp/><sp/><sp/><sp/>TheoryInput<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="3599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialise<sp/>domain<sp/>and<sp/>required<sp/>resolution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3600"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.dx<sp/>=<sp/>1.0<sp/>/<sp/>((1<sp/>&lt;&lt;<sp/>6));<sp/></highlight><highlight class="comment">//1&lt;&lt;8<sp/><sp/>=<sp/>2^8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3601"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.xo<sp/>=<sp/>-0.5;</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.yo<sp/>=<sp/>-0.5;</highlight></codeline>
<codeline lineno="3603"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.xmax<sp/>=<sp/>0.5;</highlight></codeline>
<codeline lineno="3604"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.ymax<sp/>=<sp/>0.5;</highlight></codeline>
<codeline lineno="3605"><highlight class="normal"></highlight></codeline>
<codeline lineno="3606"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.zsinit<sp/>=<sp/>zsinit;</highlight></codeline>
<codeline lineno="3607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//XParam.zsoffset<sp/>=<sp/>0.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3608"><highlight class="normal"></highlight></codeline>
<codeline lineno="3609"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.infiltration<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3610"><highlight class="normal"></highlight></codeline>
<codeline lineno="3611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Output<sp/>times<sp/>for<sp/>comparisons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3612"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.endtime<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="3613"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.outputtimestep<sp/>=<sp/>0.1;</highlight></codeline>
<codeline lineno="3614"><highlight class="normal"></highlight></codeline>
<codeline lineno="3615"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.smallnc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3616"><highlight class="normal"></highlight></codeline>
<codeline lineno="3617"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.cf<sp/>=<sp/>0.01;</highlight></codeline>
<codeline lineno="3618"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.frictionmodel<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3619"><highlight class="normal"></highlight></codeline>
<codeline lineno="3620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Enforce<sp/>GPU/CPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3621"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.GPUDEVICE<sp/>=<sp/>gpu;</highlight></codeline>
<codeline lineno="3622"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.rainbnd<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//output<sp/>vars</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3624"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>outvi[17]<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;zb&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;h&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;zs&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;u&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;v&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Fqux&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Fqvx&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Fquy&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Fqvy&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Fhu&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Fhv&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dh&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dhu&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dhv&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Su&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Sv&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;hgw&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="3625"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>outv;</highlight></codeline>
<codeline lineno="3626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nv<sp/>=<sp/>0;<sp/>nv<sp/>&lt;<sp/>17;<sp/>nv++)</highlight></codeline>
<codeline lineno="3627"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outv.push_back(outvi[nv]);</highlight></codeline>
<codeline lineno="3629"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3630"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.outvars<sp/>=<sp/>outv;</highlight></codeline>
<codeline lineno="3631"><highlight class="normal"></highlight></codeline>
<codeline lineno="3632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>Model<sp/>setup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3633"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref><sp/>XModel;</highlight></codeline>
<codeline lineno="3634"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref><sp/>XModel_g;</highlight></codeline>
<codeline lineno="3635"><highlight class="normal"></highlight></codeline>
<codeline lineno="3636"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structForcing" kindref="compound">Forcing&lt;float&gt;</ref><sp/>XForcing;</highlight></codeline>
<codeline lineno="3637"><highlight class="normal"></highlight></codeline>
<codeline lineno="3638"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structStaticForcingP" kindref="compound">StaticForcingP&lt;float&gt;</ref><sp/>bathy;</highlight></codeline>
<codeline lineno="3639"><highlight class="normal"></highlight></codeline>
<codeline lineno="3640"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy.push_back(bathy);</highlight></codeline>
<codeline lineno="3641"><highlight class="normal"></highlight></codeline>
<codeline lineno="3642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialise<sp/>forcing<sp/>bathymetry<sp/>to<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3643"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].xo<sp/>=<sp/>-1.0;</highlight></codeline>
<codeline lineno="3644"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].yo<sp/>=<sp/>-1.0;</highlight></codeline>
<codeline lineno="3645"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].xmax<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="3646"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].ymax<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="3647"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].nx<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="3648"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].ny<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="3649"><highlight class="normal"></highlight></codeline>
<codeline lineno="3650"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].dx<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="3651"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].dy<sp/>=<sp/>XForcing.Bathy[0].dx;</highlight></codeline>
<codeline lineno="3652"><highlight class="normal"></highlight></codeline>
<codeline lineno="3653"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(1,<sp/>1,<sp/>XForcing.left.blks,<sp/>XForcing.right.blks,<sp/>XForcing.top.blks,<sp/>XForcing.bot.blks);</highlight></codeline>
<codeline lineno="3654"><highlight class="normal"></highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(XForcing.Bathy[0].nx,<sp/>XForcing.Bathy[0].ny,<sp/>XForcing.Bathy[0].val);</highlight></codeline>
<codeline lineno="3656"><highlight class="normal"></highlight></codeline>
<codeline lineno="3657"><highlight class="normal"></highlight></codeline>
<codeline lineno="3658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>XForcing.Bathy[0].ny;<sp/>j++)</highlight></codeline>
<codeline lineno="3659"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>XForcing.Bathy[0].nx;<sp/>i++)</highlight></codeline>
<codeline lineno="3661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.Bathy[0].val[i<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].nx]<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="3663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3664"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3665"><highlight class="normal"></highlight></codeline>
<codeline lineno="3666"><highlight class="normal"></highlight></codeline>
<codeline lineno="3667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>wall<sp/>boundary<sp/>conditions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3668"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.right.type<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3669"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.left.type<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3670"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.top.type<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3671"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.bot.type<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3672"><highlight class="normal"></highlight></codeline>
<codeline lineno="3674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Value<sp/>definition<sp/>for<sp/>surface<sp/>rain<sp/>fall</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3675"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>Q<sp/>=<sp/>300;<sp/></highlight><highlight class="comment">//<sp/>mm/hr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3676"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Theoretical<sp/>volume<sp/>of<sp/>water<sp/>input<sp/>during<sp/>the<sp/>simulation<sp/>in<sp/>m3:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>TheoryInput<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>from<sp/>a<sp/>rain<sp/>input<sp/>of:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Q<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;mm/hr.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="3677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Create<sp/>a<sp/>temporary<sp/>file<sp/>with<sp/>rain<sp/>fluxes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3678"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ofstream<sp/>rain_file(</highlight></codeline>
<codeline lineno="3679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;testrain.tmp&quot;</highlight><highlight class="normal">,<sp/>std::ios_base::out<sp/>|<sp/>std::ios_base::trunc);</highlight></codeline>
<codeline lineno="3680"><highlight class="normal"><sp/><sp/><sp/><sp/>rain_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;0.0<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(Q)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="3681"><highlight class="normal"><sp/><sp/><sp/><sp/>rain_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;3600.0<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(Q)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="3682"><highlight class="normal"><sp/><sp/><sp/><sp/>rain_file.close();<sp/></highlight><highlight class="comment">//destructor<sp/>implicitly<sp/>does<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3683"><highlight class="normal"></highlight></codeline>
<codeline lineno="3684"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Rain.inputfile<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;testrain.tmp&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3685"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Rain.uniform<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3686"><highlight class="normal"></highlight></codeline>
<codeline lineno="3687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reading<sp/>rain<sp/>forcing<sp/>from<sp/>file<sp/>for<sp/>CPU<sp/>and<sp/>unifor<sp/>rain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3688"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Rain.unidata<sp/>=<sp/>readINfileUNI(XForcing.Rain.inputfile,<sp/>XParam.reftime);</highlight></codeline>
<codeline lineno="3689"><highlight class="normal"></highlight></codeline>
<codeline lineno="3691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Value<sp/>definition<sp/>for<sp/>surface<sp/>IL-CL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3692"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>IL<sp/>=<sp/>0.02;<sp/></highlight><highlight class="comment">//<sp/>mm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3693"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>CL<sp/>=<sp/>100;<sp/></highlight><highlight class="comment">//<sp/>mm/hr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3694"><highlight class="normal"></highlight></codeline>
<codeline lineno="3695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Create<sp/>a<sp/>uniform<sp/>map<sp/>of<sp/>IL-CL<sp/>forcing<sp/>(nc<sp/>file)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3696"><highlight class="normal"><sp/><sp/><sp/><sp/>xLoss<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>*<sp/>NX);</highlight></codeline>
<codeline lineno="3697"><highlight class="normal"><sp/><sp/><sp/><sp/>yLoss<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>*<sp/>NY);</highlight></codeline>
<codeline lineno="3698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NX;<sp/>i++)<sp/>{<sp/>xLoss[i]<sp/>=<sp/>-1.0<sp/>+<sp/>0.1<sp/>*<sp/>i;<sp/>}</highlight></codeline>
<codeline lineno="3699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>NY;<sp/>j++)<sp/>{<sp/>yLoss[j]<sp/>=<sp/>-1.0<sp/>+<sp/>0.1<sp/>*<sp/>j;<sp/>}</highlight></codeline>
<codeline lineno="3700"><highlight class="normal"></highlight></codeline>
<codeline lineno="3701"><highlight class="normal"><sp/><sp/><sp/><sp/>ilForcing<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>*<sp/>NY<sp/>*<sp/>NX);</highlight></codeline>
<codeline lineno="3702"><highlight class="normal"><sp/><sp/><sp/><sp/>clForcing<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>*<sp/>NY<sp/>*<sp/>NX);</highlight></codeline>
<codeline lineno="3703"><highlight class="normal"></highlight></codeline>
<codeline lineno="3704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Create<sp/>the<sp/>Losses<sp/>forcing:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>NY;<sp/>j++)</highlight></codeline>
<codeline lineno="3706"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NX;<sp/>i++)</highlight></codeline>
<codeline lineno="3708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xLoss[i]<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="3710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ilForcing[j<sp/>*<sp/>NX<sp/>+<sp/>i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clForcing[j<sp/>*<sp/>NX<sp/>+<sp/>i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ilForcing[j<sp/>*<sp/>NX<sp/>+<sp/>i]<sp/>=<sp/>IL;</highlight></codeline>
<codeline lineno="3717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clForcing[j<sp/>*<sp/>NX<sp/>+<sp/>i]<sp/>=<sp/>CL;</highlight></codeline>
<codeline lineno="3718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3720"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3721"><highlight class="normal"><sp/><sp/><sp/><sp/>create2dnc(</highlight><highlight class="stringliteral">&quot;ilrainlossTempt.nc&quot;</highlight><highlight class="normal">,<sp/>NX,<sp/>NY,<sp/>xLoss,<sp/>yLoss,<sp/>ilForcing,<sp/></highlight><highlight class="stringliteral">&quot;initialloss&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3722"><highlight class="normal"><sp/><sp/><sp/><sp/>create2dnc(</highlight><highlight class="stringliteral">&quot;clrainlossTempt.nc&quot;</highlight><highlight class="normal">,<sp/>NX,<sp/>NY,<sp/>xLoss,<sp/>yLoss,<sp/>clForcing,<sp/></highlight><highlight class="stringliteral">&quot;continuousloss&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3723"><highlight class="normal"></highlight></codeline>
<codeline lineno="3724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Reading<sp/>non-unform<sp/>forcing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>gpgpu<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.GPUDEVICE<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="3727"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpgpu<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3729"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3730"><highlight class="normal"></highlight></codeline>
<codeline lineno="3731"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.il<sp/>=<sp/>readfileinfo(</highlight><highlight class="stringliteral">&quot;ilrainlossTempt.nc&quot;</highlight><highlight class="normal">,<sp/>XForcing.il);</highlight></codeline>
<codeline lineno="3732"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.il.varname<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;initialloss&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3733"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.cl<sp/>=<sp/>readfileinfo(</highlight><highlight class="stringliteral">&quot;clrainlossTempt.nc&quot;</highlight><highlight class="normal">,<sp/>XForcing.cl);</highlight></codeline>
<codeline lineno="3734"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.cl.varname<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;continuousloss&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3735"><highlight class="normal"><sp/><sp/><sp/><sp/>readstaticforcing(XForcing.il);</highlight></codeline>
<codeline lineno="3736"><highlight class="normal"><sp/><sp/><sp/><sp/>readstaticforcing(XForcing.cl);</highlight></codeline>
<codeline lineno="3737"><highlight class="normal"></highlight></codeline>
<codeline lineno="3738"><highlight class="normal"><sp/><sp/><sp/><sp/>free(ilForcing);</highlight></codeline>
<codeline lineno="3739"><highlight class="normal"><sp/><sp/><sp/><sp/>free(clForcing);</highlight></codeline>
<codeline lineno="3740"><highlight class="normal"><sp/><sp/><sp/><sp/>free(xLoss);</highlight></codeline>
<codeline lineno="3741"><highlight class="normal"><sp/><sp/><sp/><sp/>free(yLoss);</highlight></codeline>
<codeline lineno="3742"><highlight class="normal"></highlight></codeline>
<codeline lineno="3743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//XParam.infiltration<sp/>=<sp/>false;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3744"><highlight class="normal"></highlight></codeline>
<codeline lineno="3746"><highlight class="normal"><sp/><sp/><sp/><sp/>checkparamsanity(XParam,<sp/>XForcing);</highlight></codeline>
<codeline lineno="3747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;h:<sp/>%f<sp/>\n&quot;,<sp/>XModel.evolv.h[10]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3748"><highlight class="normal"><sp/><sp/><sp/><sp/>InitMesh(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="3749"><highlight class="normal"></highlight></codeline>
<codeline lineno="3750"><highlight class="normal"><sp/><sp/><sp/><sp/>InitialConditions(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="3751"><highlight class="normal"></highlight></codeline>
<codeline lineno="3752"><highlight class="normal"></highlight></codeline>
<codeline lineno="3753"><highlight class="normal"><sp/><sp/><sp/><sp/>InitialAdaptation(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="3754"><highlight class="normal"><sp/><sp/><sp/><sp/>SetupGPU(XParam,<sp/>XModel,<sp/>XForcing,<sp/>XModel_g);</highlight></codeline>
<codeline lineno="3755"><highlight class="normal"></highlight></codeline>
<codeline lineno="3756"><highlight class="normal"><sp/><sp/><sp/><sp/>initVol<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="3757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>0;<sp/>ibl<sp/>&lt;<sp/>XParam.nblk;<sp/>ibl++)</highlight></codeline>
<codeline lineno="3758"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>XModel.blocks.active[ibl];</highlight></codeline>
<codeline lineno="3760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>delta<sp/>=<sp/>calcres(XParam.dx,<sp/>XModel.blocks.level[ib]);</highlight></codeline>
<codeline lineno="3761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy<sp/>=<sp/>0;<sp/>iy<sp/>&lt;<sp/>XParam.blkwidth;<sp/>iy++)</highlight></codeline>
<codeline lineno="3762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>0;<sp/>ix<sp/>&lt;<sp/>(XParam.blkwidth);<sp/>ix++)</highlight></codeline>
<codeline lineno="3764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>memloc(XParam,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="3766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initVol<sp/>=<sp/>initVol<sp/>+<sp/>XModel.evolv.h[i]<sp/>*<sp/>delta<sp/>*<sp/>delta;</highlight></codeline>
<codeline lineno="3767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3769"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3770"><highlight class="normal"></highlight></codeline>
<codeline lineno="3771"><highlight class="normal"></highlight></codeline>
<codeline lineno="3772"><highlight class="normal"><sp/><sp/><sp/><sp/>MainLoop(XParam,<sp/>XForcing,<sp/>XModel,<sp/>XModel_g);</highlight></codeline>
<codeline lineno="3773"><highlight class="normal"></highlight></codeline>
<codeline lineno="3774"><highlight class="normal"><sp/><sp/><sp/><sp/>TheoryInput<sp/>=<sp/>Q<sp/>/<sp/>T(1000.0)<sp/>/<sp/>T(3600.0)<sp/>*<sp/>XParam.endtime;</highlight></codeline>
<codeline lineno="3775"><highlight class="normal"></highlight></codeline>
<codeline lineno="3776"><highlight class="normal"></highlight></codeline>
<codeline lineno="3777"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>SimulatedVolume<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="3778"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>Infiltration_model<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="3779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>0;<sp/>ibl<sp/>&lt;<sp/>XParam.nblk;<sp/>ibl++)</highlight></codeline>
<codeline lineno="3780"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>XModel.blocks.active[ibl];</highlight></codeline>
<codeline lineno="3782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>delta<sp/>=<sp/>calcres(XParam.dx,<sp/>XModel.blocks.level[ib]);</highlight></codeline>
<codeline lineno="3783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy<sp/>=<sp/>0;<sp/>iy<sp/>&lt;<sp/>XParam.blkwidth;<sp/>iy++)</highlight></codeline>
<codeline lineno="3784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>0;<sp/>ix<sp/>&lt;<sp/>(XParam.blkwidth);<sp/>ix++)</highlight></codeline>
<codeline lineno="3786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>memloc(XParam,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="3788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SimulatedVolume<sp/>=<sp/>SimulatedVolume<sp/>+<sp/>XModel.evolv.h[i]<sp/>*<sp/>delta<sp/>*<sp/>delta;</highlight></codeline>
<codeline lineno="3789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Infiltration_model<sp/>=<sp/>Infiltration_model<sp/>+<sp/>XModel.hgw[i]<sp/>*<sp/>delta<sp/>*<sp/>delta;</highlight></codeline>
<codeline lineno="3790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3792"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3793"><highlight class="normal"></highlight></codeline>
<codeline lineno="3794"><highlight class="normal"></highlight></codeline>
<codeline lineno="3795"><highlight class="normal"><sp/><sp/><sp/><sp/>SimulatedVolume<sp/>=<sp/>SimulatedVolume<sp/>-<sp/>initVol;</highlight></codeline>
<codeline lineno="3796"><highlight class="normal"></highlight></codeline>
<codeline lineno="3797"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>error<sp/>=<sp/>abs(SimulatedVolume<sp/>-<sp/>TheoryInput<sp/>+<sp/>Infiltration_model);</highlight></codeline>
<codeline lineno="3798"><highlight class="normal"></highlight></codeline>
<codeline lineno="3799"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>modelgood<sp/>=<sp/>error<sp/>/<sp/>abs(TheoryInput)<sp/>&lt;<sp/>0.05;</highlight></codeline>
<codeline lineno="3800"><highlight class="normal"></highlight></codeline>
<codeline lineno="3801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Simulatedvolume:<sp/>%f<sp/>,<sp/>Theory<sp/>input:<sp/>%f<sp/>,<sp/>Calcultated<sp/>loss:<sp/>%f\n&quot;,<sp/>SimulatedVolume,<sp/>TheoryInput,<sp/>Infiltration_model);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3802"><highlight class="normal"></highlight></codeline>
<codeline lineno="3803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//log(&quot;#####&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>modelgood;</highlight></codeline>
<codeline lineno="3805"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3806"><highlight class="normal"></highlight></codeline>
<codeline lineno="3807"><highlight class="normal"></highlight></codeline>
<codeline lineno="3814"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TestGradientSpeed(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref><sp/>XModel,<sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref><sp/>XModel_g)</highlight></codeline>
<codeline lineno="3815"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fastest<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3818"><highlight class="normal"><sp/><sp/><sp/><sp/>dim3<sp/>blockDim(XParam.blkwidth,<sp/>XParam.blkwidth,<sp/>1);</highlight></codeline>
<codeline lineno="3819"><highlight class="normal"><sp/><sp/><sp/><sp/>dim3<sp/>gridDim(XParam.nblk,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="3820"><highlight class="normal"></highlight></codeline>
<codeline lineno="3821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>flux<sp/>reconstruction<sp/>the<sp/>loop<sp/>overlap<sp/>the<sp/>right(or<sp/>top<sp/>for<sp/>the<sp/>y<sp/>direction)<sp/>halo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3822"><highlight class="normal"><sp/><sp/><sp/><sp/>dim3<sp/>blockDimX2(XParam.blkwidth<sp/>+<sp/>XParam.halowidth<sp/>*<sp/>2,<sp/>XParam.blkwidth<sp/>+<sp/>XParam.halowidth<sp/>*<sp/>2,<sp/>1);</highlight></codeline>
<codeline lineno="3823"><highlight class="normal"></highlight></codeline>
<codeline lineno="3824"><highlight class="normal"></highlight></codeline>
<codeline lineno="3825"><highlight class="normal"></highlight></codeline>
<codeline lineno="3826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>CUDA<sp/>events<sp/>that<sp/>we&apos;ll<sp/>use<sp/>for<sp/>timing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3827"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEvent_t<sp/>startA,<sp/>startB,<sp/>startC,<sp/>startG,<sp/>startGnew;</highlight></codeline>
<codeline lineno="3828"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEvent_t<sp/>stopA,<sp/>stopB,<sp/>stopC,<sp/>stopG,<sp/>stopGnew;</highlight></codeline>
<codeline lineno="3829"><highlight class="normal"></highlight></codeline>
<codeline lineno="3830"><highlight class="normal"><sp/><sp/><sp/><sp/>fillHalo(XParam,<sp/>XModel.blocks,<sp/>XModel.evolv,<sp/>XModel.zb);</highlight></codeline>
<codeline lineno="3831"><highlight class="normal"></highlight></codeline>
<codeline lineno="3832"><highlight class="normal"><sp/><sp/><sp/><sp/>std::thread<sp/>t0(&amp;gradientC&lt;T&gt;,<sp/>XParam,<sp/>XModel.blocks,<sp/>XModel.zb,<sp/>XModel.grad.dzbdx,<sp/>XModel.grad.dzbdy);</highlight></codeline>
<codeline lineno="3833"><highlight class="normal"><sp/><sp/><sp/><sp/>t0.join();</highlight></codeline>
<codeline lineno="3834"><highlight class="normal"></highlight></codeline>
<codeline lineno="3835"><highlight class="normal"></highlight></codeline>
<codeline lineno="3836"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structLoop" kindref="compound">Loop&lt;T&gt;</ref><sp/>XLoop;</highlight></codeline>
<codeline lineno="3837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>GPU<sp/>stuff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3838"><highlight class="normal"></highlight></codeline>
<codeline lineno="3839"><highlight class="normal"></highlight></codeline>
<codeline lineno="3840"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop.hugenegval<sp/>=<sp/>std::numeric_limits&lt;T&gt;::min();</highlight></codeline>
<codeline lineno="3841"><highlight class="normal"></highlight></codeline>
<codeline lineno="3842"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop.hugeposval<sp/>=<sp/>std::numeric_limits&lt;T&gt;::max();</highlight></codeline>
<codeline lineno="3843"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop.epsilon<sp/>=<sp/>std::numeric_limits&lt;T&gt;::epsilon();</highlight></codeline>
<codeline lineno="3844"><highlight class="normal"></highlight></codeline>
<codeline lineno="3845"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop.totaltime<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="3846"><highlight class="normal"></highlight></codeline>
<codeline lineno="3847"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop.nextoutputtime<sp/>=<sp/>3600.0;</highlight></codeline>
<codeline lineno="3848"><highlight class="normal"></highlight></codeline>
<codeline lineno="3849"><highlight class="normal"></highlight></codeline>
<codeline lineno="3850"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventCreate(&amp;startA);</highlight></codeline>
<codeline lineno="3851"><highlight class="normal"></highlight></codeline>
<codeline lineno="3852"><highlight class="normal"></highlight></codeline>
<codeline lineno="3853"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventCreate(&amp;stopA);</highlight></codeline>
<codeline lineno="3854"><highlight class="normal"></highlight></codeline>
<codeline lineno="3855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Record<sp/>the<sp/>start<sp/>event</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3856"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventRecord(startA,<sp/>NULL);</highlight></codeline>
<codeline lineno="3857"><highlight class="normal"><sp/><sp/><sp/><sp/>gradient<sp/>&lt;&lt;&lt;<sp/>gridDim,<sp/>blockDim,<sp/>0<sp/>&gt;&gt;&gt;<sp/>(XParam.halowidth,<sp/>XModel_g.blocks.active,<sp/>XModel_g.blocks.level,<sp/>(T)XParam.theta,<sp/>(T)XParam.delta,<sp/>XModel_g.zb,<sp/>XModel_g.grad.dzbdx,<sp/>XModel_g.grad.dzbdy);</highlight></codeline>
<codeline lineno="3858"><highlight class="normal"><sp/><sp/><sp/><sp/>CUDA_CHECK(cudaDeviceSynchronize());</highlight></codeline>
<codeline lineno="3859"><highlight class="normal"></highlight></codeline>
<codeline lineno="3860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Record<sp/>the<sp/>stop<sp/>event</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3861"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventRecord(stopA,<sp/>NULL);</highlight></codeline>
<codeline lineno="3862"><highlight class="normal"></highlight></codeline>
<codeline lineno="3863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>the<sp/>stop<sp/>event<sp/>to<sp/>complete</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3864"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventSynchronize(stopA);</highlight></codeline>
<codeline lineno="3865"><highlight class="normal"></highlight></codeline>
<codeline lineno="3866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>msecTotalGrad<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="3867"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventElapsedTime(&amp;msecTotalGrad,<sp/>startA,<sp/>stopA);</highlight></codeline>
<codeline lineno="3868"><highlight class="normal"></highlight></codeline>
<codeline lineno="3869"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventDestroy(startA);</highlight></codeline>
<codeline lineno="3870"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventDestroy(stopA);</highlight></codeline>
<codeline lineno="3871"><highlight class="normal"></highlight></codeline>
<codeline lineno="3872"><highlight class="normal"></highlight></codeline>
<codeline lineno="3873"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventCreate(&amp;startB);</highlight></codeline>
<codeline lineno="3874"><highlight class="normal"></highlight></codeline>
<codeline lineno="3875"><highlight class="normal"></highlight></codeline>
<codeline lineno="3876"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventCreate(&amp;stopB);</highlight></codeline>
<codeline lineno="3877"><highlight class="normal"></highlight></codeline>
<codeline lineno="3878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Record<sp/>the<sp/>start<sp/>event</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3879"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventRecord(startB,<sp/>NULL);</highlight></codeline>
<codeline lineno="3880"><highlight class="normal"><sp/><sp/><sp/><sp/>gradientSM<sp/>&lt;&lt;&lt;<sp/>gridDim,<sp/>blockDim<sp/>&gt;&gt;&gt;<sp/>(XParam.halowidth,<sp/>XModel_g.blocks.active,<sp/>XModel_g.blocks.level,<sp/>(T)XParam.theta,<sp/>(T)XParam.delta,<sp/>XModel_g.zb,<sp/>XModel_g.grad.dzsdx,<sp/>XModel_g.grad.dzsdy);</highlight></codeline>
<codeline lineno="3881"><highlight class="normal"><sp/><sp/><sp/><sp/>CUDA_CHECK(cudaDeviceSynchronize());</highlight></codeline>
<codeline lineno="3882"><highlight class="normal"></highlight></codeline>
<codeline lineno="3883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Record<sp/>the<sp/>stop<sp/>event</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3884"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventRecord(stopB,<sp/>NULL);</highlight></codeline>
<codeline lineno="3885"><highlight class="normal"></highlight></codeline>
<codeline lineno="3886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>the<sp/>stop<sp/>event<sp/>to<sp/>complete</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3887"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventSynchronize(stopB);</highlight></codeline>
<codeline lineno="3888"><highlight class="normal"></highlight></codeline>
<codeline lineno="3889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>msecTotalSM<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="3890"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventElapsedTime(&amp;msecTotalSM,<sp/>startB,<sp/>stopB);</highlight></codeline>
<codeline lineno="3891"><highlight class="normal"></highlight></codeline>
<codeline lineno="3892"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventDestroy(startB);</highlight></codeline>
<codeline lineno="3893"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventDestroy(stopB);</highlight></codeline>
<codeline lineno="3894"><highlight class="normal"></highlight></codeline>
<codeline lineno="3895"><highlight class="normal"></highlight></codeline>
<codeline lineno="3896"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventCreate(&amp;startC);</highlight></codeline>
<codeline lineno="3897"><highlight class="normal"></highlight></codeline>
<codeline lineno="3898"><highlight class="normal"></highlight></codeline>
<codeline lineno="3899"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventCreate(&amp;stopC);</highlight></codeline>
<codeline lineno="3900"><highlight class="normal"></highlight></codeline>
<codeline lineno="3901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Record<sp/>the<sp/>start<sp/>event</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3902"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventRecord(startC,<sp/>NULL);</highlight></codeline>
<codeline lineno="3903"><highlight class="normal"><sp/><sp/><sp/><sp/>gradientSMC<sp/>&lt;&lt;&lt;<sp/>gridDim,<sp/>blockDim<sp/>&gt;&gt;&gt;<sp/>(XParam.halowidth,<sp/>XModel_g.blocks.active,<sp/>XModel_g.blocks.level,<sp/>(T)XParam.theta,<sp/>(T)XParam.delta,<sp/>XModel_g.zb,<sp/>XModel_g.grad.dhdx,<sp/>XModel_g.grad.dhdy);</highlight></codeline>
<codeline lineno="3904"><highlight class="normal"><sp/><sp/><sp/><sp/>CUDA_CHECK(cudaDeviceSynchronize());</highlight></codeline>
<codeline lineno="3905"><highlight class="normal"></highlight></codeline>
<codeline lineno="3906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Record<sp/>the<sp/>stop<sp/>event</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3907"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventRecord(stopC,<sp/>NULL);</highlight></codeline>
<codeline lineno="3908"><highlight class="normal"></highlight></codeline>
<codeline lineno="3909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>the<sp/>stop<sp/>event<sp/>to<sp/>complete</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3910"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventSynchronize(stopC);</highlight></codeline>
<codeline lineno="3911"><highlight class="normal"></highlight></codeline>
<codeline lineno="3912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>msecTotalSMB<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="3913"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventElapsedTime(&amp;msecTotalSMB,<sp/>startC,<sp/>stopC);</highlight></codeline>
<codeline lineno="3914"><highlight class="normal"></highlight></codeline>
<codeline lineno="3915"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventDestroy(startC);</highlight></codeline>
<codeline lineno="3916"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventDestroy(stopC);</highlight></codeline>
<codeline lineno="3917"><highlight class="normal"></highlight></codeline>
<codeline lineno="3918"><highlight class="normal"></highlight></codeline>
<codeline lineno="3919"><highlight class="normal"></highlight></codeline>
<codeline lineno="3920"><highlight class="normal"></highlight></codeline>
<codeline lineno="3921"><highlight class="normal"><sp/><sp/><sp/><sp/>CopyGPUtoCPU(XParam.nblkmem,<sp/>XParam.blksize,<sp/>XModel.grad.dudx,<sp/>XModel_g.grad.dzbdx);</highlight></codeline>
<codeline lineno="3922"><highlight class="normal"><sp/><sp/><sp/><sp/>CopyGPUtoCPU(XParam.nblkmem,<sp/>XParam.blksize,<sp/>XModel.grad.dudy,<sp/>XModel_g.grad.dzbdy);</highlight></codeline>
<codeline lineno="3923"><highlight class="normal"></highlight></codeline>
<codeline lineno="3924"><highlight class="normal"><sp/><sp/><sp/><sp/>CopyGPUtoCPU(XParam.nblkmem,<sp/>XParam.blksize,<sp/>XModel.grad.dzsdx,<sp/>XModel_g.grad.dzsdx);</highlight></codeline>
<codeline lineno="3925"><highlight class="normal"><sp/><sp/><sp/><sp/>CopyGPUtoCPU(XParam.nblkmem,<sp/>XParam.blksize,<sp/>XModel.grad.dzsdy,<sp/>XModel_g.grad.dzsdy);</highlight></codeline>
<codeline lineno="3926"><highlight class="normal"></highlight></codeline>
<codeline lineno="3927"><highlight class="normal"><sp/><sp/><sp/><sp/>CopyGPUtoCPU(XParam.nblkmem,<sp/>XParam.blksize,<sp/>XModel.grad.dhdx,<sp/>XModel_g.grad.dhdx);</highlight></codeline>
<codeline lineno="3928"><highlight class="normal"><sp/><sp/><sp/><sp/>CopyGPUtoCPU(XParam.nblkmem,<sp/>XParam.blksize,<sp/>XModel.grad.dhdy,<sp/>XModel_g.grad.dhdy);</highlight></codeline>
<codeline lineno="3929"><highlight class="normal"></highlight></codeline>
<codeline lineno="3930"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Runtime<sp/>:<sp/>normal=%f,<sp/>shared<sp/>mem=%f,<sp/>SharedmemB=%f<sp/>in<sp/>msec\n&quot;</highlight><highlight class="normal">,<sp/>msecTotalGrad,<sp/>msecTotalSM,<sp/>msecTotalSMB);</highlight></codeline>
<codeline lineno="3931"><highlight class="normal"></highlight></codeline>
<codeline lineno="3932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3933"><highlight class="comment"><sp/><sp/><sp/><sp/>creatncfileBUQ(XParam,<sp/>XModel.blocks);</highlight></codeline>
<codeline lineno="3934"><highlight class="comment"></highlight></codeline>
<codeline lineno="3935"><highlight class="comment"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>varlist<sp/>=<sp/>{<sp/>&quot;zb&quot;,<sp/>&quot;dzbdx&quot;,<sp/>&quot;dzbdy&quot;<sp/>};</highlight></codeline>
<codeline lineno="3936"><highlight class="comment"></highlight></codeline>
<codeline lineno="3937"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>ivar<sp/>=<sp/>0;<sp/>ivar<sp/>&lt;<sp/>varlist.size();<sp/>ivar++)</highlight></codeline>
<codeline lineno="3938"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3939"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defncvarBUQ(XParam,<sp/>XModel.blocks.active,<sp/>XModel.blocks.level,<sp/>XModel.blocks.xo,<sp/>XModel.blocks.yo,<sp/>varlist[ivar],<sp/>3,<sp/>XModel.OutputVarMap[varlist[ivar]],<sp/>XModel.blocks.outZone[0]);</highlight></codeline>
<codeline lineno="3940"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3941"><highlight class="comment"></highlight></codeline>
<codeline lineno="3942"><highlight class="comment"><sp/><sp/><sp/><sp/>diffArray(XParam,<sp/>XLoop,<sp/>XModel.blocks,<sp/>&quot;SMdx&quot;,<sp/>false,<sp/>XModel.grad.dzbdx,<sp/>XModel_g.grad.dzsdx,<sp/>XModel.time.arrmax,<sp/>XModel.grad.dzsdx);</highlight></codeline>
<codeline lineno="3943"><highlight class="comment"></highlight></codeline>
<codeline lineno="3944"><highlight class="comment"></highlight></codeline>
<codeline lineno="3945"><highlight class="comment"><sp/><sp/><sp/><sp/>diffArray(XParam,<sp/>XLoop,<sp/>XModel.blocks,<sp/>&quot;SMBdx&quot;,<sp/>false,<sp/>XModel.grad.dzbdx,<sp/>XModel_g.grad.dhdx,<sp/>XModel.time.arrmax,<sp/>XModel.grad.dhdx);</highlight></codeline>
<codeline lineno="3946"><highlight class="comment"></highlight></codeline>
<codeline lineno="3947"><highlight class="comment"><sp/><sp/><sp/><sp/>diffArray(XParam,<sp/>XLoop,<sp/>XModel.blocks,<sp/>&quot;SMBdy&quot;,<sp/>false,<sp/>XModel.grad.dzbdy,<sp/>XModel_g.grad.dhdy,<sp/>XModel.time.arrmax,<sp/>XModel.grad.dhdy);</highlight></codeline>
<codeline lineno="3948"><highlight class="comment"><sp/><sp/><sp/><sp/>diffArray(XParam,<sp/>XLoop,<sp/>XModel.blocks,<sp/>&quot;SMdy&quot;,<sp/>false,<sp/>XModel.grad.dzbdy,<sp/>XModel_g.grad.dzsdy,<sp/>XModel.time.arrmax,<sp/>XModel.grad.dzsdy);</highlight></codeline>
<codeline lineno="3949"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3950"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>maxdiffx,<sp/>maxdiffy;</highlight></codeline>
<codeline lineno="3951"><highlight class="normal"><sp/><sp/><sp/><sp/>maxdiffx<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="3952"><highlight class="normal"><sp/><sp/><sp/><sp/>maxdiffy<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="3953"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>maxdiffsmx,<sp/>maxdiffsmy;</highlight></codeline>
<codeline lineno="3954"><highlight class="normal"><sp/><sp/><sp/><sp/>maxdiffsmx<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="3955"><highlight class="normal"><sp/><sp/><sp/><sp/>maxdiffsmy<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="3956"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>maxdiffsmbx,<sp/>maxdiffsmby;</highlight></codeline>
<codeline lineno="3957"><highlight class="normal"><sp/><sp/><sp/><sp/>maxdiffsmbx<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="3958"><highlight class="normal"><sp/><sp/><sp/><sp/>maxdiffsmby<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="3959"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>diffsm,<sp/>diffsmb;</highlight></codeline>
<codeline lineno="3960"><highlight class="normal"></highlight></codeline>
<codeline lineno="3961"><highlight class="normal"></highlight></codeline>
<codeline lineno="3962"><highlight class="normal"></highlight></codeline>
<codeline lineno="3963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>0;<sp/>ibl<sp/>&lt;<sp/>XParam.nblk;<sp/>ibl++)</highlight></codeline>
<codeline lineno="3964"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>XModel.blocks.active[ibl];</highlight></codeline>
<codeline lineno="3966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy<sp/>=<sp/>0;<sp/>iy<sp/>&lt;<sp/>XParam.blkwidth;<sp/>iy++)</highlight></codeline>
<codeline lineno="3967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>0;<sp/>ix<sp/>&lt;<sp/>XParam.blkwidth;<sp/>ix++)</highlight></codeline>
<codeline lineno="3969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>memloc(XParam.halowidth,<sp/>XParam.blkmemwidth,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="3971"><highlight class="normal"></highlight></codeline>
<codeline lineno="3972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diffsm<sp/>=<sp/>abs(XModel.grad.dzbdx[i]<sp/>-<sp/>XModel.grad.dudx[i]);</highlight></codeline>
<codeline lineno="3973"><highlight class="normal"></highlight></codeline>
<codeline lineno="3974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxdiffx<sp/>=<sp/>max(maxdiffx,<sp/>diffsm);</highlight></codeline>
<codeline lineno="3975"><highlight class="normal"></highlight></codeline>
<codeline lineno="3976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diffsm<sp/>=<sp/>abs(XModel.grad.dzbdy[i]<sp/>-<sp/>XModel.grad.dudy[i]);</highlight></codeline>
<codeline lineno="3977"><highlight class="normal"></highlight></codeline>
<codeline lineno="3978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxdiffx<sp/>=<sp/>max(maxdiffx,<sp/>diffsm);</highlight></codeline>
<codeline lineno="3979"><highlight class="normal"></highlight></codeline>
<codeline lineno="3980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diffsm<sp/>=<sp/>abs(XModel.grad.dzbdx[i]<sp/>-<sp/>XModel.grad.dzsdx[i]);</highlight></codeline>
<codeline lineno="3981"><highlight class="normal"></highlight></codeline>
<codeline lineno="3982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxdiffsmx<sp/>=<sp/>max(maxdiffsmx,<sp/>diffsm);</highlight></codeline>
<codeline lineno="3983"><highlight class="normal"></highlight></codeline>
<codeline lineno="3984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diffsm<sp/>=<sp/>abs(XModel.grad.dzbdy[i]<sp/>-<sp/>XModel.grad.dzsdy[i]);</highlight></codeline>
<codeline lineno="3985"><highlight class="normal"></highlight></codeline>
<codeline lineno="3986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxdiffsmy<sp/>=<sp/>max(maxdiffsmy,<sp/>diffsm);</highlight></codeline>
<codeline lineno="3987"><highlight class="normal"></highlight></codeline>
<codeline lineno="3988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diffsm<sp/>=<sp/>abs(XModel.grad.dzbdx[i]<sp/>-<sp/>XModel.grad.dhdx[i]);</highlight></codeline>
<codeline lineno="3989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxdiffsmbx<sp/>=<sp/>max(maxdiffsmbx,<sp/>diffsm);</highlight></codeline>
<codeline lineno="3990"><highlight class="normal"></highlight></codeline>
<codeline lineno="3991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diffsm<sp/>=<sp/>abs(XModel.grad.dzbdy[i]<sp/>-<sp/>XModel.grad.dhdy[i]);</highlight></codeline>
<codeline lineno="3992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxdiffsmby<sp/>=<sp/>max(maxdiffsmby,<sp/>diffsm);</highlight></codeline>
<codeline lineno="3993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3996"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3997"><highlight class="normal"></highlight></codeline>
<codeline lineno="3998"><highlight class="normal"></highlight></codeline>
<codeline lineno="3999"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;max<sp/>error<sp/>:<sp/>normx=%e,<sp/>normy=%e,<sp/>smx=%e,<sp/>smy=%e,<sp/><sp/>smbx=%e,<sp/>smby=%e<sp/>in<sp/>m\n&quot;</highlight><highlight class="normal">,<sp/>maxdiffx,<sp/>maxdiffy,<sp/>maxdiffsmx,<sp/>maxdiffsmy,<sp/>maxdiffsmbx,<sp/>maxdiffsmby);</highlight></codeline>
<codeline lineno="4000"><highlight class="normal"></highlight></codeline>
<codeline lineno="4001"><highlight class="normal"></highlight></codeline>
<codeline lineno="4002"><highlight class="normal"><sp/><sp/><sp/><sp/>gradientCPU(XParam,<sp/>XModel.blocks,<sp/>XModel.evolv,<sp/>XModel.grad,<sp/>XModel.zb);</highlight></codeline>
<codeline lineno="4003"><highlight class="normal"></highlight></codeline>
<codeline lineno="4004"><highlight class="normal"></highlight></codeline>
<codeline lineno="4005"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventCreate(&amp;startG);</highlight></codeline>
<codeline lineno="4006"><highlight class="normal"></highlight></codeline>
<codeline lineno="4007"><highlight class="normal"></highlight></codeline>
<codeline lineno="4008"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventCreate(&amp;stopG);</highlight></codeline>
<codeline lineno="4009"><highlight class="normal"></highlight></codeline>
<codeline lineno="4010"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventRecord(startG,<sp/>NULL);</highlight></codeline>
<codeline lineno="4011"><highlight class="normal"><sp/><sp/><sp/><sp/>gradientGPU(XParam,<sp/>XModel_g.blocks,<sp/>XModel_g.evolv,<sp/>XModel_g.grad,<sp/>XModel_g.zb);</highlight></codeline>
<codeline lineno="4012"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventRecord(stopG,<sp/>NULL);</highlight></codeline>
<codeline lineno="4013"><highlight class="normal"></highlight></codeline>
<codeline lineno="4014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>the<sp/>stop<sp/>event<sp/>to<sp/>complete</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4015"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventSynchronize(stopG);</highlight></codeline>
<codeline lineno="4016"><highlight class="normal"></highlight></codeline>
<codeline lineno="4017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>msecTotalG<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="4018"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventElapsedTime(&amp;msecTotalG,<sp/>startG,<sp/>stopG);</highlight></codeline>
<codeline lineno="4019"><highlight class="normal"></highlight></codeline>
<codeline lineno="4020"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventDestroy(startG);</highlight></codeline>
<codeline lineno="4021"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventDestroy(stopG);</highlight></codeline>
<codeline lineno="4022"><highlight class="normal"></highlight></codeline>
<codeline lineno="4023"><highlight class="normal"><sp/><sp/><sp/><sp/>CompareCPUvsGPU(XParam,<sp/>XModel,<sp/>XModel_g,<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;dhdx&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;dhdy&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dzsdx&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;dzsdy&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;dudx&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;dudy&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;dvdx&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;dvdy&quot;</highlight><highlight class="normal"><sp/>},<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4024"><highlight class="normal"></highlight></codeline>
<codeline lineno="4025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//CopyGPUtoCPU(XParam.nblkmem,<sp/>XParam.blksize,<sp/>XModel.grad.dzbdx,<sp/>XModel_g.grad.dzbdx);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//CopyGPUtoCPU(XParam.nblkmem,<sp/>XParam.blksize,<sp/>XModel.grad.dzbdy,<sp/>XModel_g.grad.dzbdy);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4027"><highlight class="normal"></highlight></codeline>
<codeline lineno="4028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//CopyGPUtoCPU(XParam.nblkmem,<sp/>XParam.blksize,<sp/>XModel.grad.dzsdx,<sp/>XModel_g.grad.dzsdx);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//CopyGPUtoCPU(XParam.nblkmem,<sp/>XParam.blksize,<sp/>XModel.grad.dzsdy,<sp/>XModel_g.grad.dzsdy);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4030"><highlight class="normal"></highlight></codeline>
<codeline lineno="4031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//CopyGPUtoCPU(XParam.nblkmem,<sp/>XParam.blksize,<sp/>XModel.grad.dhdx,<sp/>XModel_g.grad.dhdx);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//CopyGPUtoCPU(XParam.nblkmem,<sp/>XParam.blksize,<sp/>XModel.grad.dhdy,<sp/>XModel_g.grad.dhdy);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4033"><highlight class="normal"></highlight></codeline>
<codeline lineno="4034"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventCreate(&amp;startGnew);</highlight></codeline>
<codeline lineno="4035"><highlight class="normal"></highlight></codeline>
<codeline lineno="4036"><highlight class="normal"></highlight></codeline>
<codeline lineno="4037"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventCreate(&amp;stopGnew);</highlight></codeline>
<codeline lineno="4038"><highlight class="normal"></highlight></codeline>
<codeline lineno="4039"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventRecord(startGnew,<sp/>NULL);</highlight></codeline>
<codeline lineno="4040"><highlight class="normal"><sp/><sp/><sp/><sp/>gradientGPUnew(XParam,<sp/>XModel_g.blocks,<sp/>XModel_g.evolv,<sp/>XModel_g.grad,<sp/>XModel_g.zb);</highlight></codeline>
<codeline lineno="4041"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventRecord(stopGnew,<sp/>NULL);</highlight></codeline>
<codeline lineno="4042"><highlight class="normal"></highlight></codeline>
<codeline lineno="4043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>the<sp/>stop<sp/>event<sp/>to<sp/>complete</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4044"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventSynchronize(stopGnew);</highlight></codeline>
<codeline lineno="4045"><highlight class="normal"></highlight></codeline>
<codeline lineno="4046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>msecTotalGnew<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="4047"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventElapsedTime(&amp;msecTotalGnew,<sp/>startGnew,<sp/>stopGnew);</highlight></codeline>
<codeline lineno="4048"><highlight class="normal"></highlight></codeline>
<codeline lineno="4049"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventDestroy(startGnew);</highlight></codeline>
<codeline lineno="4050"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaEventDestroy(stopGnew);</highlight></codeline>
<codeline lineno="4051"><highlight class="normal"></highlight></codeline>
<codeline lineno="4052"><highlight class="normal"><sp/><sp/><sp/><sp/>CompareCPUvsGPU(XParam,<sp/>XModel,<sp/>XModel_g,<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;dhdx&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;dhdy&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dzsdx&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;dzsdy&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;dudx&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;dudy&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;dvdx&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;dvdy&quot;</highlight><highlight class="normal"><sp/>},<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4053"><highlight class="normal"></highlight></codeline>
<codeline lineno="4054"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Runtime<sp/>:<sp/>old<sp/>gradient=%f,<sp/>new<sp/>Gradient=%f<sp/>in<sp/>msec\n&quot;</highlight><highlight class="normal">,<sp/>msecTotalG,<sp/>msecTotalGnew);</highlight></codeline>
<codeline lineno="4055"><highlight class="normal"></highlight></codeline>
<codeline lineno="4056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fastest;</highlight></codeline>
<codeline lineno="4057"><highlight class="normal"></highlight></codeline>
<codeline lineno="4058"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4059"><highlight class="normal"></highlight></codeline>
<codeline lineno="4065"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TestHaloSpeed(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref><sp/>XModel,<sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref><sp/>XModel_g)</highlight></codeline>
<codeline lineno="4066"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4067"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structForcing" kindref="compound">Forcing&lt;float&gt;</ref><sp/>XForcing;</highlight></codeline>
<codeline lineno="4068"><highlight class="normal"></highlight></codeline>
<codeline lineno="4069"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing<sp/>=<sp/>MakValleyBathy(XParam,<sp/>T(0.4),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4070"><highlight class="normal"></highlight></codeline>
<codeline lineno="4071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>maxtopo<sp/>=<sp/>std::numeric_limits&lt;float&gt;::min();</highlight></codeline>
<codeline lineno="4072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mintopo<sp/>=<sp/>std::numeric_limits&lt;float&gt;::max();</highlight></codeline>
<codeline lineno="4073"><highlight class="normal"></highlight></codeline>
<codeline lineno="4074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>XForcing.Bathy[0].ny;<sp/>j++)</highlight></codeline>
<codeline lineno="4075"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>XForcing.Bathy[0].nx;<sp/>i++)</highlight></codeline>
<codeline lineno="4077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxtopo<sp/>=<sp/>max(XForcing.Bathy[0].val[i<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].nx],<sp/>maxtopo);</highlight></codeline>
<codeline lineno="4079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mintopo<sp/>=<sp/>min(XForcing.Bathy[0].val[i<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].nx],<sp/>mintopo);</highlight></codeline>
<codeline lineno="4080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4081"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4082"><highlight class="normal"></highlight></codeline>
<codeline lineno="4083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Overrule<sp/>whatever<sp/>may<sp/>be<sp/>set<sp/>in<sp/>the<sp/>param<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4084"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.xmax<sp/>=<sp/>XForcing.Bathy[0].xmax;</highlight></codeline>
<codeline lineno="4085"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.ymax<sp/>=<sp/>XForcing.Bathy[0].ymax;</highlight></codeline>
<codeline lineno="4086"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.xo<sp/>=<sp/>XForcing.Bathy[0].xo;</highlight></codeline>
<codeline lineno="4087"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.yo<sp/>=<sp/>XForcing.Bathy[0].yo;</highlight></codeline>
<codeline lineno="4088"><highlight class="normal"></highlight></codeline>
<codeline lineno="4089"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.dx<sp/>=<sp/>XForcing.Bathy[0].dx;</highlight></codeline>
<codeline lineno="4090"><highlight class="normal"></highlight></codeline>
<codeline lineno="4091"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.zsinit<sp/>=<sp/>mintopo<sp/>+<sp/>0.5;</highlight><highlight class="comment">//<sp/>Had<sp/>a<sp/>small<sp/>amount<sp/>of<sp/>water<sp/>to<sp/>avoid<sp/>a<sp/>huge<sp/>first<sp/>step<sp/>that<sp/>would<sp/>surely<sp/>break<sp/>the<sp/>setup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4092"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.endtime<sp/>=<sp/>20.0;</highlight></codeline>
<codeline lineno="4093"><highlight class="normal"></highlight></codeline>
<codeline lineno="4094"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.outputtimestep<sp/>=<sp/>XParam.endtime;</highlight></codeline>
<codeline lineno="4095"><highlight class="normal"></highlight></codeline>
<codeline lineno="4096"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.minlevel<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4097"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.maxlevel<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4098"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.initlevel<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4099"><highlight class="normal"></highlight></codeline>
<codeline lineno="4100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//coarse<sp/>to<sp/>fine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Change<sp/>arg<sp/>1<sp/>and<sp/>2<sp/>if<sp/>the<sp/>slope<sp/>is<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4102"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.AdaptCrit<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Inrange&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4103"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.Adapt_arg1<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;0.0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4104"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.Adapt_arg2<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;2.0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4105"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.Adapt_arg3<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;zb&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4106"><highlight class="normal"></highlight></codeline>
<codeline lineno="4107"><highlight class="normal"><sp/><sp/><sp/><sp/>checkparamsanity(XParam,<sp/>XForcing);</highlight></codeline>
<codeline lineno="4108"><highlight class="normal"></highlight></codeline>
<codeline lineno="4109"><highlight class="normal"><sp/><sp/><sp/><sp/>InitMesh(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="4110"><highlight class="normal"></highlight></codeline>
<codeline lineno="4111"><highlight class="normal"><sp/><sp/><sp/><sp/>InitialConditions(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="4112"><highlight class="normal"></highlight></codeline>
<codeline lineno="4113"><highlight class="normal"><sp/><sp/><sp/><sp/>InitialAdaptation(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="4114"><highlight class="normal"></highlight></codeline>
<codeline lineno="4115"><highlight class="normal"><sp/><sp/><sp/><sp/>SetupGPU(XParam,<sp/>XModel,<sp/>XForcing,<sp/>XModel_g);</highlight></codeline>
<codeline lineno="4116"><highlight class="normal"></highlight></codeline>
<codeline lineno="4117"><highlight class="normal"></highlight></codeline>
<codeline lineno="4118"><highlight class="normal"></highlight></codeline>
<codeline lineno="4119"><highlight class="normal"></highlight></codeline>
<codeline lineno="4120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>zs<sp/>from<sp/>CPU<sp/>to<sp/>GPU<sp/>...<sp/>again</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4121"><highlight class="normal"><sp/><sp/><sp/><sp/>CopytoGPU(XParam.nblkmem,<sp/>XParam.blksize,<sp/>XModel.evolv.zs,<sp/>XModel_g.evolv_o.zs);</highlight></codeline>
<codeline lineno="4122"><highlight class="normal"><sp/><sp/><sp/><sp/>CopytoGPU(XParam.nblkmem,<sp/>XParam.blksize,<sp/>XModel.evolv.zs,<sp/>XModel_g.evolv.zs);</highlight></codeline>
<codeline lineno="4123"><highlight class="normal"></highlight></codeline>
<codeline lineno="4124"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaStream_t<sp/>streams[2];</highlight></codeline>
<codeline lineno="4125"><highlight class="normal"><sp/><sp/><sp/><sp/>CUDA_CHECK(cudaStreamCreate(&amp;streams[0]));</highlight></codeline>
<codeline lineno="4126"><highlight class="normal"><sp/><sp/><sp/><sp/>CUDA_CHECK(cudaStreamCreate(&amp;streams[1]));</highlight></codeline>
<codeline lineno="4127"><highlight class="normal"></highlight></codeline>
<codeline lineno="4128"><highlight class="normal"></highlight></codeline>
<codeline lineno="4129"><highlight class="normal"><sp/><sp/><sp/><sp/>fillHaloC(XParam,<sp/>XModel.blocks,<sp/>XModel.evolv.zs);</highlight></codeline>
<codeline lineno="4130"><highlight class="normal"><sp/><sp/><sp/><sp/>fillHaloGPU(XParam,<sp/>XModel_g.blocks,<sp/>streams[0],<sp/>XModel_g.evolv.zs);</highlight></codeline>
<codeline lineno="4131"><highlight class="normal"><sp/><sp/><sp/><sp/>fillHaloGPUnew(XParam,<sp/>XModel_g.blocks,<sp/>streams[1],<sp/>XModel_g.evolv_o.zs);</highlight></codeline>
<codeline lineno="4132"><highlight class="normal"></highlight></codeline>
<codeline lineno="4133"><highlight class="normal"><sp/><sp/><sp/><sp/>CUDA_CHECK(cudaDeviceSynchronize());</highlight></codeline>
<codeline lineno="4134"><highlight class="normal"></highlight></codeline>
<codeline lineno="4135"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaStreamDestroy(streams[0]);</highlight></codeline>
<codeline lineno="4136"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaStreamDestroy(streams[1]);</highlight></codeline>
<codeline lineno="4137"><highlight class="normal"></highlight></codeline>
<codeline lineno="4138"><highlight class="normal"></highlight></codeline>
<codeline lineno="4139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//CopyGPUtoCPU(XParam.nblkmem,<sp/>XParam.blksize,<sp/>XModel.evolv.u,<sp/>XModel_g.evolv.zs);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//CopyGPUtoCPU(XParam.nblkmem,<sp/>XParam.blksize,<sp/>XModel.evolv.v,<sp/>XModel_g.evolvo.zs);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4141"><highlight class="normal"></highlight></codeline>
<codeline lineno="4142"><highlight class="normal"><sp/><sp/><sp/><sp/>diffArray(XParam,<sp/>XModel.blocks,<sp/></highlight><highlight class="stringliteral">&quot;GPU_old&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>XModel.evolv.zs,<sp/>XModel_g.evolv.zs,<sp/>XModel.evolv.u,<sp/>XModel.evolv_o.u);</highlight></codeline>
<codeline lineno="4143"><highlight class="normal"><sp/><sp/><sp/><sp/>diffArray(XParam,<sp/>XModel.blocks,<sp/></highlight><highlight class="stringliteral">&quot;GPU_new&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>XModel.evolv.zs,<sp/>XModel_g.evolv_o.zs,<sp/>XModel.evolv.v,<sp/>XModel.evolv_o.v);</highlight></codeline>
<codeline lineno="4144"><highlight class="normal"></highlight></codeline>
<codeline lineno="4145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4147"><highlight class="normal"></highlight></codeline>
<codeline lineno="4148"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TestInstability(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref><sp/>XModel,<sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref><sp/>XModel_g)</highlight></codeline>
<codeline lineno="4149"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4150"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structForcing" kindref="compound">Forcing&lt;float&gt;</ref><sp/>XForcing;</highlight></codeline>
<codeline lineno="4151"><highlight class="normal"></highlight></codeline>
<codeline lineno="4152"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing<sp/>=<sp/>MakValleyBathy(XParam,<sp/>T(0.4),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4153"><highlight class="normal"></highlight></codeline>
<codeline lineno="4154"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.conserveElevation<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4155"><highlight class="normal"></highlight></codeline>
<codeline lineno="4156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>maxtopo<sp/>=<sp/>std::numeric_limits&lt;float&gt;::min();</highlight></codeline>
<codeline lineno="4157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mintopo<sp/>=<sp/>std::numeric_limits&lt;float&gt;::max();</highlight></codeline>
<codeline lineno="4158"><highlight class="normal"></highlight></codeline>
<codeline lineno="4159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>XForcing.Bathy[0].ny;<sp/>j++)</highlight></codeline>
<codeline lineno="4160"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>XForcing.Bathy[0].nx;<sp/>i++)</highlight></codeline>
<codeline lineno="4162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxtopo<sp/>=<sp/>max(XForcing.Bathy[0].val[i<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].nx],<sp/>maxtopo);</highlight></codeline>
<codeline lineno="4164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mintopo<sp/>=<sp/>min(XForcing.Bathy[0].val[i<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].nx],<sp/>mintopo);</highlight></codeline>
<codeline lineno="4165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4167"><highlight class="normal"></highlight></codeline>
<codeline lineno="4168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Overrule<sp/>whatever<sp/>may<sp/>be<sp/>set<sp/>in<sp/>the<sp/>param<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4169"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.xmax<sp/>=<sp/>XForcing.Bathy[0].xmax;</highlight></codeline>
<codeline lineno="4170"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.ymax<sp/>=<sp/>XForcing.Bathy[0].ymax;</highlight></codeline>
<codeline lineno="4171"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.xo<sp/>=<sp/>XForcing.Bathy[0].xo;</highlight></codeline>
<codeline lineno="4172"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.yo<sp/>=<sp/>XForcing.Bathy[0].yo;</highlight></codeline>
<codeline lineno="4173"><highlight class="normal"></highlight></codeline>
<codeline lineno="4174"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.dx<sp/>=<sp/>XForcing.Bathy[0].dx;</highlight></codeline>
<codeline lineno="4175"><highlight class="normal"></highlight></codeline>
<codeline lineno="4176"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.zsinit<sp/>=<sp/>mintopo<sp/>+<sp/>6.9;</highlight><highlight class="comment">//<sp/>Had<sp/>a<sp/>water<sp/>level<sp/>so<sp/>that<sp/>the<sp/>wet<sp/>and<sp/>dry<sp/>affects<sp/>the<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4177"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.endtime<sp/>=<sp/>20.0;</highlight></codeline>
<codeline lineno="4178"><highlight class="normal"></highlight></codeline>
<codeline lineno="4179"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.outputtimestep<sp/>=<sp/>XParam.endtime;</highlight></codeline>
<codeline lineno="4180"><highlight class="normal"></highlight></codeline>
<codeline lineno="4181"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.minlevel<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4182"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.maxlevel<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="4183"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.initlevel<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4184"><highlight class="normal"></highlight></codeline>
<codeline lineno="4185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>coarse<sp/>to<sp/>fine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Change<sp/>arg<sp/>1<sp/>and<sp/>2<sp/>if<sp/>the<sp/>slope<sp/>is<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4187"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.AdaptCrit<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Targetlevel&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4188"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.Adapt_arg1<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4189"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.Adapt_arg2<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4190"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.Adapt_arg3<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4191"><highlight class="normal"></highlight></codeline>
<codeline lineno="4192"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structStaticForcingP" kindref="compound">StaticForcingP&lt;int&gt;</ref><sp/>targetlevel;</highlight></codeline>
<codeline lineno="4193"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.targetadapt.push_back(targetlevel);</highlight></codeline>
<codeline lineno="4194"><highlight class="normal"></highlight></codeline>
<codeline lineno="4195"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.targetadapt[0].xo<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="4196"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.targetadapt[0].yo<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="4197"><highlight class="normal"></highlight></codeline>
<codeline lineno="4198"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.targetadapt[0].xmax<sp/>=<sp/>31.0;</highlight></codeline>
<codeline lineno="4199"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.targetadapt[0].ymax<sp/>=<sp/>31.0;</highlight></codeline>
<codeline lineno="4200"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.targetadapt[0].nx<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="4201"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.targetadapt[0].ny<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="4202"><highlight class="normal"></highlight></codeline>
<codeline lineno="4203"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.targetadapt[0].dx<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="4204"><highlight class="normal"></highlight></codeline>
<codeline lineno="4205"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(XForcing.Bathy[0].nx,<sp/>XForcing.Bathy[0].ny,<sp/>XForcing.targetadapt[0].val);</highlight></codeline>
<codeline lineno="4206"><highlight class="normal"></highlight></codeline>
<codeline lineno="4207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>XForcing.Bathy[0].ny;<sp/>j++)</highlight></codeline>
<codeline lineno="4208"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>XForcing.Bathy[0].nx;<sp/>i++)</highlight></codeline>
<codeline lineno="4210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.targetadapt[0].val[i<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].nx]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4214"><highlight class="normal"></highlight></codeline>
<codeline lineno="4215"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.targetadapt[0].val[12<sp/>+<sp/>12<sp/>*<sp/>XForcing.Bathy[0].nx]<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="4216"><highlight class="normal"></highlight></codeline>
<codeline lineno="4217"><highlight class="normal"></highlight></codeline>
<codeline lineno="4218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>Model(s)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4219"><highlight class="normal"></highlight></codeline>
<codeline lineno="4220"><highlight class="normal"><sp/><sp/><sp/><sp/>checkparamsanity(XParam,<sp/>XForcing);</highlight></codeline>
<codeline lineno="4221"><highlight class="normal"></highlight></codeline>
<codeline lineno="4222"><highlight class="normal"><sp/><sp/><sp/><sp/>InitMesh(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="4223"><highlight class="normal"></highlight></codeline>
<codeline lineno="4224"><highlight class="normal"><sp/><sp/><sp/><sp/>InitialConditions(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="4225"><highlight class="normal"></highlight></codeline>
<codeline lineno="4226"><highlight class="normal"><sp/><sp/><sp/><sp/>InitialAdaptation(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="4227"><highlight class="normal"></highlight></codeline>
<codeline lineno="4228"><highlight class="normal"><sp/><sp/><sp/><sp/>SetupGPU(XParam,<sp/>XModel,<sp/>XForcing,<sp/>XModel_g);</highlight></codeline>
<codeline lineno="4229"><highlight class="normal"></highlight></codeline>
<codeline lineno="4230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Run<sp/>first<sp/>full<sp/>step<sp/>(i.e.<sp/>2<sp/>half<sp/>steps)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4231"><highlight class="normal"></highlight></codeline>
<codeline lineno="4232"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structLoop" kindref="compound">Loop&lt;T&gt;</ref><sp/>XLoop<sp/>=<sp/>InitLoop(XParam,<sp/>XModel);</highlight></codeline>
<codeline lineno="4233"><highlight class="normal"></highlight></codeline>
<codeline lineno="4234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//FlowCPU(XParam,<sp/>XLoop,<sp/>XForcing,<sp/>XModel);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4235"><highlight class="normal"><sp/><sp/><sp/><sp/>HalfStepCPU(XParam,<sp/>XLoop,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="4236"><highlight class="normal"></highlight></codeline>
<codeline lineno="4237"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>maxu<sp/>=<sp/>std::numeric_limits&lt;float&gt;::min();</highlight></codeline>
<codeline lineno="4238"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>maxv<sp/>=<sp/>std::numeric_limits&lt;float&gt;::min();</highlight></codeline>
<codeline lineno="4239"><highlight class="normal"></highlight></codeline>
<codeline lineno="4240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>0;<sp/>ibl<sp/>&lt;<sp/>XParam.nblk;<sp/>ibl++)</highlight></codeline>
<codeline lineno="4241"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>XModel.blocks.active[ibl];</highlight></codeline>
<codeline lineno="4243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy<sp/>=<sp/>0;<sp/>iy<sp/>&lt;<sp/>XParam.blkwidth;<sp/>iy++)</highlight></codeline>
<codeline lineno="4244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>0;<sp/>ix<sp/>&lt;<sp/>XParam.blkwidth;<sp/>ix++)</highlight></codeline>
<codeline lineno="4246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>memloc(XParam.halowidth,<sp/>XParam.blkmemwidth,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="4248"><highlight class="normal"></highlight></codeline>
<codeline lineno="4249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxu<sp/>=<sp/>max(maxu,<sp/>abs(XModel.evolv.u[i]));</highlight></codeline>
<codeline lineno="4250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxv<sp/>=<sp/>max(maxv,<sp/>abs(XModel.evolv.v[i]));</highlight></codeline>
<codeline lineno="4251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4253"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4254"><highlight class="normal"></highlight></codeline>
<codeline lineno="4255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>test<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4256"><highlight class="normal"></highlight></codeline>
<codeline lineno="4257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxu<sp/>&gt;<sp/>T(std::numeric_limits&lt;T&gt;::epsilon()<sp/>*<sp/>T(1000.0))<sp/>||<sp/>maxv<sp/>&gt;<sp/>T(std::numeric_limits&lt;T&gt;::epsilon()<sp/>*<sp/>T(1000.0)))</highlight></codeline>
<codeline lineno="4258"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//test<sp/>=<sp/>true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XParam.outvars<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;zb&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;h&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;zs&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;u&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;v&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Fqux&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Fqvx&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Fquy&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Fqvy&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Fhu&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Fhv&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dh&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dhu&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dhv&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Su&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Sv&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;dhdx&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dhdy&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dzsdx&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dzsdy&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="4261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InitSave2Netcdf(XParam,<sp/>XModel);</highlight></codeline>
<codeline lineno="4262"><highlight class="normal"></highlight></codeline>
<codeline lineno="4263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4265"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4267"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4268"><highlight class="normal"></highlight></codeline>
<codeline lineno="4269"><highlight class="normal"></highlight></codeline>
<codeline lineno="4270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test;</highlight></codeline>
<codeline lineno="4271"><highlight class="normal"></highlight></codeline>
<codeline lineno="4272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4273"><highlight class="normal"></highlight></codeline>
<codeline lineno="4274"><highlight class="normal"></highlight></codeline>
<codeline lineno="4275"><highlight class="normal"></highlight></codeline>
<codeline lineno="4276"><highlight class="normal"></highlight></codeline>
<codeline lineno="4277"><highlight class="normal"></highlight></codeline>
<codeline lineno="4278"><highlight class="normal"></highlight><highlight class="comment">//TestMultiBathyRough(int<sp/>gpu,<sp/>T<sp/>ref,<sp/>int<sp/>scenario)</highlight></codeline>
<codeline lineno="4285"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TestMultiBathyRough(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gpu,<sp/>T<sp/>ref,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scenario)</highlight></codeline>
<codeline lineno="4286"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4287"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>Z0<sp/>=<sp/>ref<sp/>+<sp/>0.0;</highlight></codeline>
<codeline lineno="4288"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>Z1<sp/>=<sp/>ref<sp/>+<sp/>2.0;</highlight></codeline>
<codeline lineno="4289"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>R0<sp/>=<sp/>0.000001;</highlight></codeline>
<codeline lineno="4290"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>R1<sp/>=<sp/>0.1;</highlight></codeline>
<codeline lineno="4291"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>IL<sp/>=<sp/>8.6;</highlight></codeline>
<codeline lineno="4292"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>CL<sp/>=<sp/>7.2;</highlight></codeline>
<codeline lineno="4293"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>eps;</highlight></codeline>
<codeline lineno="4294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NX<sp/>=<sp/>21;</highlight></codeline>
<codeline lineno="4295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NY<sp/>=<sp/>21;</highlight></codeline>
<codeline lineno="4296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>xz;</highlight></codeline>
<codeline lineno="4297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>yz;</highlight></codeline>
<codeline lineno="4298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>map;</highlight></codeline>
<codeline lineno="4299"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classParam" kindref="compound">Param</ref><sp/>XParam;</highlight></codeline>
<codeline lineno="4300"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structForcing" kindref="compound">Forcing&lt;float&gt;</ref><sp/>XForcing;</highlight></codeline>
<codeline lineno="4301"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structModel" kindref="compound">Model&lt;float&gt;</ref><sp/>XModel;</highlight></codeline>
<codeline lineno="4302"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structModel" kindref="compound">Model&lt;float&gt;</ref><sp/>XModel_g;</highlight></codeline>
<codeline lineno="4303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name_file_R1;</highlight></codeline>
<codeline lineno="4304"><highlight class="normal"></highlight></codeline>
<codeline lineno="4305"><highlight class="normal"></highlight></codeline>
<codeline lineno="4306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Creation<sp/>of<sp/>a<sp/>Bathy<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4307"><highlight class="normal"></highlight></codeline>
<codeline lineno="4308"><highlight class="normal"><sp/><sp/><sp/><sp/>xz<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>*<sp/>NX);</highlight></codeline>
<codeline lineno="4309"><highlight class="normal"><sp/><sp/><sp/><sp/>yz<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>*<sp/>NY);</highlight></codeline>
<codeline lineno="4310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NX;<sp/>i++)<sp/>{<sp/>xz[i]<sp/>=<sp/>-1.0<sp/>+<sp/>0.1<sp/>*<sp/>i;<sp/>}</highlight></codeline>
<codeline lineno="4311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>NY;<sp/>j++)<sp/>{<sp/>yz[j]<sp/>=<sp/>-1.0<sp/>+<sp/>0.1<sp/>*<sp/>j;<sp/>}</highlight></codeline>
<codeline lineno="4312"><highlight class="normal"></highlight></codeline>
<codeline lineno="4313"><highlight class="normal"><sp/><sp/><sp/><sp/>map<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>*<sp/>NY<sp/>*<sp/>NX);</highlight></codeline>
<codeline lineno="4314"><highlight class="normal"></highlight></codeline>
<codeline lineno="4315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>NY;<sp/>j++)</highlight></codeline>
<codeline lineno="4316"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NX;<sp/>i++)</highlight></codeline>
<codeline lineno="4318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map[j<sp/>*<sp/>NX<sp/>+<sp/>i]<sp/>=<sp/>Z0;<sp/></highlight><highlight class="comment">//+<sp/>(yz[j]<sp/>+<sp/>1)<sp/>*<sp/>0.5;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4321"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4322"><highlight class="normal"><sp/><sp/><sp/><sp/>create2dnc(</highlight><highlight class="stringliteral">&quot;Z0_map.nc&quot;</highlight><highlight class="normal">,<sp/>NX,<sp/>NY,<sp/>xz,<sp/>yz,<sp/>map,<sp/></highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4323"><highlight class="normal"></highlight></codeline>
<codeline lineno="4324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Creation<sp/>of<sp/>a<sp/>smaller<sp/>Bathy<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4325"><highlight class="normal"></highlight></codeline>
<codeline lineno="4326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//xz<sp/>=<sp/>(double*)malloc(sizeof(double)<sp/>*<sp/>NX);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//yz<sp/>=<sp/>(double*)malloc(sizeof(double)<sp/>*<sp/>NY);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NX;<sp/>i++)<sp/>{<sp/>xz[i]<sp/>=<sp/>0.0<sp/>+<sp/>0.05<sp/>*<sp/>i;<sp/>}</highlight></codeline>
<codeline lineno="4329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>NY;<sp/>j++)<sp/>{<sp/>yz[j]<sp/>=<sp/>-1.0<sp/>+<sp/>0.05<sp/>*<sp/>j;<sp/>}</highlight></codeline>
<codeline lineno="4330"><highlight class="normal"></highlight></codeline>
<codeline lineno="4331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//map<sp/>=<sp/>(double*)malloc(sizeof(double)<sp/>*<sp/>NY<sp/>*<sp/>NX);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4332"><highlight class="normal"></highlight></codeline>
<codeline lineno="4333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Create<sp/>the<sp/>Losses<sp/>forcing:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>NY;<sp/>j++)</highlight></codeline>
<codeline lineno="4335"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NX;<sp/>i++)</highlight></codeline>
<codeline lineno="4337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map[j<sp/>*<sp/>NX<sp/>+<sp/>i]<sp/>=<sp/>Z1;<sp/></highlight><highlight class="comment">//<sp/>-(yz[j]<sp/>+<sp/>1)<sp/>*<sp/>0.5;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4340"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4341"><highlight class="normal"><sp/><sp/><sp/><sp/>create2dnc(</highlight><highlight class="stringliteral">&quot;Z1_map.nc&quot;</highlight><highlight class="normal">,<sp/>NX,<sp/>NY,<sp/>xz,<sp/>yz,<sp/>map,<sp/></highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4342"><highlight class="normal"></highlight></codeline>
<codeline lineno="4343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Creation<sp/>of<sp/>a<sp/>roughness<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//xz<sp/>=<sp/>(double*)malloc(sizeof(double)<sp/>*<sp/>NX);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//yz<sp/>=<sp/>(double*)malloc(sizeof(double)<sp/>*<sp/>NY);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NX;<sp/>i++)<sp/>{<sp/>xz[i]<sp/>=<sp/>-1.0<sp/>+<sp/>0.1<sp/>*<sp/>i;<sp/>}</highlight></codeline>
<codeline lineno="4347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>NY;<sp/>j++)<sp/>{<sp/>yz[j]<sp/>=<sp/>-1.0<sp/>+<sp/>0.1<sp/>*<sp/>j;<sp/>}</highlight></codeline>
<codeline lineno="4348"><highlight class="normal"></highlight></codeline>
<codeline lineno="4349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//map<sp/>=<sp/>(double*)malloc(sizeof(double)<sp/>*<sp/>NY<sp/>*<sp/>NX);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4350"><highlight class="normal"></highlight></codeline>
<codeline lineno="4351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>NY;<sp/>j++)</highlight></codeline>
<codeline lineno="4352"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NX;<sp/>i++)</highlight></codeline>
<codeline lineno="4354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map[j<sp/>*<sp/>NX<sp/>+<sp/>i]<sp/>=<sp/>R0;</highlight></codeline>
<codeline lineno="4356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4357"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4358"><highlight class="normal"><sp/><sp/><sp/><sp/>create2dnc(</highlight><highlight class="stringliteral">&quot;R0_map.nc&quot;</highlight><highlight class="normal">,<sp/>NX,<sp/>NY,<sp/>xz,<sp/>yz,<sp/>map,<sp/></highlight><highlight class="stringliteral">&quot;z0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4359"><highlight class="normal"></highlight></codeline>
<codeline lineno="4360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Creation<sp/>of<sp/>a<sp/>smaller<sp/>Roughness<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//xz<sp/>=<sp/>(double*)malloc(sizeof(double)<sp/>*<sp/>NX);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//yz<sp/>=<sp/>(double*)malloc(sizeof(double)<sp/>*<sp/>NY);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NX;<sp/>i++)<sp/>{<sp/>xz[i]<sp/>=<sp/>0.0<sp/>+<sp/>0.05<sp/>*<sp/>i;<sp/>}</highlight></codeline>
<codeline lineno="4364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>NY;<sp/>j++)<sp/>{<sp/>yz[j]<sp/>=<sp/>0.0<sp/>+<sp/>0.05<sp/>*<sp/>j;<sp/>}</highlight></codeline>
<codeline lineno="4365"><highlight class="normal"></highlight></codeline>
<codeline lineno="4366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//map<sp/>=<sp/>(double*)malloc(sizeof(double)<sp/>*<sp/>NY<sp/>*<sp/>NX);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4367"><highlight class="normal"></highlight></codeline>
<codeline lineno="4368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Create<sp/>the<sp/>Losses<sp/>forcing:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>NY;<sp/>j++)</highlight></codeline>
<codeline lineno="4370"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NX;<sp/>i++)</highlight></codeline>
<codeline lineno="4372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map[j<sp/>*<sp/>NX<sp/>+<sp/>i]<sp/>=<sp/>R1;</highlight></codeline>
<codeline lineno="4374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4375"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scenario<sp/>&lt;<sp/>0.5)</highlight></codeline>
<codeline lineno="4377"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name_file_R1<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;R1_map.nc&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4379"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4381"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name_file_R1<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;1R_map.nc&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4383"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4384"><highlight class="normal"><sp/><sp/><sp/><sp/>create2dnc(name_file_R1,<sp/>NX,<sp/>NY,<sp/>xz,<sp/>yz,<sp/>map,<sp/></highlight><highlight class="stringliteral">&quot;z0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4385"><highlight class="normal"></highlight></codeline>
<codeline lineno="4386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Creation<sp/>of<sp/>a<sp/>refinement<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//xz<sp/>=<sp/>(double*)malloc(sizeof(double)<sp/>*<sp/>NX);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//yz<sp/>=<sp/>(double*)malloc(sizeof(double)<sp/>*<sp/>NY);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NX;<sp/>i++)<sp/>{<sp/>xz[i]<sp/>=<sp/>-1.0<sp/>+<sp/>0.1<sp/>*<sp/>i;<sp/>}</highlight></codeline>
<codeline lineno="4390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>NY;<sp/>j++)<sp/>{<sp/>yz[j]<sp/>=<sp/>-1.0<sp/>+<sp/>0.1<sp/>*<sp/>j;<sp/>}</highlight></codeline>
<codeline lineno="4391"><highlight class="normal"></highlight></codeline>
<codeline lineno="4392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//map<sp/>=<sp/>(double*)malloc(sizeof(double)<sp/>*<sp/>NY<sp/>*<sp/>NX);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4393"><highlight class="normal"></highlight></codeline>
<codeline lineno="4394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>NY;<sp/>j++)</highlight></codeline>
<codeline lineno="4395"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NX;<sp/>i++)</highlight></codeline>
<codeline lineno="4397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map[j<sp/>*<sp/>NX<sp/>+<sp/>i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((abs(xz[i])<sp/>&lt;<sp/>0.5)<sp/>&amp;&amp;<sp/>(abs(yz[j])<sp/>&lt;<sp/>0.5))</highlight></codeline>
<codeline lineno="4400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map[j<sp/>*<sp/>NX<sp/>+<sp/>i]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4404"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4405"><highlight class="normal"><sp/><sp/><sp/><sp/>create2dnc(</highlight><highlight class="stringliteral">&quot;refinement.nc&quot;</highlight><highlight class="normal">,<sp/>NX,<sp/>NY,<sp/>xz,<sp/>yz,<sp/>map,<sp/></highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4406"><highlight class="normal"></highlight></codeline>
<codeline lineno="4407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*//<sp/>Creation<sp/>of<sp/>a<sp/>rain<sp/>fall<sp/>file</highlight></codeline>
<codeline lineno="4408"><highlight class="comment"><sp/><sp/><sp/><sp/>std::ofstream<sp/>rain_file(</highlight></codeline>
<codeline lineno="4409"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;rainTest13.txt&quot;,<sp/>std::ios_base::out<sp/>|<sp/>std::ios_base::trunc);</highlight></codeline>
<codeline lineno="4410"><highlight class="comment"><sp/><sp/><sp/><sp/>rain_file<sp/>&lt;&lt;<sp/>&quot;0.000000\t10.00&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="4411"><highlight class="comment"><sp/><sp/><sp/><sp/>rain_file<sp/>&lt;&lt;<sp/>&quot;1000.000\t10.00&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="4412"><highlight class="comment"><sp/><sp/><sp/><sp/>rain_file.close();*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4413"><highlight class="normal"></highlight></codeline>
<codeline lineno="4414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Creation<sp/>of<sp/>BG_param_test13.txt<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4415"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ofstream<sp/>param_file(</highlight></codeline>
<codeline lineno="4416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;BG_param_test13.txt&quot;</highlight><highlight class="normal">,<sp/>std::ios_base::out<sp/>|<sp/>std::ios_base::trunc);</highlight></codeline>
<codeline lineno="4417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Add<sp/>Bathymetries<sp/>to<sp/>the<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4418"><highlight class="normal"><sp/><sp/><sp/><sp/>param_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;bathy<sp/>=<sp/>Z0_map.nc?z<sp/>;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="4419"><highlight class="normal"><sp/><sp/><sp/><sp/>param_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;bathy<sp/>=<sp/>Z1_map.nc?z<sp/>;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="4420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Add<sp/>Roughness<sp/>to<sp/>the<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scenario<sp/>&gt;<sp/>1.5)</highlight></codeline>
<codeline lineno="4422"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R1<sp/>=<sp/>3.56;</highlight></codeline>
<codeline lineno="4424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;cfmap<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>R1<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="4425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R0<sp/>=<sp/>3.56;</highlight></codeline>
<codeline lineno="4426"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4428"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;cfmap<sp/>=<sp/>R0_map.nc?z0<sp/>;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="4430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;cfmap<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name_file_R1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;?z0<sp/>;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="4431"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//param_file<sp/>&lt;&lt;<sp/>&quot;cfmap<sp/>=<sp/>R1_map.nc?z0<sp/>;&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4433"><highlight class="normal"><sp/><sp/><sp/><sp/>param_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;frictionmodel=1<sp/>;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="4434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Add<sp/>refinement<sp/>to<sp/>the<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4435"><highlight class="normal"><sp/><sp/><sp/><sp/>param_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Adaptation<sp/>=<sp/>Targetlevel,refinement.nc?z<sp/>;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="4436"><highlight class="normal"><sp/><sp/><sp/><sp/>param_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;initlevel<sp/>=<sp/>0;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="4437"><highlight class="normal"><sp/><sp/><sp/><sp/>param_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;maxlevel<sp/>=<sp/>1;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="4438"><highlight class="normal"><sp/><sp/><sp/><sp/>param_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;minlevel<sp/>=<sp/>0;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="4439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Add<sp/>River<sp/>forcing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//param_file<sp/>&lt;&lt;<sp/>&quot;rainfile<sp/>=<sp/>rainTest13.txt<sp/>;&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Add<sp/>endtime<sp/>and<sp/>outputvar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4442"><highlight class="normal"><sp/><sp/><sp/><sp/>param_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;endtime<sp/>=<sp/>10.0<sp/>;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="4443"><highlight class="normal"><sp/><sp/><sp/><sp/>param_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;outvars<sp/>=<sp/>zs,h,u,v,zb,cf;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="4444"><highlight class="normal"><sp/><sp/><sp/><sp/>param_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;dx<sp/>=<sp/>0.01;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="4445"><highlight class="normal"><sp/><sp/><sp/><sp/>param_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;zsinit<sp/>=<sp/>0.1;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="4446"><highlight class="normal"><sp/><sp/><sp/><sp/>param_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;smallnc<sp/>=<sp/>0;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="4447"><highlight class="normal"><sp/><sp/><sp/><sp/>param_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;doubleprecision<sp/>=<sp/>1;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="4448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scenario<sp/>&gt;<sp/>2.5)</highlight></codeline>
<codeline lineno="4449"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;il<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>IL<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="4451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;cl<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>CL<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="4452"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4453"><highlight class="normal"></highlight></codeline>
<codeline lineno="4454"><highlight class="normal"><sp/><sp/><sp/><sp/>param_file.close();</highlight></codeline>
<codeline lineno="4455"><highlight class="normal"></highlight></codeline>
<codeline lineno="4456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//read<sp/>param<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4457"><highlight class="normal"><sp/><sp/><sp/><sp/>Readparamfile(XParam,<sp/>XForcing,<sp/></highlight><highlight class="stringliteral">&quot;BG_param_test13.txt&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>&quot;BG_param_test13.txt&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4458"><highlight class="normal"></highlight></codeline>
<codeline lineno="4459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//readforcing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4460"><highlight class="normal"><sp/><sp/><sp/><sp/>readforcing(XParam,<sp/>XForcing);</highlight></codeline>
<codeline lineno="4461"><highlight class="normal"></highlight></codeline>
<codeline lineno="4462"><highlight class="normal"><sp/><sp/><sp/><sp/>checkparamsanity(XParam,<sp/>XForcing);</highlight></codeline>
<codeline lineno="4463"><highlight class="normal"></highlight></codeline>
<codeline lineno="4464"><highlight class="normal"><sp/><sp/><sp/><sp/>InitMesh(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="4465"><highlight class="normal"></highlight></codeline>
<codeline lineno="4466"><highlight class="normal"><sp/><sp/><sp/><sp/>InitialConditions(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="4467"><highlight class="normal"></highlight></codeline>
<codeline lineno="4468"><highlight class="normal"><sp/><sp/><sp/><sp/>InitialAdaptation(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="4469"><highlight class="normal"></highlight></codeline>
<codeline lineno="4470"><highlight class="normal"><sp/><sp/><sp/><sp/>SetupGPU(XParam,<sp/>XModel,<sp/>XForcing,<sp/>XModel_g);</highlight></codeline>
<codeline lineno="4471"><highlight class="normal"></highlight></codeline>
<codeline lineno="4472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Run<sp/>first<sp/>full<sp/>step<sp/>(i.e.<sp/>2<sp/>half<sp/>steps)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4473"><highlight class="normal"></highlight></codeline>
<codeline lineno="4474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Loop&lt;T&gt;<sp/>XLoop<sp/>=<sp/>InitLoop(XParam,<sp/>XModel);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4475"><highlight class="normal"><sp/><sp/><sp/><sp/>MainLoop(XParam,<sp/>XForcing,<sp/>XModel,<sp/>XModel_g);</highlight></codeline>
<codeline lineno="4476"><highlight class="normal"></highlight></codeline>
<codeline lineno="4477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>XModel.cf[0]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>XModel.zb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4479"><highlight class="normal"></highlight></codeline>
<codeline lineno="4480"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>maxz<sp/>=<sp/>T(-1.0)<sp/>*<sp/>std::numeric_limits&lt;float&gt;::max();</highlight></codeline>
<codeline lineno="4481"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>minz<sp/>=<sp/>std::numeric_limits&lt;float&gt;::max();</highlight></codeline>
<codeline lineno="4482"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>maxr<sp/>=<sp/>T(-1.0)<sp/>*<sp/>std::numeric_limits&lt;float&gt;::max();</highlight></codeline>
<codeline lineno="4483"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>minr<sp/>=<sp/>std::numeric_limits&lt;float&gt;::max();</highlight></codeline>
<codeline lineno="4484"><highlight class="normal"></highlight></codeline>
<codeline lineno="4485"><highlight class="normal"></highlight></codeline>
<codeline lineno="4486"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;min<sp/>float=%f\n&quot;</highlight><highlight class="normal">,<sp/>std::numeric_limits&lt;float&gt;::min());</highlight></codeline>
<codeline lineno="4487"><highlight class="normal"></highlight></codeline>
<codeline lineno="4488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>0;<sp/>ibl<sp/>&lt;<sp/>XParam.nblk;<sp/>ibl++)</highlight></codeline>
<codeline lineno="4489"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>XModel.blocks.active[ibl];</highlight></codeline>
<codeline lineno="4491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy<sp/>=<sp/>0;<sp/>iy<sp/>&lt;<sp/>XParam.blkwidth;<sp/>iy++)</highlight></codeline>
<codeline lineno="4492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>0;<sp/>ix<sp/>&lt;<sp/>XParam.blkwidth;<sp/>ix++)</highlight></codeline>
<codeline lineno="4494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>memloc(XParam.halowidth,<sp/>XParam.blkmemwidth,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="4496"><highlight class="normal"></highlight></codeline>
<codeline lineno="4497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxz<sp/>=<sp/>max(maxz,<sp/>abs(XModel.zb[i]));</highlight></codeline>
<codeline lineno="4498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minz<sp/>=<sp/>min(minz,<sp/>abs(XModel.zb[i]));</highlight></codeline>
<codeline lineno="4499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxr<sp/>=<sp/>max(maxr,<sp/>abs(XModel.cf[i]));</highlight></codeline>
<codeline lineno="4500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minr<sp/>=<sp/>min(minr,<sp/>abs(XModel.cf[i]));</highlight></codeline>
<codeline lineno="4501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4503"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4504"><highlight class="normal"></highlight></codeline>
<codeline lineno="4505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>result<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4506"><highlight class="normal"><sp/><sp/><sp/><sp/>eps<sp/>=<sp/>0.0000001;</highlight></codeline>
<codeline lineno="4507"><highlight class="normal"></highlight></codeline>
<codeline lineno="4508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((abs(maxz<sp/>-<sp/>Z1)<sp/>&lt;<sp/>eps)<sp/>&amp;&amp;<sp/>(abs(maxr<sp/>-<sp/>R1)<sp/>&lt;<sp/>eps)<sp/>&amp;&amp;<sp/>(abs(minz<sp/>-<sp/>Z0)<sp/>&lt;<sp/>eps)<sp/>&amp;&amp;<sp/>(abs(minr<sp/>-<sp/>R0)<sp/>&lt;<sp/>eps))</highlight></codeline>
<codeline lineno="4509"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4511"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4512"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\t\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4513"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\t\tZ<sp/>max<sp/>forced<sp/>:<sp/>%f,<sp/>Z<sp/>max<sp/>obs<sp/>:<sp/><sp/>%f\n<sp/>&quot;</highlight><highlight class="normal">,<sp/>Z1,<sp/>maxz);</highlight></codeline>
<codeline lineno="4514"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\t\tR<sp/>max<sp/>forced<sp/>:<sp/><sp/>%f,<sp/>R<sp/>max<sp/>obs:<sp/><sp/>%f\n&quot;</highlight><highlight class="normal">,<sp/>R1,<sp/>maxr);</highlight></codeline>
<codeline lineno="4515"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\t\tZ<sp/>min<sp/>forced<sp/>:<sp/><sp/>%f,<sp/>Z<sp/>min<sp/>obs:<sp/><sp/>%f\n&quot;</highlight><highlight class="normal">,<sp/>Z0,<sp/>minz);</highlight></codeline>
<codeline lineno="4516"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\t\tR<sp/>min<sp/>forced<sp/>:<sp/>%f,<sp/>R<sp/>min<sp/>obs<sp/>:<sp/>%f\n<sp/>&quot;</highlight><highlight class="normal">,<sp/>R0,<sp/>minr);</highlight></codeline>
<codeline lineno="4517"><highlight class="normal"></highlight></codeline>
<codeline lineno="4518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scenario<sp/>&gt;<sp/>2.5)</highlight></codeline>
<codeline lineno="4519"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>maxil<sp/>=<sp/>T(-1.0)<sp/>*<sp/>std::numeric_limits&lt;float&gt;::max();</highlight></codeline>
<codeline lineno="4521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>minil<sp/>=<sp/>std::numeric_limits&lt;float&gt;::max();</highlight></codeline>
<codeline lineno="4522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>maxcl<sp/>=<sp/>T(-1.0)<sp/>*<sp/>std::numeric_limits&lt;float&gt;::max();</highlight></codeline>
<codeline lineno="4523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>mincl<sp/>=<sp/>std::numeric_limits&lt;float&gt;::max();</highlight></codeline>
<codeline lineno="4524"><highlight class="normal"></highlight></codeline>
<codeline lineno="4525"><highlight class="normal"></highlight></codeline>
<codeline lineno="4526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;min<sp/>float=%f\n&quot;,<sp/>std::numeric_limits&lt;float&gt;::min());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4527"><highlight class="normal"></highlight></codeline>
<codeline lineno="4528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>0;<sp/>ibl<sp/>&lt;<sp/>XParam.nblk;<sp/>ibl++)</highlight></codeline>
<codeline lineno="4529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>XModel.blocks.active[ibl];</highlight></codeline>
<codeline lineno="4531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy<sp/>=<sp/>0;<sp/>iy<sp/>&lt;<sp/>XParam.blkwidth;<sp/>iy++)</highlight></codeline>
<codeline lineno="4532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>0;<sp/>ix<sp/>&lt;<sp/>XParam.blkwidth;<sp/>ix++)</highlight></codeline>
<codeline lineno="4534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>memloc(XParam.halowidth,<sp/>XParam.blkmemwidth,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="4536"><highlight class="normal"></highlight></codeline>
<codeline lineno="4537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxil<sp/>=<sp/>max(maxil,<sp/>abs(XModel.il[i]));</highlight></codeline>
<codeline lineno="4538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minil<sp/>=<sp/>min(minil,<sp/>abs(XModel.il[i]));</highlight></codeline>
<codeline lineno="4539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxcl<sp/>=<sp/>max(maxcl,<sp/>abs(XModel.cl[i]));</highlight></codeline>
<codeline lineno="4540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mincl<sp/>=<sp/>min(mincl,<sp/>abs(XModel.cl[i]));</highlight></codeline>
<codeline lineno="4541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4544"><highlight class="normal"></highlight></codeline>
<codeline lineno="4545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>result<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eps<sp/>=<sp/>0.0000001;</highlight></codeline>
<codeline lineno="4547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>IL<sp/>is<sp/>expected<sp/>here<sp/>to<sp/>be<sp/>value<sp/>when<sp/>dry<sp/>and<sp/>0<sp/>where<sp/>wet<sp/>at<sp/>the<sp/>begining<sp/>of<sp/>the<sp/>computation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((abs(maxil<sp/>-<sp/>IL)<sp/>&lt;<sp/>eps)<sp/>&amp;&amp;<sp/>(abs(maxcl<sp/>-<sp/>CL)<sp/>&lt;<sp/>eps)<sp/>&amp;&amp;<sp/>(abs(minil<sp/>-<sp/>T(0.0))<sp/>&lt;<sp/>eps)<sp/>&amp;&amp;<sp/>(abs(mincl<sp/>-<sp/>CL)<sp/>&lt;<sp/>eps))</highlight></codeline>
<codeline lineno="4549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4552"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4553"><highlight class="normal"></highlight></codeline>
<codeline lineno="4554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4555"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4556"><highlight class="normal"></highlight></codeline>
<codeline lineno="4557"><highlight class="normal"></highlight></codeline>
<codeline lineno="4558"><highlight class="normal"></highlight></codeline>
<codeline lineno="4559"><highlight class="normal"></highlight><highlight class="comment">//TestFlexibleOutputTimes(int<sp/>gpu,<sp/>T<sp/>ref,<sp/>int<sp/>scenario)</highlight></codeline>
<codeline lineno="4567"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TestFlexibleOutputTimes(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gpu,<sp/>T<sp/>ref,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scenario)</highlight></codeline>
<codeline lineno="4568"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4569"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>Z0<sp/>=<sp/>ref<sp/>+<sp/>0.0;</highlight></codeline>
<codeline lineno="4570"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>Z1<sp/>=<sp/>ref<sp/>+<sp/>2.0;</highlight></codeline>
<codeline lineno="4571"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>eps;</highlight></codeline>
<codeline lineno="4572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NX<sp/>=<sp/>21;</highlight></codeline>
<codeline lineno="4573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NY<sp/>=<sp/>21;</highlight></codeline>
<codeline lineno="4574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>xz;</highlight></codeline>
<codeline lineno="4575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>yz;</highlight></codeline>
<codeline lineno="4576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>map;</highlight></codeline>
<codeline lineno="4577"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classParam" kindref="compound">Param</ref><sp/>XParam;</highlight></codeline>
<codeline lineno="4578"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structForcing" kindref="compound">Forcing&lt;float&gt;</ref><sp/>XForcing;</highlight></codeline>
<codeline lineno="4579"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structModel" kindref="compound">Model&lt;float&gt;</ref><sp/>XModel;</highlight></codeline>
<codeline lineno="4580"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structModel" kindref="compound">Model&lt;float&gt;</ref><sp/>XModel_g;</highlight></codeline>
<codeline lineno="4581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name_file_R1;</highlight></codeline>
<codeline lineno="4582"><highlight class="normal"></highlight></codeline>
<codeline lineno="4583"><highlight class="normal"></highlight></codeline>
<codeline lineno="4584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Creation<sp/>of<sp/>a<sp/>Bathy<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4585"><highlight class="normal"></highlight></codeline>
<codeline lineno="4586"><highlight class="normal"><sp/><sp/><sp/><sp/>xz<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>*<sp/>NX);</highlight></codeline>
<codeline lineno="4587"><highlight class="normal"><sp/><sp/><sp/><sp/>yz<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>*<sp/>NY);</highlight></codeline>
<codeline lineno="4588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NX;<sp/>i++)<sp/>{<sp/>xz[i]<sp/>=<sp/>-1.0<sp/>+<sp/>0.1<sp/>*<sp/>i;<sp/>}</highlight></codeline>
<codeline lineno="4589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>NY;<sp/>j++)<sp/>{<sp/>yz[j]<sp/>=<sp/>-1.0<sp/>+<sp/>0.1<sp/>*<sp/>j;<sp/>}</highlight></codeline>
<codeline lineno="4590"><highlight class="normal"></highlight></codeline>
<codeline lineno="4591"><highlight class="normal"><sp/><sp/><sp/><sp/>map<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>*<sp/>NY<sp/>*<sp/>NX);</highlight></codeline>
<codeline lineno="4592"><highlight class="normal"></highlight></codeline>
<codeline lineno="4593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>NY;<sp/>j++)</highlight></codeline>
<codeline lineno="4594"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NX;<sp/>i++)</highlight></codeline>
<codeline lineno="4596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map[j<sp/>*<sp/>NX<sp/>+<sp/>i]<sp/>=<sp/>Z0;<sp/></highlight><highlight class="comment">//+<sp/>(yz[j]<sp/>+<sp/>1)<sp/>*<sp/>0.5;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4599"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4600"><highlight class="normal"><sp/><sp/><sp/><sp/>create2dnc(</highlight><highlight class="stringliteral">&quot;Z0_map.nc&quot;</highlight><highlight class="normal">,<sp/>NX,<sp/>NY,<sp/>xz,<sp/>yz,<sp/>map,<sp/></highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4601"><highlight class="normal"></highlight></codeline>
<codeline lineno="4602"><highlight class="normal"></highlight></codeline>
<codeline lineno="4603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Creation<sp/>of<sp/>BG_param_test13.txt<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4604"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ofstream<sp/>param_file(</highlight></codeline>
<codeline lineno="4605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;BG_param_test15.txt&quot;</highlight><highlight class="normal">,<sp/>std::ios_base::out<sp/>|<sp/>std::ios_base::trunc);</highlight></codeline>
<codeline lineno="4606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Add<sp/>Bathymetries<sp/>to<sp/>the<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4607"><highlight class="normal"><sp/><sp/><sp/><sp/>param_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;bathy<sp/>=<sp/>Z0_map.nc?z<sp/>;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="4608"><highlight class="normal"></highlight></codeline>
<codeline lineno="4609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Add<sp/>endtime<sp/>and<sp/>outputvar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4610"><highlight class="normal"><sp/><sp/><sp/><sp/>param_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;endtime<sp/>=<sp/>11.0<sp/>;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="4611"><highlight class="normal"><sp/><sp/><sp/><sp/>param_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;reftime<sp/>=<sp/>2020-01-01T00:00:00<sp/>;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="4612"><highlight class="normal"><sp/><sp/><sp/><sp/>param_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;outvars<sp/>=<sp/>zs,h,u,v,zb;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="4613"><highlight class="normal"><sp/><sp/><sp/><sp/>param_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;dx<sp/>=<sp/>0.05;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="4614"><highlight class="normal"><sp/><sp/><sp/><sp/>param_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;zsinit<sp/>=<sp/>0.1;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="4615"><highlight class="normal"><sp/><sp/><sp/><sp/>param_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;smallnc<sp/>=<sp/>0;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="4616"><highlight class="normal"><sp/><sp/><sp/><sp/>param_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;doubleprecision<sp/>=<sp/>1;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="4617"><highlight class="normal"><sp/><sp/><sp/><sp/>param_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Toutput<sp/>=<sp/>1|2|5,<sp/>2020-01-01T00:00:08,<sp/><sp/>9.5;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="4618"><highlight class="normal"><sp/><sp/><sp/><sp/>param_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;outzone<sp/>=<sp/>Test15_zoom1.nc,0.2,0.6,-0.2,0.2,<sp/>2020-01-01T00:00:02|0.008min|2020-01-01T00:00:03,<sp/>5.6,6.9;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="4619"><highlight class="normal"><sp/><sp/><sp/><sp/>param_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;outzone<sp/>=<sp/>Test15_zoom2.nc,0.2,0.6,-0.2,0.2,<sp/>8.1|0.7|,<sp/>5.6;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="4620"><highlight class="normal"><sp/><sp/><sp/><sp/>param_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;outzone<sp/>=<sp/>Test15_zoom3.nc,0.2,0.6,-0.2,0.2,<sp/>|0.8|2;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="4621"><highlight class="normal"><sp/><sp/><sp/><sp/>param_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;outzone<sp/>=<sp/>Test15_zoom4.nc,0.2,0.6,-0.2,0.2,<sp/>8.2||9;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;<sp/></highlight><highlight class="comment">//<sp/>Here<sp/>the<sp/>step<sp/>in<sp/>not<sp/>given<sp/>so<sp/>assumed<sp/>infinite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4622"><highlight class="normal"><sp/><sp/><sp/><sp/>param_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;outzone<sp/>=<sp/>Test15_zoom5.nc,0.2,0.6,-0.2,0.2;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="4623"><highlight class="normal"><sp/><sp/><sp/><sp/>param_file.close();</highlight></codeline>
<codeline lineno="4624"><highlight class="normal"></highlight></codeline>
<codeline lineno="4625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//read<sp/>param<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4626"><highlight class="normal"><sp/><sp/><sp/><sp/>Readparamfile(XParam,<sp/>XForcing,<sp/></highlight><highlight class="stringliteral">&quot;BG_param_test15.txt&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>&quot;BG_param_test13.txt&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4627"><highlight class="normal"></highlight></codeline>
<codeline lineno="4628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//readforcing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4629"><highlight class="normal"><sp/><sp/><sp/><sp/>readforcing(XParam,<sp/>XForcing);</highlight></codeline>
<codeline lineno="4630"><highlight class="normal"></highlight></codeline>
<codeline lineno="4631"><highlight class="normal"><sp/><sp/><sp/><sp/>checkparamsanity(XParam,<sp/>XForcing);</highlight></codeline>
<codeline lineno="4632"><highlight class="normal"></highlight></codeline>
<codeline lineno="4633"><highlight class="normal"><sp/><sp/><sp/><sp/>InitMesh(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="4634"><highlight class="normal"></highlight></codeline>
<codeline lineno="4635"><highlight class="normal"><sp/><sp/><sp/><sp/>InitialConditions(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="4636"><highlight class="normal"></highlight></codeline>
<codeline lineno="4637"><highlight class="normal"><sp/><sp/><sp/><sp/>InitialAdaptation(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="4638"><highlight class="normal"></highlight></codeline>
<codeline lineno="4639"><highlight class="normal"><sp/><sp/><sp/><sp/>SetupGPU(XParam,<sp/>XModel,<sp/>XForcing,<sp/>XModel_g);</highlight></codeline>
<codeline lineno="4640"><highlight class="normal"></highlight></codeline>
<codeline lineno="4641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Run<sp/>first<sp/>full<sp/>step<sp/>(i.e.<sp/>2<sp/>half<sp/>steps)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4642"><highlight class="normal"></highlight></codeline>
<codeline lineno="4643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Loop&lt;T&gt;<sp/>XLoop<sp/>=<sp/>InitLoop(XParam,<sp/>XModel);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//MainLoop(XParam,<sp/>XForcing,<sp/>XModel,<sp/>XModel_g);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4645"><highlight class="normal"></highlight></codeline>
<codeline lineno="4646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TEST<sp/>1:<sp/>reading<sp/>and<sp/>default<sp/>values<sp/>check:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>result<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4648"><highlight class="normal"></highlight></codeline>
<codeline lineno="4649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XModel.OutputT.size()==20)</highlight></codeline>
<codeline lineno="4650"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4652"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4653"><highlight class="normal"></highlight></codeline>
<codeline lineno="4654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4655"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(!XParam.Toutput.end<sp/>==<sp/>11.0)</highlight></codeline>
<codeline lineno="4656"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="4657"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(!XParam.Toutput.val[1]<sp/>==<sp/>9.5)</highlight></codeline>
<codeline lineno="4658"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="4659"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4660"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(!XParam.outzone[2].Toutput.init<sp/>==<sp/>0.0)</highlight></codeline>
<codeline lineno="4661"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="4662"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(!XParam.outzone[3].Toutput.tstep<sp/>==<sp/>11.0)</highlight></codeline>
<codeline lineno="4663"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="4664"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(!XParam.outzone[4].Toutput.tstep<sp/>==<sp/>1.0)</highlight></codeline>
<codeline lineno="4665"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="4666"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4667"><highlight class="normal"></highlight></codeline>
<codeline lineno="4668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4669"><highlight class="normal"></highlight></codeline>
<codeline lineno="4670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4671"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4672"><highlight class="normal"></highlight></codeline>
<codeline lineno="4673"><highlight class="normal"></highlight></codeline>
<codeline lineno="4674"><highlight class="normal"></highlight></codeline>
<codeline lineno="4675"><highlight class="normal"></highlight></codeline>
<codeline lineno="4676"><highlight class="normal"></highlight></codeline>
<codeline lineno="4677"><highlight class="normal"></highlight></codeline>
<codeline lineno="4678"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestFirsthalfstep(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structForcing" kindref="compound">Forcing&lt;float&gt;</ref><sp/>XForcing,<sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref><sp/>XModel,<sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref><sp/>XModel_g)</highlight></codeline>
<codeline lineno="4679"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4680"><highlight class="normal"></highlight></codeline>
<codeline lineno="4681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>Model(s)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4682"><highlight class="normal"></highlight></codeline>
<codeline lineno="4683"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.outvars<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;zb&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;h&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;zs&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;u&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;v&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Fqux&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Fqvx&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Fquy&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Fqvy&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Fhu&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Fhv&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dh&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dhu&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dhv&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Su&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Sv&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;dhdx&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dhdy&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dzsdx&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dzsdy&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dzbdx&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dzbdy&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="4684"><highlight class="normal"></highlight></codeline>
<codeline lineno="4685"><highlight class="normal"><sp/><sp/><sp/><sp/>checkparamsanity(XParam,<sp/>XForcing);</highlight></codeline>
<codeline lineno="4686"><highlight class="normal"></highlight></codeline>
<codeline lineno="4687"><highlight class="normal"><sp/><sp/><sp/><sp/>InitMesh(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="4688"><highlight class="normal"></highlight></codeline>
<codeline lineno="4689"><highlight class="normal"><sp/><sp/><sp/><sp/>InitialConditions(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="4690"><highlight class="normal"></highlight></codeline>
<codeline lineno="4691"><highlight class="normal"><sp/><sp/><sp/><sp/>InitialAdaptation(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="4692"><highlight class="normal"></highlight></codeline>
<codeline lineno="4693"><highlight class="normal"><sp/><sp/><sp/><sp/>SetupGPU(XParam,<sp/>XModel,<sp/>XForcing,<sp/>XModel_g);</highlight></codeline>
<codeline lineno="4694"><highlight class="normal"></highlight></codeline>
<codeline lineno="4695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Run<sp/>first<sp/>full<sp/>step<sp/>(i.e.<sp/>2<sp/>half<sp/>steps)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4696"><highlight class="normal"></highlight></codeline>
<codeline lineno="4697"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structLoop" kindref="compound">Loop&lt;T&gt;</ref><sp/>XLoop<sp/>=<sp/>InitLoop(XParam,<sp/>XModel);</highlight></codeline>
<codeline lineno="4698"><highlight class="normal"></highlight></codeline>
<codeline lineno="4699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.GPUDEVICE<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="4700"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//FlowCPU(XParam,<sp/>XLoop,<sp/>XForcing,<sp/>XModel);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HalfStepCPU(XParam,<sp/>XLoop,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="4703"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4705"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HalfStepGPU(XParam,<sp/>XLoop,<sp/>XForcing,<sp/>XModel_g);</highlight></codeline>
<codeline lineno="4707"><highlight class="normal"></highlight></codeline>
<codeline lineno="4708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ivar<sp/>=<sp/>0;<sp/>ivar<sp/>&lt;<sp/>XParam.outvars.size();<sp/>ivar++)</highlight></codeline>
<codeline lineno="4709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CUDA_CHECK(cudaMemcpy(XModel.OutputVarMap[XParam.outvars[ivar]],<sp/>XModel_g.OutputVarMap[XParam.outvars[ivar]],<sp/>XParam.nblkmem<sp/>*<sp/>XParam.blksize<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T),<sp/>cudaMemcpyDeviceToHost));</highlight></codeline>
<codeline lineno="4711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4712"><highlight class="normal"></highlight></codeline>
<codeline lineno="4713"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4714"><highlight class="normal"></highlight></codeline>
<codeline lineno="4715"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>maxu<sp/>=<sp/>std::numeric_limits&lt;float&gt;::min();</highlight></codeline>
<codeline lineno="4716"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>maxv<sp/>=<sp/>std::numeric_limits&lt;float&gt;::min();</highlight></codeline>
<codeline lineno="4717"><highlight class="normal"></highlight></codeline>
<codeline lineno="4718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>0;<sp/>ibl<sp/>&lt;<sp/>XParam.nblk;<sp/>ibl++)</highlight></codeline>
<codeline lineno="4719"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>XModel.blocks.active[ibl];</highlight></codeline>
<codeline lineno="4721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy<sp/>=<sp/>0;<sp/>iy<sp/>&lt;<sp/>XParam.blkwidth;<sp/>iy++)</highlight></codeline>
<codeline lineno="4722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>0;<sp/>ix<sp/>&lt;<sp/>XParam.blkwidth;<sp/>ix++)</highlight></codeline>
<codeline lineno="4724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>memloc(XParam.halowidth,<sp/>XParam.blkmemwidth,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="4726"><highlight class="normal"></highlight></codeline>
<codeline lineno="4727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxu<sp/>=<sp/>max(maxu,<sp/>abs(XModel.evolv.u[i]));</highlight></codeline>
<codeline lineno="4728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxv<sp/>=<sp/>max(maxv,<sp/>abs(XModel.evolv.v[i]));</highlight></codeline>
<codeline lineno="4729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4731"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4732"><highlight class="normal"></highlight></codeline>
<codeline lineno="4733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>test<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4734"><highlight class="normal"></highlight></codeline>
<codeline lineno="4735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//test<sp/>=<sp/>true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4736"><highlight class="normal"></highlight></codeline>
<codeline lineno="4737"><highlight class="normal"><sp/><sp/><sp/><sp/>InitSave2Netcdf(XParam,<sp/>XModel);</highlight></codeline>
<codeline lineno="4738"><highlight class="normal"></highlight></codeline>
<codeline lineno="4739"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4740"><highlight class="normal"></highlight></codeline>
<codeline lineno="4741"><highlight class="normal"></highlight></codeline>
<codeline lineno="4742"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Testzbinit(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structForcing" kindref="compound">Forcing&lt;float&gt;</ref><sp/>XForcing,<sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref><sp/>XModel,<sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref><sp/>XModel_g)</highlight></codeline>
<codeline lineno="4743"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4744"><highlight class="normal"></highlight></codeline>
<codeline lineno="4745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>Model(s)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4746"><highlight class="normal"></highlight></codeline>
<codeline lineno="4747"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.outvars<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;zb&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;u&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;v&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Fqux&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Fqvx&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Fquy&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Fqvy&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Fhu&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Fhv&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dh&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dhu&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dhv&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Su&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Sv&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;dhdx&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dhdy&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dzsdx&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dzsdy&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dzbdx&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dzbdy&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="4748"><highlight class="normal"></highlight></codeline>
<codeline lineno="4749"><highlight class="normal"><sp/><sp/><sp/><sp/>checkparamsanity(XParam,<sp/>XForcing);</highlight></codeline>
<codeline lineno="4750"><highlight class="normal"></highlight></codeline>
<codeline lineno="4751"><highlight class="normal"><sp/><sp/><sp/><sp/>InitMesh(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="4752"><highlight class="normal"></highlight></codeline>
<codeline lineno="4753"><highlight class="normal"><sp/><sp/><sp/><sp/>InitialConditions(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="4754"><highlight class="normal"></highlight></codeline>
<codeline lineno="4755"><highlight class="normal"><sp/><sp/><sp/><sp/>InitialAdaptation(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="4756"><highlight class="normal"></highlight></codeline>
<codeline lineno="4757"><highlight class="normal"><sp/><sp/><sp/><sp/>SetupGPU(XParam,<sp/>XModel,<sp/>XForcing,<sp/>XModel_g);</highlight></codeline>
<codeline lineno="4758"><highlight class="normal"></highlight></codeline>
<codeline lineno="4759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Run<sp/>first<sp/>full<sp/>step<sp/>(i.e.<sp/>2<sp/>half<sp/>steps)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4760"><highlight class="normal"></highlight></codeline>
<codeline lineno="4761"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structLoop" kindref="compound">Loop&lt;T&gt;</ref><sp/>XLoop<sp/>=<sp/>InitLoop(XParam,<sp/>XModel);</highlight></codeline>
<codeline lineno="4762"><highlight class="normal"></highlight></codeline>
<codeline lineno="4763"><highlight class="normal"></highlight></codeline>
<codeline lineno="4764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//FlowCPU(XParam,<sp/>XLoop,<sp/>XForcing,<sp/>XModel);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//HalfStepCPU(XParam,<sp/>XLoop,<sp/>XForcing,<sp/>XModel);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.conserveElevation)</highlight></codeline>
<codeline lineno="4767"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refine_linear(XParam,<sp/>XModel.blocks,<sp/>XModel.zb,<sp/>XModel.grad.dzbdx,<sp/>XModel.grad.dzbdy);</highlight></codeline>
<codeline lineno="4769"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4770"><highlight class="normal"></highlight></codeline>
<codeline lineno="4771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//HalfStepGPU(XParam,<sp/>XLoop,<sp/>XForcing,<sp/>XModel_g);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4772"><highlight class="normal"></highlight></codeline>
<codeline lineno="4773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.conserveElevation)</highlight></codeline>
<codeline lineno="4774"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refine_linearGPU(XParam,<sp/>XModel_g.blocks,<sp/>XModel_g.zb,<sp/>XModel_g.grad.dzbdx,<sp/>XModel_g.grad.dzbdy);</highlight></codeline>
<codeline lineno="4776"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4777"><highlight class="normal"></highlight></codeline>
<codeline lineno="4778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//for<sp/>(int<sp/>ivar<sp/>=<sp/>0;<sp/>ivar<sp/>&lt;<sp/>XParam.outvars.size();<sp/>ivar++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>CUDA_CHECK(cudaMemcpy(XModel.OutputVarMap[XParam.outvars[ivar]],<sp/>XModel_g.OutputVarMap[XParam.outvars[ivar]],<sp/>XParam.nblkmem<sp/>*<sp/>XParam.blksize<sp/>*<sp/>sizeof(T),<sp/>cudaMemcpyDeviceToHost));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4782"><highlight class="normal"></highlight></codeline>
<codeline lineno="4783"><highlight class="normal"><sp/><sp/><sp/><sp/>CompareCPUvsGPU(XParam,<sp/>XModel,<sp/>XModel_g,<sp/>XParam.outvars,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4784"><highlight class="normal"></highlight></codeline>
<codeline lineno="4785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//T<sp/>maxu<sp/>=<sp/>std::numeric_limits&lt;float&gt;::min();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//T<sp/>maxv<sp/>=<sp/>std::numeric_limits&lt;float&gt;::min();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4788"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>ibl<sp/>=<sp/>0;<sp/>ibl<sp/>&lt;<sp/>XParam.nblk;<sp/>ibl++)</highlight></codeline>
<codeline lineno="4789"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4790"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>ib<sp/>=<sp/>XModel.blocks.active[ibl];</highlight></codeline>
<codeline lineno="4791"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>iy<sp/>=<sp/>0;<sp/>iy<sp/>&lt;<sp/>XParam.blkwidth;<sp/>iy++)</highlight></codeline>
<codeline lineno="4792"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4793"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>ix<sp/>=<sp/>0;<sp/>ix<sp/>&lt;<sp/>XParam.blkwidth;<sp/>ix++)</highlight></codeline>
<codeline lineno="4794"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4795"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>i<sp/>=<sp/>memloc(XParam.halowidth,<sp/>XParam.blkmemwidth,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="4796"><highlight class="comment"></highlight></codeline>
<codeline lineno="4797"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxu<sp/>=<sp/>max(maxu,<sp/>abs(XModel.evolv.u[i]));</highlight></codeline>
<codeline lineno="4798"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxv<sp/>=<sp/>max(maxv,<sp/>abs(XModel.evolv.v[i]));</highlight></codeline>
<codeline lineno="4799"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4800"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4801"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4802"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>test<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4804"><highlight class="normal"></highlight></codeline>
<codeline lineno="4805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//test<sp/>=<sp/>true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4806"><highlight class="normal"></highlight></codeline>
<codeline lineno="4807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//InitSave2Netcdf(XParam,<sp/>XModel);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4808"><highlight class="normal"></highlight></codeline>
<codeline lineno="4809"><highlight class="normal"></highlight></codeline>
<codeline lineno="4810"><highlight class="normal"></highlight></codeline>
<codeline lineno="4811"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4812"><highlight class="normal"></highlight></codeline>
<codeline lineno="4813"><highlight class="normal"></highlight></codeline>
<codeline lineno="4814"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TestAIObnd(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref><sp/>XModel,<sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref><sp/>XModel_g,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bottop,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flip,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>withaoi)</highlight></codeline>
<codeline lineno="4815"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4816"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structForcing" kindref="compound">Forcing&lt;float&gt;</ref><sp/>XForcing;</highlight></codeline>
<codeline lineno="4817"><highlight class="normal"></highlight></codeline>
<codeline lineno="4818"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing<sp/>=<sp/>MakValleyBathy(XParam,<sp/>T(0.4),<sp/>bottop,<sp/>flip);</highlight></codeline>
<codeline lineno="4819"><highlight class="normal"></highlight></codeline>
<codeline lineno="4820"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.conserveElevation<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4821"><highlight class="normal"></highlight></codeline>
<codeline lineno="4822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>maxtopo<sp/>=<sp/>std::numeric_limits&lt;float&gt;::min();</highlight></codeline>
<codeline lineno="4823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mintopo<sp/>=<sp/>std::numeric_limits&lt;float&gt;::max();</highlight></codeline>
<codeline lineno="4824"><highlight class="normal"></highlight></codeline>
<codeline lineno="4825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>XForcing.Bathy[0].ny;<sp/>j++)</highlight></codeline>
<codeline lineno="4826"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>XForcing.Bathy[0].nx;<sp/>i++)</highlight></codeline>
<codeline lineno="4828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxtopo<sp/>=<sp/>max(XForcing.Bathy[0].val[i<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].nx],<sp/>maxtopo);</highlight></codeline>
<codeline lineno="4830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mintopo<sp/>=<sp/>min(XForcing.Bathy[0].val[i<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].nx],<sp/>mintopo);</highlight></codeline>
<codeline lineno="4831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4832"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4833"><highlight class="normal"></highlight></codeline>
<codeline lineno="4834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Overrule<sp/>whatever<sp/>may<sp/>be<sp/>set<sp/>in<sp/>the<sp/>param<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4835"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.xmax<sp/>=<sp/>XForcing.Bathy[0].xmax;</highlight></codeline>
<codeline lineno="4836"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.ymax<sp/>=<sp/>XForcing.Bathy[0].ymax;</highlight></codeline>
<codeline lineno="4837"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.xo<sp/>=<sp/>XForcing.Bathy[0].xo;</highlight></codeline>
<codeline lineno="4838"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.yo<sp/>=<sp/>XForcing.Bathy[0].yo;</highlight></codeline>
<codeline lineno="4839"><highlight class="normal"></highlight></codeline>
<codeline lineno="4840"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.dx<sp/>=<sp/>XForcing.Bathy[0].dx;</highlight></codeline>
<codeline lineno="4841"><highlight class="normal"></highlight></codeline>
<codeline lineno="4842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//XParam.zsinit<sp/>=<sp/>mintopo<sp/>-<sp/>6.9;//<sp/>Had<sp/>a<sp/>water<sp/>level<sp/>so<sp/>that<sp/>the<sp/>wet<sp/>and<sp/>dry<sp/>affects<sp/>the<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4843"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.zsinit<sp/>=<sp/>mintopo<sp/>-<sp/>9.9;</highlight><highlight class="comment">//<sp/>Had<sp/>a<sp/>water<sp/>level<sp/>so<sp/>that<sp/>the<sp/>wet<sp/>and<sp/>dry<sp/>affects<sp/>the<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4844"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.endtime<sp/>=<sp/>20.0;</highlight></codeline>
<codeline lineno="4845"><highlight class="normal"></highlight></codeline>
<codeline lineno="4846"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.dtmin<sp/>=<sp/>0.00000001;</highlight></codeline>
<codeline lineno="4847"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.aoibnd<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4848"><highlight class="normal"></highlight></codeline>
<codeline lineno="4849"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.outputtimestep<sp/>=<sp/>XParam.endtime;</highlight></codeline>
<codeline lineno="4850"><highlight class="normal"></highlight></codeline>
<codeline lineno="4851"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ofstream<sp/>aoi_file(</highlight></codeline>
<codeline lineno="4852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;testaoi.tmp&quot;</highlight><highlight class="normal">,<sp/>std::ios_base::out<sp/>|<sp/>std::ios_base::trunc);</highlight></codeline>
<codeline lineno="4853"><highlight class="normal"><sp/><sp/><sp/><sp/>aoi_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;5.0<sp/>3.0&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="4854"><highlight class="normal"><sp/><sp/><sp/><sp/>aoi_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;27.0<sp/>3.0&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="4855"><highlight class="normal"><sp/><sp/><sp/><sp/>aoi_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;27.0<sp/>27.0&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="4856"><highlight class="normal"><sp/><sp/><sp/><sp/>aoi_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;5.0<sp/>27.0&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="4857"><highlight class="normal"><sp/><sp/><sp/><sp/>aoi_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;5.0<sp/>3.0&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="4858"><highlight class="normal"><sp/><sp/><sp/><sp/>aoi_file.close();<sp/></highlight><highlight class="comment">//destructor<sp/>implicitly<sp/>does<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4859"><highlight class="normal"></highlight></codeline>
<codeline lineno="4860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4861"><highlight class="comment"><sp/><sp/><sp/><sp/>std::ofstream<sp/>aoi_file(</highlight></codeline>
<codeline lineno="4862"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;testaoi.tmp&quot;,<sp/>std::ios_base::out<sp/>|<sp/>std::ios_base::trunc);</highlight></codeline>
<codeline lineno="4863"><highlight class="comment"><sp/><sp/><sp/><sp/>aoi_file<sp/>&lt;&lt;<sp/>&quot;-5.0<sp/>-3.0&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="4864"><highlight class="comment"><sp/><sp/><sp/><sp/>aoi_file<sp/>&lt;&lt;<sp/>&quot;27.0<sp/>-3.0&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="4865"><highlight class="comment"><sp/><sp/><sp/><sp/>aoi_file<sp/>&lt;&lt;<sp/>&quot;27.0<sp/>270.0&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="4866"><highlight class="comment"><sp/><sp/><sp/><sp/>aoi_file<sp/>&lt;&lt;<sp/>&quot;-5.0<sp/>270.0&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="4867"><highlight class="comment"><sp/><sp/><sp/><sp/>aoi_file<sp/>&lt;&lt;<sp/>&quot;-5.0<sp/>-3.0&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="4868"><highlight class="comment"><sp/><sp/><sp/><sp/>aoi_file.close();<sp/>//destructor<sp/>implicitly<sp/>does<sp/>it</highlight></codeline>
<codeline lineno="4869"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(withaoi)</highlight></codeline>
<codeline lineno="4871"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.AOI.file<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;testaoi.tmp&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.AOI.active<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.AOI.poly<sp/>=<sp/>readPolygon(XForcing.AOI.file);</highlight></codeline>
<codeline lineno="4875"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4877"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(bottop==false<sp/>&amp;&amp;<sp/>flip==false)</highlight></codeline>
<codeline lineno="4878"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4879"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.left.type<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4880"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4881"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(bottop<sp/>==<sp/>false<sp/>&amp;&amp;<sp/>flip<sp/>==<sp/>true)</highlight></codeline>
<codeline lineno="4882"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4883"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.right.type<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4884"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4885"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(bottop<sp/>==<sp/>true<sp/>&amp;&amp;<sp/>flip<sp/>==<sp/>false)</highlight></codeline>
<codeline lineno="4886"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4887"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.bot.type<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4888"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4889"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(bottop<sp/>==<sp/>true<sp/>&amp;&amp;<sp/>flip<sp/>==<sp/>true)</highlight></codeline>
<codeline lineno="4890"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4891"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.top.type<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4892"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4893"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4894"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.minlevel<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="4895"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.maxlevel<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="4896"><highlight class="normal"><sp/><sp/><sp/><sp/>XParam.initlevel<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="4897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4898"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>coarse<sp/>to<sp/>fine</highlight></codeline>
<codeline lineno="4899"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Change<sp/>arg<sp/>1<sp/>and<sp/>2<sp/>if<sp/>the<sp/>slope<sp/>is<sp/>changed</highlight></codeline>
<codeline lineno="4900"><highlight class="comment"><sp/><sp/><sp/><sp/>XParam.AdaptCrit<sp/>=<sp/>&quot;Targetlevel&quot;;</highlight></codeline>
<codeline lineno="4901"><highlight class="comment"><sp/><sp/><sp/><sp/>XParam.Adapt_arg1<sp/>=<sp/>&quot;&quot;;</highlight></codeline>
<codeline lineno="4902"><highlight class="comment"><sp/><sp/><sp/><sp/>XParam.Adapt_arg2<sp/>=<sp/>&quot;&quot;;</highlight></codeline>
<codeline lineno="4903"><highlight class="comment"><sp/><sp/><sp/><sp/>XParam.Adapt_arg3<sp/>=<sp/>&quot;&quot;;</highlight></codeline>
<codeline lineno="4904"><highlight class="comment"></highlight></codeline>
<codeline lineno="4905"><highlight class="comment"><sp/><sp/><sp/><sp/>StaticForcingP&lt;int&gt;<sp/>targetlevel;</highlight></codeline>
<codeline lineno="4906"><highlight class="comment"><sp/><sp/><sp/><sp/>XForcing.targetadapt.push_back(targetlevel);</highlight></codeline>
<codeline lineno="4907"><highlight class="comment"></highlight></codeline>
<codeline lineno="4908"><highlight class="comment"><sp/><sp/><sp/><sp/>XForcing.targetadapt[0].xo<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="4909"><highlight class="comment"><sp/><sp/><sp/><sp/>XForcing.targetadapt[0].yo<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="4910"><highlight class="comment"></highlight></codeline>
<codeline lineno="4911"><highlight class="comment"><sp/><sp/><sp/><sp/>XForcing.targetadapt[0].xmax<sp/>=<sp/>31.0;</highlight></codeline>
<codeline lineno="4912"><highlight class="comment"><sp/><sp/><sp/><sp/>XForcing.targetadapt[0].ymax<sp/>=<sp/>31.0;</highlight></codeline>
<codeline lineno="4913"><highlight class="comment"><sp/><sp/><sp/><sp/>XForcing.targetadapt[0].nx<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="4914"><highlight class="comment"><sp/><sp/><sp/><sp/>XForcing.targetadapt[0].ny<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="4915"><highlight class="comment"></highlight></codeline>
<codeline lineno="4916"><highlight class="comment"><sp/><sp/><sp/><sp/>XForcing.targetadapt[0].dx<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="4917"><highlight class="comment"></highlight></codeline>
<codeline lineno="4918"><highlight class="comment"><sp/><sp/><sp/><sp/>AllocateCPU(XForcing.Bathy[0].nx,<sp/>XForcing.Bathy[0].ny,<sp/>XForcing.targetadapt[0].val);</highlight></codeline>
<codeline lineno="4919"><highlight class="comment"></highlight></codeline>
<codeline lineno="4920"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>XForcing.Bathy[0].ny;<sp/>j++)</highlight></codeline>
<codeline lineno="4921"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4922"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>XForcing.Bathy[0].nx;<sp/>i++)</highlight></codeline>
<codeline lineno="4923"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4924"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.targetadapt[0].val[i<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].nx]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4925"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4926"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4927"><highlight class="comment"></highlight></codeline>
<codeline lineno="4928"><highlight class="comment"><sp/><sp/><sp/><sp/>XForcing.targetadapt[0].val[12<sp/>+<sp/>12<sp/>*<sp/>XForcing.Bathy[0].nx]<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="4929"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>rain<sp/>forcing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Create<sp/>a<sp/>temporary<sp/>file<sp/>with<sp/>river<sp/>fluxes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Q<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4933"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ofstream<sp/>river_file(</highlight></codeline>
<codeline lineno="4934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;testriver.tmp&quot;</highlight><highlight class="normal">,<sp/>std::ios_base::out<sp/>|<sp/>std::ios_base::trunc);</highlight></codeline>
<codeline lineno="4935"><highlight class="normal"><sp/><sp/><sp/><sp/>river_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;0.0<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(Q)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="4936"><highlight class="normal"><sp/><sp/><sp/><sp/>river_file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;3600.0<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(Q)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="4937"><highlight class="normal"><sp/><sp/><sp/><sp/>river_file.close();<sp/></highlight><highlight class="comment">//destructor<sp/>implicitly<sp/>does<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4938"><highlight class="normal"></highlight></codeline>
<codeline lineno="4939"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classRiver" kindref="compound">River</ref><sp/>thisriver;</highlight></codeline>
<codeline lineno="4940"><highlight class="normal"><sp/><sp/><sp/><sp/>thisriver.Riverflowfile<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;testriver.tmp&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4941"><highlight class="normal"><sp/><sp/><sp/><sp/>thisriver.xstart<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="4942"><highlight class="normal"><sp/><sp/><sp/><sp/>thisriver.xend<sp/>=<sp/>12;</highlight></codeline>
<codeline lineno="4943"><highlight class="normal"><sp/><sp/><sp/><sp/>thisriver.ystart<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="4944"><highlight class="normal"><sp/><sp/><sp/><sp/>thisriver.yend<sp/>=<sp/>12;</highlight></codeline>
<codeline lineno="4945"><highlight class="normal"></highlight></codeline>
<codeline lineno="4946"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.rivers.push_back(thisriver);</highlight></codeline>
<codeline lineno="4947"><highlight class="normal"></highlight></codeline>
<codeline lineno="4948"><highlight class="normal"></highlight></codeline>
<codeline lineno="4949"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.rivers[0].flowinput<sp/>=<sp/>readFlowfile(XForcing.rivers[0].Riverflowfile,<sp/>XParam.reftime);</highlight></codeline>
<codeline lineno="4950"><highlight class="normal"></highlight></codeline>
<codeline lineno="4951"><highlight class="normal"></highlight></codeline>
<codeline lineno="4952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>Model(s)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4953"><highlight class="normal"></highlight></codeline>
<codeline lineno="4954"><highlight class="normal"><sp/><sp/><sp/><sp/>checkparamsanity(XParam,<sp/>XForcing);</highlight></codeline>
<codeline lineno="4955"><highlight class="normal"></highlight></codeline>
<codeline lineno="4956"><highlight class="normal"><sp/><sp/><sp/><sp/>InitMesh(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="4957"><highlight class="normal"></highlight></codeline>
<codeline lineno="4958"><highlight class="normal"><sp/><sp/><sp/><sp/>InitialConditions(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="4959"><highlight class="normal"></highlight></codeline>
<codeline lineno="4960"><highlight class="normal"><sp/><sp/><sp/><sp/>InitialAdaptation(XParam,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="4961"><highlight class="normal"></highlight></codeline>
<codeline lineno="4962"><highlight class="normal"><sp/><sp/><sp/><sp/>SetupGPU(XParam,<sp/>XModel,<sp/>XForcing,<sp/>XModel_g);</highlight></codeline>
<codeline lineno="4963"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>initVol<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="4964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>0;<sp/>ibl<sp/>&lt;<sp/>XParam.nblk;<sp/>ibl++)</highlight></codeline>
<codeline lineno="4965"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>XModel.blocks.active[ibl];</highlight></codeline>
<codeline lineno="4967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>delta<sp/>=<sp/>calcres(XParam.delta,<sp/>XModel.blocks.level[ib]);</highlight></codeline>
<codeline lineno="4968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy<sp/>=<sp/>0;<sp/>iy<sp/>&lt;<sp/>XParam.blkwidth;<sp/>iy++)</highlight></codeline>
<codeline lineno="4969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>0;<sp/>ix<sp/>&lt;<sp/>(XParam.blkwidth);<sp/>ix++)</highlight></codeline>
<codeline lineno="4971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>memloc(XParam,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="4973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initVol<sp/>=<sp/>initVol<sp/>+<sp/>XModel.evolv.h[i]<sp/>*<sp/>delta<sp/>*<sp/>delta;</highlight></codeline>
<codeline lineno="4974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4976"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4977"><highlight class="normal"></highlight></codeline>
<codeline lineno="4978"><highlight class="normal"></highlight></codeline>
<codeline lineno="4979"><highlight class="normal"><sp/><sp/><sp/><sp/>MainLoop(XParam,<sp/>XForcing,<sp/>XModel,<sp/>XModel_g);</highlight></codeline>
<codeline lineno="4980"><highlight class="normal"></highlight></codeline>
<codeline lineno="4981"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>TheoryInput<sp/>=<sp/>Q<sp/>*<sp/>XParam.endtime;</highlight></codeline>
<codeline lineno="4982"><highlight class="normal"></highlight></codeline>
<codeline lineno="4983"><highlight class="normal"></highlight></codeline>
<codeline lineno="4984"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>SimulatedVolume<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="4985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>0;<sp/>ibl<sp/>&lt;<sp/>XParam.nblk;<sp/>ibl++)</highlight></codeline>
<codeline lineno="4986"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>XModel.blocks.active[ibl];</highlight></codeline>
<codeline lineno="4988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>delta<sp/>=<sp/>calcres(XParam.delta,<sp/>XModel.blocks.level[ib]);</highlight></codeline>
<codeline lineno="4989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy<sp/>=<sp/>0;<sp/>iy<sp/>&lt;<sp/>XParam.blkwidth;<sp/>iy++)</highlight></codeline>
<codeline lineno="4990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>0;<sp/>ix<sp/>&lt;<sp/>(XParam.blkwidth);<sp/>ix++)</highlight></codeline>
<codeline lineno="4992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>memloc(XParam,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="4994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SimulatedVolume<sp/>=<sp/>SimulatedVolume<sp/>+<sp/>XModel.evolv.h[i]<sp/>*<sp/>delta<sp/>*<sp/>delta;</highlight></codeline>
<codeline lineno="4995"><highlight class="normal"></highlight></codeline>
<codeline lineno="4996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4998"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4999"><highlight class="normal"></highlight></codeline>
<codeline lineno="5000"><highlight class="normal"><sp/><sp/><sp/><sp/>SimulatedVolume<sp/>=<sp/>SimulatedVolume<sp/>-<sp/>initVol;</highlight></codeline>
<codeline lineno="5001"><highlight class="normal"></highlight></codeline>
<codeline lineno="5002"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>error<sp/>=<sp/>abs(SimulatedVolume<sp/>-<sp/>TheoryInput);</highlight></codeline>
<codeline lineno="5003"><highlight class="normal"></highlight></codeline>
<codeline lineno="5004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>modelgood<sp/>=<sp/>error<sp/>/<sp/>TheoryInput<sp/>&lt;<sp/>0.001;</highlight></codeline>
<codeline lineno="5005"><highlight class="normal"></highlight></codeline>
<codeline lineno="5006"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\nSim<sp/>Vol<sp/>=<sp/>%f,<sp/>theory=%f,<sp/>Error<sp/>=<sp/>%f,<sp/>(%f<sp/>%%)<sp/>\n&quot;</highlight><highlight class="normal">,<sp/>SimulatedVolume,<sp/>TheoryInput,<sp/>error,<sp/>(error<sp/>/<sp/>TheoryInput)<sp/>*<sp/>100);</highlight></codeline>
<codeline lineno="5007"><highlight class="normal"></highlight></codeline>
<codeline lineno="5008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//log(&quot;#####&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>modelgood;</highlight></codeline>
<codeline lineno="5010"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5011"><highlight class="normal"></highlight></codeline>
<codeline lineno="5012"><highlight class="normal"></highlight></codeline>
<codeline lineno="5013"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/>__global__<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vectoroffsetGPU(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx,<sp/>T<sp/>offset,<sp/>T*<sp/>z)</highlight></codeline>
<codeline lineno="5014"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>blockIdx.x<sp/>*<sp/>blockDim.x<sp/>+<sp/>threadIdx.x;</highlight></codeline>
<codeline lineno="5016"><highlight class="normal"></highlight></codeline>
<codeline lineno="5017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx<sp/>&lt;<sp/>nx)</highlight></codeline>
<codeline lineno="5018"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z[idx]<sp/>=<sp/>z[idx]<sp/>+<sp/>offset;</highlight></codeline>
<codeline lineno="5020"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5021"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5022"><highlight class="normal"></highlight></codeline>
<codeline lineno="5023"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TestPinMem(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref><sp/>XModel,<sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref><sp/>XModel_g)</highlight></codeline>
<codeline lineno="5024"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5025"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/>zf,<sp/>*zf_g,<sp/>*<sp/>zf_recov;</highlight></codeline>
<codeline lineno="5026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="5027"><highlight class="normal"></highlight></codeline>
<codeline lineno="5028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nx<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="5029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ny<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="5030"><highlight class="normal"></highlight></codeline>
<codeline lineno="5031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nelem<sp/>=<sp/>nx<sp/>*<sp/>ny;</highlight></codeline>
<codeline lineno="5032"><highlight class="normal"></highlight></codeline>
<codeline lineno="5033"><highlight class="normal"></highlight></codeline>
<codeline lineno="5034"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateMappedMemCPU(nx,<sp/>ny,<sp/>XParam.GPUDEVICE,<sp/>zf);</highlight></codeline>
<codeline lineno="5035"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="5036"><highlight class="normal"></highlight></codeline>
<codeline lineno="5037"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(nx,<sp/>ny,<sp/>zf_recov);</highlight></codeline>
<codeline lineno="5038"><highlight class="normal"></highlight></codeline>
<codeline lineno="5039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nx;<sp/>i++)</highlight></codeline>
<codeline lineno="5040"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>ny;<sp/>j++)</highlight></codeline>
<codeline lineno="5042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zf[i<sp/>+<sp/>j<sp/>*<sp/>nx]<sp/>=<sp/>i<sp/>+<sp/>j<sp/>*<sp/>nx<sp/>+T(0.25);</highlight></codeline>
<codeline lineno="5044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="5045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5046"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5047"><highlight class="normal"></highlight></codeline>
<codeline lineno="5048"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>checkrem<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="5049"><highlight class="normal"></highlight></codeline>
<codeline lineno="5050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XParam.GPUDEVICE<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="5051"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocateMappedMemGPU(nx,<sp/>ny,<sp/>XParam.GPUDEVICE,<sp/>zf_g,<sp/>zf);</highlight></codeline>
<codeline lineno="5053"><highlight class="normal"></highlight></codeline>
<codeline lineno="5054"><highlight class="normal"></highlight></codeline>
<codeline lineno="5055"><highlight class="normal"></highlight></codeline>
<codeline lineno="5056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dim3<sp/>block(16);</highlight></codeline>
<codeline lineno="5057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dim3<sp/>grid((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)ceil(nelem<sp/>/<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)block.x));</highlight></codeline>
<codeline lineno="5058"><highlight class="normal"></highlight></codeline>
<codeline lineno="5059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vectoroffsetGPU<sp/>&lt;&lt;&lt;grid,<sp/>block<sp/>&gt;&gt;&gt;<sp/>(nelem,<sp/>T(1.0),<sp/>zf_g);</highlight></codeline>
<codeline lineno="5060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CUDA_CHECK(cudaDeviceSynchronize());</highlight></codeline>
<codeline lineno="5061"><highlight class="normal"></highlight></codeline>
<codeline lineno="5062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CUDA_CHECK(cudaMemcpy(zf_recov,<sp/>zf_g,<sp/>nx<sp/>*<sp/>ny<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T),<sp/>cudaMemcpyDeviceToHost));</highlight></codeline>
<codeline lineno="5063"><highlight class="normal"></highlight></codeline>
<codeline lineno="5064"><highlight class="normal"></highlight></codeline>
<codeline lineno="5065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="5066"><highlight class="normal"></highlight></codeline>
<codeline lineno="5067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nx;<sp/>i++)</highlight></codeline>
<codeline lineno="5068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>ny;<sp/>j++)</highlight></codeline>
<codeline lineno="5070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5071"><highlight class="normal"></highlight></codeline>
<codeline lineno="5072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>checkrem<sp/>=<sp/>checkrem<sp/>+<sp/>abs(zf[i<sp/>+<sp/>j<sp/>*<sp/>nx]<sp/>-<sp/>zf_recov[i<sp/>+<sp/>j<sp/>*<sp/>nx]);</highlight></codeline>
<codeline lineno="5073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5075"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>modelgood<sp/>=<sp/>checkrem<sp/>&lt;<sp/>1.e-6f;</highlight></codeline>
<codeline lineno="5077"><highlight class="normal"></highlight></codeline>
<codeline lineno="5078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(checkrem<sp/>&gt;<sp/>1.e-6f)</highlight></codeline>
<codeline lineno="5079"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n<sp/>Test<sp/>Failed<sp/>error<sp/>=<sp/>%e<sp/>\n&quot;</highlight><highlight class="normal">,<sp/>checkrem);</highlight></codeline>
<codeline lineno="5081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>modelgood;</highlight></codeline>
<codeline lineno="5082"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5084"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n<sp/>Test<sp/>Success<sp/>error<sp/>=<sp/>%e<sp/>\n&quot;</highlight><highlight class="normal">,<sp/>checkrem);</highlight></codeline>
<codeline lineno="5086"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5087"><highlight class="normal"></highlight></codeline>
<codeline lineno="5088"><highlight class="normal"></highlight></codeline>
<codeline lineno="5089"><highlight class="normal"></highlight></codeline>
<codeline lineno="5090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>modelgood;</highlight></codeline>
<codeline lineno="5091"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5092"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TestPinMem&lt;float&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structModel" kindref="compound">Model&lt;float&gt;</ref><sp/>XModel,<sp/><ref refid="structModel" kindref="compound">Model&lt;float&gt;</ref><sp/>XModel_g);</highlight></codeline>
<codeline lineno="5093"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TestPinMem&lt;double&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structModel" kindref="compound">Model&lt;double&gt;</ref><sp/>XModel,<sp/><ref refid="structModel" kindref="compound">Model&lt;double&gt;</ref><sp/>XModel_g);</highlight></codeline>
<codeline lineno="5094"><highlight class="normal"></highlight></codeline>
<codeline lineno="5095"><highlight class="normal"></highlight></codeline>
<codeline lineno="5096"><highlight class="normal"></highlight></codeline>
<codeline lineno="5097"><highlight class="normal"></highlight></codeline>
<codeline lineno="5098"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/><ref refid="structForcing" kindref="compound">Forcing&lt;float&gt;</ref><sp/>MakValleyBathy(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/>T<sp/>slope,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bottop,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flip)</highlight></codeline>
<codeline lineno="5099"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5101"><highlight class="normal"></highlight></codeline>
<codeline lineno="5102"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structForcing" kindref="compound">Forcing&lt;float&gt;</ref><sp/>XForcing;</highlight></codeline>
<codeline lineno="5103"><highlight class="normal"></highlight></codeline>
<codeline lineno="5104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structStaticForcingP" kindref="compound">StaticForcingP&lt;float&gt;</ref><sp/>bathy;</highlight></codeline>
<codeline lineno="5105"><highlight class="normal"></highlight></codeline>
<codeline lineno="5106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>dummybathy;</highlight></codeline>
<codeline lineno="5107"><highlight class="normal"></highlight></codeline>
<codeline lineno="5108"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy.push_back(bathy);</highlight></codeline>
<codeline lineno="5109"><highlight class="normal"></highlight></codeline>
<codeline lineno="5110"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].xo<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="5111"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].yo<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="5112"><highlight class="normal"></highlight></codeline>
<codeline lineno="5113"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].xmax<sp/>=<sp/>31.0;</highlight></codeline>
<codeline lineno="5114"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].ymax<sp/>=<sp/>31.0;</highlight></codeline>
<codeline lineno="5115"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].nx<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="5116"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].ny<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="5117"><highlight class="normal"></highlight></codeline>
<codeline lineno="5118"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].dx<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="5119"><highlight class="normal"><sp/><sp/><sp/><sp/>XForcing.Bathy[0].dy<sp/>=<sp/>XForcing.Bathy[0].dx;</highlight></codeline>
<codeline lineno="5120"><highlight class="normal"></highlight></codeline>
<codeline lineno="5121"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="5122"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>center<sp/>=<sp/>T(10.5);</highlight></codeline>
<codeline lineno="5123"><highlight class="normal"></highlight></codeline>
<codeline lineno="5124"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(1,<sp/>1,<sp/>XForcing.left.blks,<sp/>XForcing.right.blks,<sp/>XForcing.top.blks,<sp/>XForcing.bot.blks);</highlight></codeline>
<codeline lineno="5125"><highlight class="normal"></highlight></codeline>
<codeline lineno="5126"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(XForcing.Bathy[0].nx,<sp/>XForcing.Bathy[0].ny,<sp/>XForcing.Bathy[0].val);</highlight></codeline>
<codeline lineno="5127"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(XForcing.Bathy[0].nx,<sp/>XForcing.Bathy[0].ny,<sp/>dummybathy);</highlight></codeline>
<codeline lineno="5128"><highlight class="normal"></highlight></codeline>
<codeline lineno="5129"><highlight class="normal"></highlight></codeline>
<codeline lineno="5130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>maxtopo<sp/>=<sp/>std::numeric_limits&lt;float&gt;::min();</highlight></codeline>
<codeline lineno="5131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mintopo<sp/>=<sp/>std::numeric_limits&lt;float&gt;::max();</highlight></codeline>
<codeline lineno="5132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>XForcing.Bathy[0].ny;<sp/>j++)</highlight></codeline>
<codeline lineno="5133"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>XForcing.Bathy[0].nx;<sp/>i++)</highlight></codeline>
<codeline lineno="5135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>T(XForcing.Bathy[0].xo<sp/>+<sp/>i<sp/>*<sp/>XForcing.Bathy[0].dx);</highlight></codeline>
<codeline lineno="5137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>T(XForcing.Bathy[0].yo<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].dx);</highlight></codeline>
<codeline lineno="5138"><highlight class="normal"></highlight></codeline>
<codeline lineno="5139"><highlight class="normal"></highlight></codeline>
<codeline lineno="5140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dummybathy[i<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].nx]<sp/>=<sp/>float(ValleyBathy(y,<sp/>x,<sp/>slope,<sp/>center));</highlight></codeline>
<codeline lineno="5141"><highlight class="normal"></highlight></codeline>
<codeline lineno="5142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxtopo<sp/>=<sp/>max(dummybathy[i<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].nx],<sp/>maxtopo);</highlight></codeline>
<codeline lineno="5143"><highlight class="normal"></highlight></codeline>
<codeline lineno="5144"><highlight class="normal"></highlight></codeline>
<codeline lineno="5145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5147"><highlight class="normal"></highlight></codeline>
<codeline lineno="5148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>surrounding<sp/>wall</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>XForcing.Bathy[0].ny;<sp/>j++)</highlight></codeline>
<codeline lineno="5150"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5151"><highlight class="normal"></highlight></codeline>
<codeline lineno="5152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dummybathy[0<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].nx]<sp/>=<sp/>maxtopo<sp/>+<sp/>5.0f;</highlight></codeline>
<codeline lineno="5153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dummybathy[1<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].nx]<sp/>=<sp/>maxtopo<sp/>+<sp/>5.0f;</highlight></codeline>
<codeline lineno="5154"><highlight class="normal"></highlight></codeline>
<codeline lineno="5155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dummybathy[j<sp/>+<sp/>0<sp/>*<sp/>XForcing.Bathy[0].nx]<sp/>=<sp/>maxtopo<sp/>+<sp/>5.0f;</highlight></codeline>
<codeline lineno="5156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dummybathy[j<sp/>+<sp/>1<sp/>*<sp/>XForcing.Bathy[0].nx]<sp/>=<sp/>maxtopo<sp/>+<sp/>5.0f;</highlight></codeline>
<codeline lineno="5157"><highlight class="normal"></highlight></codeline>
<codeline lineno="5158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dummybathy[(XForcing.Bathy[0].nx<sp/>-<sp/>1)<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].nx]<sp/>=<sp/>maxtopo<sp/>+<sp/>5.0f;</highlight></codeline>
<codeline lineno="5159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dummybathy[(XForcing.Bathy[0].nx<sp/>-<sp/>2)<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].nx]<sp/>=<sp/>maxtopo<sp/>+<sp/>5.0f;</highlight></codeline>
<codeline lineno="5160"><highlight class="normal"></highlight></codeline>
<codeline lineno="5161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dummybathy[j<sp/>+<sp/>(XForcing.Bathy[0].ny<sp/>-<sp/>1)<sp/>*<sp/>XForcing.Bathy[0].nx]<sp/>=<sp/>maxtopo<sp/>+<sp/>5.0f;</highlight></codeline>
<codeline lineno="5162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dummybathy[j<sp/>+<sp/>(XForcing.Bathy[0].ny<sp/>-<sp/>2)<sp/>*<sp/>XForcing.Bathy[0].nx]<sp/>=<sp/>maxtopo<sp/>+<sp/>5.0f;</highlight></codeline>
<codeline lineno="5163"><highlight class="normal"></highlight></codeline>
<codeline lineno="5164"><highlight class="normal"></highlight></codeline>
<codeline lineno="5165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5166"><highlight class="normal"></highlight></codeline>
<codeline lineno="5167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>a<sp/>specially<sp/>elevated<sp/>spot<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5168"><highlight class="normal"></highlight></codeline>
<codeline lineno="5169"><highlight class="normal"><sp/><sp/><sp/><sp/>dummybathy[(XForcing.Bathy[0].nx<sp/>-<sp/>1)<sp/>+<sp/>0<sp/>*<sp/>XForcing.Bathy[0].nx]<sp/>=<sp/>maxtopo<sp/>+<sp/>10.0f;</highlight></codeline>
<codeline lineno="5170"><highlight class="normal"><sp/><sp/><sp/><sp/>dummybathy[(XForcing.Bathy[0].nx<sp/>-<sp/>2)<sp/>+<sp/>0<sp/>*<sp/>XForcing.Bathy[0].nx]<sp/>=<sp/>maxtopo<sp/>+<sp/>10.0f;</highlight></codeline>
<codeline lineno="5171"><highlight class="normal"></highlight></codeline>
<codeline lineno="5172"><highlight class="normal"><sp/><sp/><sp/><sp/>dummybathy[(XForcing.Bathy[0].nx<sp/>-<sp/>1)<sp/>+<sp/>1<sp/>*<sp/>XForcing.Bathy[0].nx]<sp/>=<sp/>maxtopo<sp/>+<sp/>10.0f;</highlight></codeline>
<codeline lineno="5173"><highlight class="normal"><sp/><sp/><sp/><sp/>dummybathy[(XForcing.Bathy[0].nx<sp/>-<sp/>2)<sp/>+<sp/>1<sp/>*<sp/>XForcing.Bathy[0].nx]<sp/>=<sp/>maxtopo<sp/>+<sp/>10.0f;</highlight></codeline>
<codeline lineno="5174"><highlight class="normal"></highlight></codeline>
<codeline lineno="5175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>XForcing.Bathy[0].ny;<sp/>j++)</highlight></codeline>
<codeline lineno="5176"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>XForcing.Bathy[0].nx;<sp/>i++)</highlight></codeline>
<codeline lineno="5178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mintopo<sp/>=<sp/>min(dummybathy[i<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].nx],<sp/>mintopo);</highlight></codeline>
<codeline lineno="5180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5181"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5182"><highlight class="normal"></highlight></codeline>
<codeline lineno="5183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Flip<sp/>or<sp/>rotate<sp/>the<sp/>bathy<sp/>according<sp/>to<sp/>what<sp/>is<sp/>requested</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>XForcing.Bathy[0].ny;<sp/>j++)</highlight></codeline>
<codeline lineno="5185"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>XForcing.Bathy[0].nx;<sp/>i++)</highlight></codeline>
<codeline lineno="5187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!flip<sp/>&amp;&amp;<sp/>!bottop)</highlight></codeline>
<codeline lineno="5189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.Bathy[0].val[i<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].nx]<sp/>=<sp/>dummybathy[i<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].nx];</highlight></codeline>
<codeline lineno="5191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flip<sp/>&amp;&amp;<sp/>!bottop)</highlight></codeline>
<codeline lineno="5193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.Bathy[0].val[(XForcing.Bathy[0].nx<sp/>-<sp/>1<sp/>-<sp/>i)<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].nx]<sp/>=<sp/>dummybathy[i<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].nx];</highlight></codeline>
<codeline lineno="5195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!flip<sp/>&amp;&amp;<sp/>bottop)</highlight></codeline>
<codeline lineno="5197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.Bathy[0].val[i<sp/>+<sp/>j<sp/>*<sp/>XForcing.Bathy[0].nx]<sp/>=<sp/>dummybathy[j<sp/>+<sp/>i<sp/>*<sp/>XForcing.Bathy[0].nx];</highlight></codeline>
<codeline lineno="5199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flip<sp/>&amp;&amp;<sp/>bottop)</highlight></codeline>
<codeline lineno="5201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XForcing.Bathy[0].val[i<sp/>+<sp/>(XForcing.Bathy[0].ny<sp/>-<sp/>1<sp/>-<sp/>j)<sp/>*<sp/>XForcing.Bathy[0].nx]<sp/>=<sp/>dummybathy[j<sp/>+<sp/>i<sp/>*<sp/>XForcing.Bathy[0].nx];</highlight></codeline>
<codeline lineno="5203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5206"><highlight class="normal"></highlight></codeline>
<codeline lineno="5207"><highlight class="normal"><sp/><sp/><sp/><sp/>free(dummybathy);</highlight></codeline>
<codeline lineno="5208"><highlight class="normal"></highlight></codeline>
<codeline lineno="5209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>XForcing;</highlight></codeline>
<codeline lineno="5210"><highlight class="normal"></highlight></codeline>
<codeline lineno="5211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5212"><highlight class="normal"></highlight></codeline>
<codeline lineno="5213"><highlight class="normal"></highlight></codeline>
<codeline lineno="5219"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>alloc_init2Darray(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">**<sp/>arr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NX,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NY)</highlight></codeline>
<codeline lineno="5220"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="5222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Allocation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5223"><highlight class="normal"><sp/><sp/><sp/><sp/>arr<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">**)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)<sp/>*<sp/>NX);</highlight></codeline>
<codeline lineno="5224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NX;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="5225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arr[i]<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>*<sp/>NY);</highlight></codeline>
<codeline lineno="5226"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5227"><highlight class="normal"></highlight></codeline>
<codeline lineno="5228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//arr<sp/>=<sp/>(int<sp/>**)malloc(sizeof(int<sp/>*)<sp/>*<sp/>NX);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//for<sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NX;<sp/>i++)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>arr[i]<sp/>=<sp/>(int<sp/>*)malloc(sizeof(int)<sp/>*<sp/>NY);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Initialisation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NX;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="5234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>NY;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="5235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arr[i][j]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5237"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5239"><highlight class="normal"></highlight></codeline>
<codeline lineno="5245"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init3Darray(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">***<sp/>arr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rows,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cols,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depths)</highlight></codeline>
<codeline lineno="5246"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="5248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>rows;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="5249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>cols;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="5250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>depths;<sp/>k++)</highlight></codeline>
<codeline lineno="5251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arr[i][j][k]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5255"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5257"><highlight class="normal"></highlight></codeline>
<codeline lineno="5263"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fillrandom(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;T&gt;</ref><sp/>XBlock,<sp/>T*<sp/>z)</highlight></codeline>
<codeline lineno="5264"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>0;<sp/>ibl<sp/>&lt;<sp/>XParam.nblk;<sp/>ibl++)</highlight></codeline>
<codeline lineno="5266"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>XBlock.active[ibl];</highlight></codeline>
<codeline lineno="5268"><highlight class="normal"></highlight></codeline>
<codeline lineno="5269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy<sp/>=<sp/>0;<sp/>iy<sp/>&lt;<sp/>XParam.blkwidth;<sp/>iy++)</highlight></codeline>
<codeline lineno="5270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>0;<sp/>ix<sp/>&lt;<sp/>XParam.blkwidth;<sp/>ix++)</highlight></codeline>
<codeline lineno="5272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>memloc(XParam,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="5275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z[n]<sp/>=<sp/>T(rand())<sp/>/<sp/>T(RAND_MAX);</highlight></codeline>
<codeline lineno="5276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5278"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5280"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fillrandom&lt;float&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;float&gt;</ref><sp/>XBlock,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>z);</highlight></codeline>
<codeline lineno="5281"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fillrandom&lt;double&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;double&gt;</ref><sp/>XBlock,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>z);</highlight></codeline>
<codeline lineno="5282"><highlight class="normal"></highlight></codeline>
<codeline lineno="5288"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fillgauss(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;T&gt;</ref><sp/>XBlock,<sp/>T<sp/>amp,<sp/>T*<sp/>z)</highlight></codeline>
<codeline lineno="5289"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5290"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>delta,<sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="5291"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>cc<sp/>=<sp/>T(0.05)<sp/>*<sp/>(XParam.xmax<sp/>-<sp/>XParam.xo);</highlight></codeline>
<codeline lineno="5292"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>xorigin<sp/>=<sp/>XParam.xo<sp/>+<sp/>T(0.5)<sp/>*<sp/>(XParam.xmax<sp/>-<sp/>XParam.xo);</highlight></codeline>
<codeline lineno="5293"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>yorigin<sp/>=<sp/>XParam.yo<sp/>+<sp/>T(0.5)<sp/>*<sp/>(XParam.ymax<sp/>-<sp/>XParam.yo);</highlight></codeline>
<codeline lineno="5294"><highlight class="normal"></highlight></codeline>
<codeline lineno="5295"><highlight class="normal"></highlight></codeline>
<codeline lineno="5296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>0;<sp/>ibl<sp/>&lt;<sp/>XParam.nblk;<sp/>ibl++)</highlight></codeline>
<codeline lineno="5297"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;bl=%d\tblockxo[bl]=%f\tblockyo[bl]=%f\n&quot;,<sp/>bl,<sp/>blockxo[bl],<sp/>blockyo[bl]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>XBlock.active[ibl];</highlight></codeline>
<codeline lineno="5300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delta<sp/>=<sp/>calcres(T(XParam.dx),<sp/>XBlock.level[ib]);</highlight></codeline>
<codeline lineno="5301"><highlight class="normal"></highlight></codeline>
<codeline lineno="5302"><highlight class="normal"></highlight></codeline>
<codeline lineno="5303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy<sp/>=<sp/>0;<sp/>iy<sp/>&lt;<sp/>XParam.blkwidth;<sp/>iy++)</highlight></codeline>
<codeline lineno="5304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>0;<sp/>ix<sp/>&lt;<sp/>XParam.blkwidth;<sp/>ix++)</highlight></codeline>
<codeline lineno="5306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>memloc(XParam,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="5309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>T(XParam.xo<sp/>+<sp/>XBlock.xo[ib]<sp/>+<sp/>ix<sp/>*<sp/>delta);</highlight></codeline>
<codeline lineno="5310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>T(XParam.yo<sp/>+<sp/>XBlock.yo[ib]<sp/>+<sp/>iy<sp/>*<sp/>delta);</highlight></codeline>
<codeline lineno="5311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z[n]<sp/>=<sp/>z[n]<sp/>+<sp/>amp<sp/>*<sp/>exp(T(-1.0)<sp/>*<sp/>T(((x<sp/>-<sp/>xorigin)<sp/>*<sp/>(x<sp/>-<sp/>xorigin)<sp/>+<sp/>(y<sp/>-<sp/>yorigin)<sp/>*<sp/>(y<sp/>-<sp/>yorigin))<sp/>/<sp/>(2.0<sp/>*<sp/>cc<sp/>*<sp/>cc)));</highlight></codeline>
<codeline lineno="5312"><highlight class="normal"></highlight></codeline>
<codeline lineno="5313"><highlight class="normal"></highlight></codeline>
<codeline lineno="5314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5316"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5318"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fillgauss&lt;float&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;float&gt;</ref><sp/>XBlock,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>amp,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>z);</highlight></codeline>
<codeline lineno="5319"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fillgauss&lt;double&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;double&gt;</ref><sp/>XBlock,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>amp,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>z);</highlight></codeline>
<codeline lineno="5320"><highlight class="normal"></highlight></codeline>
<codeline lineno="5325"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="5326"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestingOutput(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref><sp/>XModel)</highlight></codeline>
<codeline lineno="5327"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5328"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>outvar;</highlight></codeline>
<codeline lineno="5329"><highlight class="normal"></highlight></codeline>
<codeline lineno="5330"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structLoop" kindref="compound">Loop&lt;T&gt;</ref><sp/>XLoop;</highlight></codeline>
<codeline lineno="5331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>GPU<sp/>stuff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5332"><highlight class="normal"></highlight></codeline>
<codeline lineno="5333"><highlight class="normal"></highlight></codeline>
<codeline lineno="5334"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop.hugenegval<sp/>=<sp/>std::numeric_limits&lt;T&gt;::min();</highlight></codeline>
<codeline lineno="5335"><highlight class="normal"></highlight></codeline>
<codeline lineno="5336"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop.hugeposval<sp/>=<sp/>std::numeric_limits&lt;T&gt;::max();</highlight></codeline>
<codeline lineno="5337"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop.epsilon<sp/>=<sp/>std::numeric_limits&lt;T&gt;::epsilon();</highlight></codeline>
<codeline lineno="5338"><highlight class="normal"></highlight></codeline>
<codeline lineno="5339"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop.totaltime<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="5340"><highlight class="normal"></highlight></codeline>
<codeline lineno="5341"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop.nextoutputtime<sp/>=<sp/>0.2;</highlight></codeline>
<codeline lineno="5342"><highlight class="normal"></highlight></codeline>
<codeline lineno="5343"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structForcing" kindref="compound">Forcing&lt;float&gt;</ref><sp/>XForcing;</highlight></codeline>
<codeline lineno="5344"><highlight class="normal"></highlight></codeline>
<codeline lineno="5345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//FlowCPU(XParam,<sp/>XLoop,<sp/>XModel);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5346"><highlight class="normal"></highlight></codeline>
<codeline lineno="5347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//log(std::to_string(XForcing.Bathy.val[50]));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5348"><highlight class="normal"><sp/><sp/><sp/><sp/>creatncfileBUQ(XParam,<sp/>XModel.blocks.active,<sp/>XModel.blocks.level,<sp/>XModel.blocks.xo,<sp/>XModel.blocks.yo,<sp/>XModel.blocks.outZone[0]);</highlight></codeline>
<codeline lineno="5349"><highlight class="normal"><sp/><sp/><sp/><sp/>outvar<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;h&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5350"><highlight class="normal"><sp/><sp/><sp/><sp/>defncvarBUQ(XParam,<sp/>XModel.blocks.active,<sp/>XModel.blocks.level,<sp/>XModel.blocks.xo,<sp/>XModel.blocks.yo,<sp/>outvar,<sp/>3,<sp/>XModel.OutputVarMap[outvar],<sp/>XModel.blocks.outZone[0]);</highlight></codeline>
<codeline lineno="5351"><highlight class="normal"><sp/><sp/><sp/><sp/>outvar<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;u&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5352"><highlight class="normal"><sp/><sp/><sp/><sp/>defncvarBUQ(XParam,<sp/>XModel.blocks.active,<sp/>XModel.blocks.level,<sp/>XModel.blocks.xo,<sp/>XModel.blocks.yo,<sp/>outvar,<sp/>3,<sp/>XModel.OutputVarMap[outvar],<sp/>XModel.blocks.outZone[0]);</highlight></codeline>
<codeline lineno="5353"><highlight class="normal"><sp/><sp/><sp/><sp/>outvar<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;v&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//copyID2var(XParam,<sp/>XModel.blocks,<sp/>XModel.OutputVarMap[outvar]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5355"><highlight class="normal"><sp/><sp/><sp/><sp/>defncvarBUQ(XParam,<sp/>XModel.blocks.active,<sp/>XModel.blocks.level,<sp/>XModel.blocks.xo,<sp/>XModel.blocks.yo,<sp/>outvar,<sp/>3,<sp/>XModel.OutputVarMap[outvar],<sp/>XModel.blocks.outZone[0]);</highlight></codeline>
<codeline lineno="5356"><highlight class="normal"><sp/><sp/><sp/><sp/>outvar<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;zb&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5357"><highlight class="normal"><sp/><sp/><sp/><sp/>defncvarBUQ(XParam,<sp/>XModel.blocks.active,<sp/>XModel.blocks.level,<sp/>XModel.blocks.xo,<sp/>XModel.blocks.yo,<sp/>outvar,<sp/>3,<sp/>XModel.OutputVarMap[outvar],<sp/>XModel.blocks.outZone[0]);</highlight></codeline>
<codeline lineno="5358"><highlight class="normal"><sp/><sp/><sp/><sp/>outvar<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;zs&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5359"><highlight class="normal"><sp/><sp/><sp/><sp/>defncvarBUQ(XParam,<sp/>XModel.blocks.active,<sp/>XModel.blocks.level,<sp/>XModel.blocks.xo,<sp/>XModel.blocks.yo,<sp/>outvar,<sp/>3,<sp/>XModel.OutputVarMap[outvar],<sp/>XModel.blocks.outZone[0]);</highlight></codeline>
<codeline lineno="5360"><highlight class="normal"></highlight></codeline>
<codeline lineno="5361"><highlight class="normal"></highlight></codeline>
<codeline lineno="5362"><highlight class="normal"><sp/><sp/><sp/><sp/>FlowCPU(XParam,<sp/>XLoop,<sp/>XForcing,<sp/>XModel);</highlight></codeline>
<codeline lineno="5363"><highlight class="normal"></highlight></codeline>
<codeline lineno="5364"><highlight class="normal"></highlight></codeline>
<codeline lineno="5365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//outvar<sp/>=<sp/>&quot;cf&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//defncvarBUQ(XParam,<sp/>XModel.blocks.active,<sp/>XModel.blocks.level,<sp/>XModel.blocks.xo,<sp/>XModel.blocks.yo,<sp/>outvar,<sp/>3,<sp/>XModel.cf);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5367"><highlight class="normal"><sp/><sp/><sp/><sp/>defncvarBUQ(XParam,<sp/>XModel.blocks.active,<sp/>XModel.blocks.level,<sp/>XModel.blocks.xo,<sp/>XModel.blocks.yo,<sp/></highlight><highlight class="stringliteral">&quot;dhdx&quot;</highlight><highlight class="normal">,<sp/>3,<sp/>XModel.grad.dhdx,<sp/>XModel.blocks.outZone[0]);</highlight></codeline>
<codeline lineno="5368"><highlight class="normal"><sp/><sp/><sp/><sp/>defncvarBUQ(XParam,<sp/>XModel.blocks.active,<sp/>XModel.blocks.level,<sp/>XModel.blocks.xo,<sp/>XModel.blocks.yo,<sp/></highlight><highlight class="stringliteral">&quot;dhdy&quot;</highlight><highlight class="normal">,<sp/>3,<sp/>XModel.grad.dhdy,<sp/>XModel.blocks.outZone[0]);</highlight></codeline>
<codeline lineno="5369"><highlight class="normal"></highlight></codeline>
<codeline lineno="5370"><highlight class="normal"><sp/><sp/><sp/><sp/>defncvarBUQ(XParam,<sp/>XModel.blocks.active,<sp/>XModel.blocks.level,<sp/>XModel.blocks.xo,<sp/>XModel.blocks.yo,<sp/></highlight><highlight class="stringliteral">&quot;Fhv&quot;</highlight><highlight class="normal">,<sp/>3,<sp/>XModel.flux.Fhv,<sp/>XModel.blocks.outZone[0]);</highlight></codeline>
<codeline lineno="5371"><highlight class="normal"><sp/><sp/><sp/><sp/>defncvarBUQ(XParam,<sp/>XModel.blocks.active,<sp/>XModel.blocks.level,<sp/>XModel.blocks.xo,<sp/>XModel.blocks.yo,<sp/></highlight><highlight class="stringliteral">&quot;Fhu&quot;</highlight><highlight class="normal">,<sp/>3,<sp/>XModel.flux.Fhu,<sp/>XModel.blocks.outZone[0]);</highlight></codeline>
<codeline lineno="5372"><highlight class="normal"></highlight></codeline>
<codeline lineno="5373"><highlight class="normal"></highlight></codeline>
<codeline lineno="5374"><highlight class="normal"><sp/><sp/><sp/><sp/>defncvarBUQ(XParam,<sp/>XModel.blocks.active,<sp/>XModel.blocks.level,<sp/>XModel.blocks.xo,<sp/>XModel.blocks.yo,<sp/></highlight><highlight class="stringliteral">&quot;Fqux&quot;</highlight><highlight class="normal">,<sp/>3,<sp/>XModel.flux.Fqux,<sp/>XModel.blocks.outZone[0]);</highlight></codeline>
<codeline lineno="5375"><highlight class="normal"><sp/><sp/><sp/><sp/>defncvarBUQ(XParam,<sp/>XModel.blocks.active,<sp/>XModel.blocks.level,<sp/>XModel.blocks.xo,<sp/>XModel.blocks.yo,<sp/></highlight><highlight class="stringliteral">&quot;Fquy&quot;</highlight><highlight class="normal">,<sp/>3,<sp/>XModel.flux.Fquy,<sp/>XModel.blocks.outZone[0]);</highlight></codeline>
<codeline lineno="5376"><highlight class="normal"></highlight></codeline>
<codeline lineno="5377"><highlight class="normal"><sp/><sp/><sp/><sp/>defncvarBUQ(XParam,<sp/>XModel.blocks.active,<sp/>XModel.blocks.level,<sp/>XModel.blocks.xo,<sp/>XModel.blocks.yo,<sp/></highlight><highlight class="stringliteral">&quot;Fqvx&quot;</highlight><highlight class="normal">,<sp/>3,<sp/>XModel.flux.Fqvx,<sp/>XModel.blocks.outZone[0]);</highlight></codeline>
<codeline lineno="5378"><highlight class="normal"><sp/><sp/><sp/><sp/>defncvarBUQ(XParam,<sp/>XModel.blocks.active,<sp/>XModel.blocks.level,<sp/>XModel.blocks.xo,<sp/>XModel.blocks.yo,<sp/></highlight><highlight class="stringliteral">&quot;Fqvy&quot;</highlight><highlight class="normal">,<sp/>3,<sp/>XModel.flux.Fqvy,<sp/>XModel.blocks.outZone[0]);</highlight></codeline>
<codeline lineno="5379"><highlight class="normal"></highlight></codeline>
<codeline lineno="5380"><highlight class="normal"></highlight></codeline>
<codeline lineno="5381"><highlight class="normal"><sp/><sp/><sp/><sp/>defncvarBUQ(XParam,<sp/>XModel.blocks.active,<sp/>XModel.blocks.level,<sp/>XModel.blocks.xo,<sp/>XModel.blocks.yo,<sp/></highlight><highlight class="stringliteral">&quot;Su&quot;</highlight><highlight class="normal">,<sp/>3,<sp/>XModel.flux.Su,<sp/>XModel.blocks.outZone[0]);</highlight></codeline>
<codeline lineno="5382"><highlight class="normal"><sp/><sp/><sp/><sp/>defncvarBUQ(XParam,<sp/>XModel.blocks.active,<sp/>XModel.blocks.level,<sp/>XModel.blocks.xo,<sp/>XModel.blocks.yo,<sp/></highlight><highlight class="stringliteral">&quot;Sv&quot;</highlight><highlight class="normal">,<sp/>3,<sp/>XModel.flux.Sv,<sp/>XModel.blocks.outZone[0]);</highlight></codeline>
<codeline lineno="5383"><highlight class="normal"></highlight></codeline>
<codeline lineno="5384"><highlight class="normal"></highlight></codeline>
<codeline lineno="5385"><highlight class="normal"><sp/><sp/><sp/><sp/>defncvarBUQ(XParam,<sp/>XModel.blocks.active,<sp/>XModel.blocks.level,<sp/>XModel.blocks.xo,<sp/>XModel.blocks.yo,<sp/></highlight><highlight class="stringliteral">&quot;dh&quot;</highlight><highlight class="normal">,<sp/>3,<sp/>XModel.adv.dh,<sp/>XModel.blocks.outZone[0]);</highlight></codeline>
<codeline lineno="5386"><highlight class="normal"><sp/><sp/><sp/><sp/>defncvarBUQ(XParam,<sp/>XModel.blocks.active,<sp/>XModel.blocks.level,<sp/>XModel.blocks.xo,<sp/>XModel.blocks.yo,<sp/></highlight><highlight class="stringliteral">&quot;dhu&quot;</highlight><highlight class="normal">,<sp/>3,<sp/>XModel.adv.dhu,<sp/>XModel.blocks.outZone[0]);</highlight></codeline>
<codeline lineno="5387"><highlight class="normal"><sp/><sp/><sp/><sp/>defncvarBUQ(XParam,<sp/>XModel.blocks.active,<sp/>XModel.blocks.level,<sp/>XModel.blocks.xo,<sp/>XModel.blocks.yo,<sp/></highlight><highlight class="stringliteral">&quot;dhv&quot;</highlight><highlight class="normal">,<sp/>3,<sp/>XModel.adv.dhv,<sp/>XModel.blocks.outZone[0]);</highlight></codeline>
<codeline lineno="5388"><highlight class="normal"></highlight></codeline>
<codeline lineno="5389"><highlight class="normal"><sp/><sp/><sp/><sp/>writenctimestep(XParam.outfile,<sp/>XLoop.totaltime<sp/>+<sp/>XLoop.dt);</highlight></codeline>
<codeline lineno="5390"><highlight class="normal"></highlight></codeline>
<codeline lineno="5391"><highlight class="normal"></highlight></codeline>
<codeline lineno="5392"><highlight class="normal"><sp/><sp/><sp/><sp/>outvar<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;h&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5393"><highlight class="normal"><sp/><sp/><sp/><sp/>writencvarstepBUQ(XParam,<sp/>3,<sp/>XModel.blocks.active,<sp/>XModel.blocks.level,<sp/>XModel.blocks.xo,<sp/>XModel.blocks.yo,<sp/>outvar,<sp/>XModel.OutputVarMap[outvar],<sp/>XModel.blocks.outZone[0]);</highlight></codeline>
<codeline lineno="5394"><highlight class="normal"></highlight></codeline>
<codeline lineno="5395"><highlight class="normal"><sp/><sp/><sp/><sp/>outvar<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;zs&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5396"><highlight class="normal"><sp/><sp/><sp/><sp/>writencvarstepBUQ(XParam,<sp/>3,<sp/>XModel.blocks.active,<sp/>XModel.blocks.level,<sp/>XModel.blocks.xo,<sp/>XModel.blocks.yo,<sp/>outvar,<sp/>XModel.OutputVarMap[outvar],<sp/>XModel.blocks.outZone[0]);</highlight></codeline>
<codeline lineno="5397"><highlight class="normal"><sp/><sp/><sp/><sp/>outvar<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;u&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5398"><highlight class="normal"><sp/><sp/><sp/><sp/>writencvarstepBUQ(XParam,<sp/>3,<sp/>XModel.blocks.active,<sp/>XModel.blocks.level,<sp/>XModel.blocks.xo,<sp/>XModel.blocks.yo,<sp/>outvar,<sp/>XModel.OutputVarMap[outvar],<sp/>XModel.blocks.outZone[0]);</highlight></codeline>
<codeline lineno="5399"><highlight class="normal"><sp/><sp/><sp/><sp/>outvar<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;v&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5400"><highlight class="normal"><sp/><sp/><sp/><sp/>writencvarstepBUQ(XParam,<sp/>3,<sp/>XModel.blocks.active,<sp/>XModel.blocks.level,<sp/>XModel.blocks.xo,<sp/>XModel.blocks.yo,<sp/>outvar,<sp/>XModel.OutputVarMap[outvar],<sp/>XModel.blocks.outZone[0]);</highlight></codeline>
<codeline lineno="5401"><highlight class="normal"></highlight></codeline>
<codeline lineno="5402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5403"><highlight class="normal"></highlight></codeline>
<codeline lineno="5404"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestingOutput&lt;float&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structModel" kindref="compound">Model&lt;float&gt;</ref><sp/>XModel);</highlight></codeline>
<codeline lineno="5405"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestingOutput&lt;double&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structModel" kindref="compound">Model&lt;double&gt;</ref><sp/>XModel);</highlight></codeline>
<codeline lineno="5406"><highlight class="normal"></highlight></codeline>
<codeline lineno="5414"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>copyID2var(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;T&gt;</ref><sp/>XBlock,<sp/>T*<sp/>z)</highlight></codeline>
<codeline lineno="5415"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>0;<sp/>ibl<sp/>&lt;<sp/>XParam.nblk;<sp/>ibl++)</highlight></codeline>
<codeline lineno="5417"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>XBlock.active[ibl];</highlight></codeline>
<codeline lineno="5419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy<sp/>=<sp/>0;<sp/>iy<sp/>&lt;<sp/>XParam.blkwidth;<sp/>iy++)</highlight></codeline>
<codeline lineno="5420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>0;<sp/>ix<sp/>&lt;<sp/>XParam.blkwidth;<sp/>ix++)</highlight></codeline>
<codeline lineno="5422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>memloc(XParam,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="5424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z[n]<sp/>=<sp/>T(ib);</highlight></codeline>
<codeline lineno="5425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5427"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5428"><highlight class="normal"></highlight></codeline>
<codeline lineno="5429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5430"><highlight class="normal"></highlight></codeline>
<codeline lineno="5431"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>copyID2var&lt;float&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;float&gt;</ref><sp/>XBlock,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>z);</highlight></codeline>
<codeline lineno="5432"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>copyID2var&lt;double&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;double&gt;</ref><sp/>XBlock,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>z);</highlight></codeline>
<codeline lineno="5433"><highlight class="normal"></highlight></codeline>
<codeline lineno="5434"><highlight class="normal"></highlight></codeline>
<codeline lineno="5442"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>copyBlockinfo2var(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;T&gt;</ref><sp/>XBlock,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>blkinfo,<sp/>T*<sp/>z)</highlight></codeline>
<codeline lineno="5443"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>0;<sp/>ibl<sp/>&lt;<sp/>XParam.nblk;<sp/>ibl++)</highlight></codeline>
<codeline lineno="5445"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>XBlock.active[ibl];</highlight></codeline>
<codeline lineno="5447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>info<sp/>=<sp/>blkinfo[ib];</highlight></codeline>
<codeline lineno="5448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy<sp/>=<sp/>0;<sp/>iy<sp/>&lt;<sp/>XParam.blkwidth;<sp/>iy++)</highlight></codeline>
<codeline lineno="5449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>0;<sp/>ix<sp/>&lt;<sp/>XParam.blkwidth;<sp/>ix++)</highlight></codeline>
<codeline lineno="5451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>memloc(XParam,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="5453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z[n]<sp/>=<sp/>T(info);</highlight></codeline>
<codeline lineno="5454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5456"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5457"><highlight class="normal"></highlight></codeline>
<codeline lineno="5458"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5459"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>copyBlockinfo2var&lt;float&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;float&gt;</ref><sp/>XBlock,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>blkinfo,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>z);</highlight></codeline>
<codeline lineno="5460"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>copyBlockinfo2var&lt;double&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;double&gt;</ref><sp/>XBlock,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>blkinfo,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>z);</highlight></codeline>
<codeline lineno="5461"><highlight class="normal"></highlight></codeline>
<codeline lineno="5462"><highlight class="normal"></highlight></codeline>
<codeline lineno="5469"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CompareCPUvsGPU(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref><sp/>XModel,<sp/><ref refid="structModel" kindref="compound">Model&lt;T&gt;</ref><sp/>XModel_g,<sp/>std::vector&lt;std::string&gt;<sp/>varlist,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>checkhalo)</highlight></codeline>
<codeline lineno="5470"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5471"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structLoop" kindref="compound">Loop&lt;T&gt;</ref><sp/>XLoop;</highlight></codeline>
<codeline lineno="5472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>GPU<sp/>stuff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5473"><highlight class="normal"></highlight></codeline>
<codeline lineno="5474"><highlight class="normal"></highlight></codeline>
<codeline lineno="5475"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop.hugenegval<sp/>=<sp/>std::numeric_limits&lt;T&gt;::min();</highlight></codeline>
<codeline lineno="5476"><highlight class="normal"></highlight></codeline>
<codeline lineno="5477"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop.hugeposval<sp/>=<sp/>std::numeric_limits&lt;T&gt;::max();</highlight></codeline>
<codeline lineno="5478"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop.epsilon<sp/>=<sp/>std::numeric_limits&lt;T&gt;::epsilon();</highlight></codeline>
<codeline lineno="5479"><highlight class="normal"></highlight></codeline>
<codeline lineno="5480"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop.totaltime<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="5481"><highlight class="normal"></highlight></codeline>
<codeline lineno="5482"><highlight class="normal"><sp/><sp/><sp/><sp/>XLoop.nextoutputtime<sp/>=<sp/>3600.0;</highlight></codeline>
<codeline lineno="5483"><highlight class="normal"></highlight></codeline>
<codeline lineno="5484"><highlight class="normal"></highlight></codeline>
<codeline lineno="5485"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/>gpureceive;</highlight></codeline>
<codeline lineno="5486"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/>diff;</highlight></codeline>
<codeline lineno="5487"><highlight class="normal"></highlight></codeline>
<codeline lineno="5488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Forcing&lt;float&gt;<sp/>XForcing;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5489"><highlight class="normal"></highlight></codeline>
<codeline lineno="5490"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(XParam.nblkmem,<sp/>XParam.blksize,<sp/>gpureceive);</highlight></codeline>
<codeline lineno="5491"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocateCPU(XParam.nblkmem,<sp/>XParam.blksize,<sp/>diff);</highlight></codeline>
<codeline lineno="5492"><highlight class="normal"></highlight></codeline>
<codeline lineno="5493"><highlight class="normal"></highlight></codeline>
<codeline lineno="5494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//============================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compare<sp/>gradients<sp/>for<sp/>evolving<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5496"><highlight class="normal"></highlight></codeline>
<codeline lineno="5497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>difference</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//diffArray(XParam,<sp/>XLoop,<sp/>XModel.blocks,<sp/>XModel.evolv.h,<sp/>XModel_g.evolv.h,<sp/>XModel.evolv_o.u);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5500"><highlight class="comment"><sp/><sp/><sp/><sp/>creatncfileBUQ(XParam,<sp/>XModel.blocks);</highlight></codeline>
<codeline lineno="5501"><highlight class="comment"></highlight></codeline>
<codeline lineno="5502"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>ivar<sp/>=<sp/>0;<sp/>ivar<sp/>&lt;<sp/>varlist.size();<sp/>ivar++)</highlight></codeline>
<codeline lineno="5503"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5504"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defncvarBUQ(XParam,<sp/>XModel.blocks.active,<sp/>XModel.blocks.level,<sp/>XModel.blocks.xo,<sp/>XModel.blocks.yo,<sp/>varlist[ivar],<sp/>3,<sp/>XModel.OutputVarMap[varlist[ivar]],<sp/>XModel.blocks.outZone[0]);</highlight></codeline>
<codeline lineno="5505"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5506"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5508"><highlight class="comment"><sp/><sp/><sp/><sp/>std::string<sp/>varname<sp/>=<sp/>&quot;dt&quot;;</highlight></codeline>
<codeline lineno="5509"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(abs(dtgpu<sp/>-<sp/>dtcpu)<sp/>&lt;<sp/>(XLoop.epsilon<sp/>*<sp/>2))</highlight></codeline>
<codeline lineno="5510"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5511"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(varname<sp/>+<sp/>&quot;<sp/>PASS&quot;);</highlight></codeline>
<codeline lineno="5512"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5513"><highlight class="comment"><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="5514"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5515"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(varname<sp/>+<sp/>&quot;<sp/>FAIL:<sp/>&quot;<sp/>+<sp/>&quot;<sp/>GPU(&quot;<sp/>+<sp/>std::to_string(dtgpu)<sp/>+<sp/>&quot;)<sp/>-<sp/>CPU(&quot;+std::to_string(dtcpu)<sp/>+&quot;)<sp/>=<sp/><sp/>difference:<sp/>&quot;+<sp/><sp/>std::to_string(abs(dtgpu<sp/>-<sp/>dtcpu))<sp/>+<sp/>&quot;<sp/>Eps:<sp/>&quot;<sp/>+<sp/>std::to_string(XLoop.epsilon));</highlight></codeline>
<codeline lineno="5516"><highlight class="comment"></highlight></codeline>
<codeline lineno="5517"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5518"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Check<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ivar<sp/>=<sp/>0;<sp/>ivar<sp/>&lt;<sp/>varlist.size();<sp/>ivar++)</highlight></codeline>
<codeline lineno="5521"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diffArray(XParam,<sp/>XModel.blocks,<sp/>varlist[ivar],<sp/>checkhalo,<sp/>XModel.OutputVarMap[varlist[ivar]],<sp/>XModel_g.OutputVarMap[varlist[ivar]],<sp/>gpureceive,<sp/>diff);</highlight></codeline>
<codeline lineno="5523"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5524"><highlight class="normal"></highlight></codeline>
<codeline lineno="5525"><highlight class="normal"></highlight></codeline>
<codeline lineno="5526"><highlight class="normal"></highlight></codeline>
<codeline lineno="5527"><highlight class="normal"><sp/><sp/><sp/><sp/>free(gpureceive);</highlight></codeline>
<codeline lineno="5528"><highlight class="normal"><sp/><sp/><sp/><sp/>free(diff);</highlight></codeline>
<codeline lineno="5529"><highlight class="normal"></highlight></codeline>
<codeline lineno="5530"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5531"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CompareCPUvsGPU&lt;float&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structModel" kindref="compound">Model&lt;float&gt;</ref><sp/>XModel,<sp/><ref refid="structModel" kindref="compound">Model&lt;float&gt;</ref><sp/>XModel_g,<sp/>std::vector&lt;std::string&gt;<sp/>varlist,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>checkhalo);</highlight></codeline>
<codeline lineno="5532"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CompareCPUvsGPU&lt;double&gt;(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structModel" kindref="compound">Model&lt;double&gt;</ref><sp/>XModel,<sp/><ref refid="structModel" kindref="compound">Model&lt;double&gt;</ref><sp/>XModel_g,<sp/>std::vector&lt;std::string&gt;<sp/>varlist,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>checkhalo);</highlight></codeline>
<codeline lineno="5533"><highlight class="normal"></highlight></codeline>
<codeline lineno="5534"><highlight class="normal"></highlight></codeline>
<codeline lineno="5540"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>diffdh(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;T&gt;</ref><sp/>XBlock,<sp/>T*<sp/>input,<sp/>T*<sp/>output,<sp/>T*<sp/>shuffle)</highlight></codeline>
<codeline lineno="5541"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iright,<sp/>itop;</highlight></codeline>
<codeline lineno="5543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>0;<sp/>ibl<sp/>&lt;<sp/>XParam.nblk;<sp/>ibl++)</highlight></codeline>
<codeline lineno="5544"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;bl=%d\tblockxo[bl]=%f\tblockyo[bl]=%f\n&quot;,<sp/>bl,<sp/>blockxo[bl],<sp/>blockyo[bl]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>XBlock.active[ibl];</highlight></codeline>
<codeline lineno="5547"><highlight class="normal"></highlight></codeline>
<codeline lineno="5548"><highlight class="normal"></highlight></codeline>
<codeline lineno="5549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy<sp/>=<sp/>0;<sp/>iy<sp/>&lt;<sp/>XParam.blkwidth;<sp/>iy++)</highlight></codeline>
<codeline lineno="5550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>0;<sp/>ix<sp/>&lt;<sp/>XParam.blkwidth;<sp/>ix++)</highlight></codeline>
<codeline lineno="5552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>memloc(XParam.halowidth,<sp/>XParam.blkmemwidth,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="5554"><highlight class="normal"></highlight></codeline>
<codeline lineno="5555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iright<sp/>=<sp/>memloc(XParam.halowidth,<sp/>XParam.blkmemwidth,<sp/>ix<sp/>+<sp/>1,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="5556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itop<sp/>=<sp/>memloc(XParam.halowidth,<sp/>XParam.blkmemwidth,<sp/>ix,<sp/>iy<sp/>+<sp/>1,<sp/>ib);</highlight></codeline>
<codeline lineno="5557"><highlight class="normal"></highlight></codeline>
<codeline lineno="5558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output[i]<sp/>=<sp/>input[iright]<sp/>-<sp/>input[i];</highlight></codeline>
<codeline lineno="5559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shuffle[i]<sp/>=<sp/>input[iright];</highlight></codeline>
<codeline lineno="5560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5562"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5564"><highlight class="normal"></highlight></codeline>
<codeline lineno="5570"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>diffSource(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;T&gt;</ref><sp/>XBlock,<sp/>T*<sp/>Fqux,<sp/>T*<sp/>Su,<sp/>T*<sp/>output)</highlight></codeline>
<codeline lineno="5571"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iright,<sp/>itop;</highlight></codeline>
<codeline lineno="5573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>0;<sp/>ibl<sp/>&lt;<sp/>XParam.nblk;<sp/>ibl++)</highlight></codeline>
<codeline lineno="5574"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;bl=%d\tblockxo[bl]=%f\tblockyo[bl]=%f\n&quot;,<sp/>bl,<sp/>blockxo[bl],<sp/>blockyo[bl]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>XBlock.active[ibl];</highlight></codeline>
<codeline lineno="5577"><highlight class="normal"></highlight></codeline>
<codeline lineno="5578"><highlight class="normal"></highlight></codeline>
<codeline lineno="5579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy<sp/>=<sp/>0;<sp/>iy<sp/>&lt;<sp/>XParam.blkwidth;<sp/>iy++)</highlight></codeline>
<codeline lineno="5580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>0;<sp/>ix<sp/>&lt;<sp/>XParam.blkwidth;<sp/>ix++)</highlight></codeline>
<codeline lineno="5582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>memloc(XParam.halowidth,<sp/>XParam.blkmemwidth,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="5584"><highlight class="normal"></highlight></codeline>
<codeline lineno="5585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iright<sp/>=<sp/>memloc(XParam.halowidth,<sp/>XParam.blkmemwidth,<sp/>ix<sp/>+<sp/>1,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="5586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itop<sp/>=<sp/>memloc(XParam.halowidth,<sp/>XParam.blkmemwidth,<sp/>ix,<sp/>iy<sp/>+<sp/>1,<sp/>ib);</highlight></codeline>
<codeline lineno="5587"><highlight class="normal"></highlight></codeline>
<codeline lineno="5588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output[i]<sp/>=<sp/>Fqux[i]<sp/>-<sp/>Su[iright];</highlight></codeline>
<codeline lineno="5589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//shuffle[i]<sp/>=<sp/>input[iright];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5592"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5593"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5594"><highlight class="normal"></highlight></codeline>
<codeline lineno="5600"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>diffArray(<ref refid="classParam" kindref="compound">Param</ref><sp/>XParam,<sp/><ref refid="structBlockP" kindref="compound">BlockP&lt;T&gt;</ref><sp/>XBlock,<sp/>std::string<sp/>varname,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>checkhalo,<sp/>T*<sp/>cpu,<sp/>T*<sp/>gpu,<sp/>T*<sp/>dummy,<sp/>T*<sp/>out)</highlight></codeline>
<codeline lineno="5601"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5602"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>diff,<sp/>maxdiff,<sp/>rmsdiff;</highlight></codeline>
<codeline lineno="5603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nit<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ixmd,<sp/>iymd,<sp/>ibmd;</highlight></codeline>
<codeline lineno="5605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//copy<sp/>GPU<sp/>back<sp/>to<sp/>the<sp/>CPU<sp/>(store<sp/>in<sp/>dummy)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5606"><highlight class="normal"><sp/><sp/><sp/><sp/>CopyGPUtoCPU(XParam.nblkmem,<sp/>XParam.blksize,<sp/>dummy,<sp/>gpu);</highlight></codeline>
<codeline lineno="5607"><highlight class="normal"></highlight></codeline>
<codeline lineno="5608"><highlight class="normal"></highlight></codeline>
<codeline lineno="5609"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>hugeposval<sp/>=<sp/>std::numeric_limits&lt;T&gt;::max();</highlight></codeline>
<codeline lineno="5610"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>hugenegval<sp/>=<sp/>T(-1.0)<sp/>*<sp/>hugeposval;</highlight></codeline>
<codeline lineno="5611"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>epsilon<sp/>=<sp/>std::numeric_limits&lt;T&gt;::epsilon();</highlight></codeline>
<codeline lineno="5612"><highlight class="normal"></highlight></codeline>
<codeline lineno="5613"><highlight class="normal"><sp/><sp/><sp/><sp/>rmsdiff<sp/>=<sp/>T(0.0);</highlight></codeline>
<codeline lineno="5614"><highlight class="normal"><sp/><sp/><sp/><sp/>maxdiff<sp/>=<sp/>hugenegval;</highlight></codeline>
<codeline lineno="5615"><highlight class="normal"><sp/><sp/><sp/><sp/>ixmd<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5616"><highlight class="normal"><sp/><sp/><sp/><sp/>iymd<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5617"><highlight class="normal"><sp/><sp/><sp/><sp/>ibmd<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5618"><highlight class="normal"></highlight></codeline>
<codeline lineno="5619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>difference</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibl<sp/>=<sp/>0;<sp/>ibl<sp/>&lt;<sp/>XParam.nblk;<sp/>ibl++)</highlight></codeline>
<codeline lineno="5621"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;bl=%d\tblockxo[bl]=%f\tblockyo[bl]=%f\n&quot;,<sp/>bl,<sp/>blockxo[bl],<sp/>blockyo[bl]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>XBlock.active[ibl];</highlight></codeline>
<codeline lineno="5624"><highlight class="normal"></highlight></codeline>
<codeline lineno="5625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yst<sp/>=<sp/>checkhalo<sp/>?<sp/>-1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="5626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ynd<sp/>=<sp/>checkhalo<sp/>?<sp/>XParam.blkwidth<sp/>+<sp/>1<sp/>:<sp/>XParam.blkwidth;</highlight></codeline>
<codeline lineno="5627"><highlight class="normal"></highlight></codeline>
<codeline lineno="5628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xst<sp/>=<sp/>checkhalo<sp/>?<sp/>-1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="5629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xnd<sp/>=<sp/>checkhalo<sp/>?<sp/>XParam.blkwidth<sp/>+<sp/>1<sp/>:<sp/>XParam.blkwidth;</highlight></codeline>
<codeline lineno="5630"><highlight class="normal"></highlight></codeline>
<codeline lineno="5631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy<sp/>=<sp/>yst;<sp/>iy<sp/>&lt;<sp/>ynd;<sp/>iy++)</highlight></codeline>
<codeline lineno="5632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>xst;<sp/>ix<sp/>&lt;<sp/>xnd;<sp/>ix++)</highlight></codeline>
<codeline lineno="5634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>memloc(XParam,<sp/>ix,<sp/>iy,<sp/>ib);</highlight></codeline>
<codeline lineno="5636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diff<sp/>=<sp/>dummy[n]<sp/>-<sp/>cpu[n];</highlight></codeline>
<codeline lineno="5637"><highlight class="normal"></highlight></codeline>
<codeline lineno="5638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(diff)<sp/>&gt;=<sp/>maxdiff)</highlight></codeline>
<codeline lineno="5639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxdiff<sp/>=<sp/>utils::max(abs(diff),<sp/>maxdiff);</highlight></codeline>
<codeline lineno="5641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ixmd<sp/>=<sp/>ix;</highlight></codeline>
<codeline lineno="5642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iymd<sp/>=<sp/>iy;</highlight></codeline>
<codeline lineno="5643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ibmd<sp/>=<sp/>ib;</highlight></codeline>
<codeline lineno="5644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5645"><highlight class="normal"></highlight></codeline>
<codeline lineno="5646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rmsdiff<sp/>=<sp/>rmsdiff<sp/>+<sp/>utils::sq(diff);</highlight></codeline>
<codeline lineno="5647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nit++;</highlight></codeline>
<codeline lineno="5648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[n]<sp/>=<sp/>diff;</highlight></codeline>
<codeline lineno="5649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5651"><highlight class="normal"></highlight></codeline>
<codeline lineno="5652"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5653"><highlight class="normal"></highlight></codeline>
<codeline lineno="5654"><highlight class="normal"></highlight></codeline>
<codeline lineno="5655"><highlight class="normal"><sp/><sp/><sp/><sp/>rmsdiff<sp/>=<sp/>rmsdiff<sp/>/<sp/>nit;</highlight></codeline>
<codeline lineno="5656"><highlight class="normal"></highlight></codeline>
<codeline lineno="5657"><highlight class="normal"></highlight></codeline>
<codeline lineno="5658"><highlight class="normal"></highlight></codeline>
<codeline lineno="5659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxdiff<sp/>&lt;=<sp/>T(10000.0)<sp/>*<sp/>(epsilon))</highlight></codeline>
<codeline lineno="5660"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(varname<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>PASS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5662"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5664"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>creatncfileBUQ(XParam,<sp/>XBlock);</highlight></codeline>
<codeline lineno="5666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(varname<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>FAIL:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Max<sp/>difference:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(maxdiff)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(at:<sp/>ix<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(ixmd)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>iy<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(iymd)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>ib<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(ibmd)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>RMS<sp/>difference:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(rmsdiff)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Eps:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(epsilon));</highlight></codeline>
<codeline lineno="5667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defncvarBUQ(XParam,<sp/>XBlock.active,<sp/>XBlock.level,<sp/>XBlock.xo,<sp/>XBlock.yo,<sp/>varname<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_CPU&quot;</highlight><highlight class="normal">,<sp/>3,<sp/>cpu,<sp/>XBlock.outZone[0]);</highlight></codeline>
<codeline lineno="5668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defncvarBUQ(XParam,<sp/>XBlock.active,<sp/>XBlock.level,<sp/>XBlock.xo,<sp/>XBlock.yo,<sp/>varname<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_GPU&quot;</highlight><highlight class="normal">,<sp/>3,<sp/>dummy,<sp/>XBlock.outZone[0]);</highlight></codeline>
<codeline lineno="5669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defncvarBUQ(XParam,<sp/>XBlock.active,<sp/>XBlock.level,<sp/>XBlock.xo,<sp/>XBlock.yo,<sp/>varname<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_diff&quot;</highlight><highlight class="normal">,<sp/>3,<sp/>out,<sp/>XBlock.outZone[0]);</highlight></codeline>
<codeline lineno="5670"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5671"><highlight class="normal"></highlight></codeline>
<codeline lineno="5672"><highlight class="normal"></highlight></codeline>
<codeline lineno="5673"><highlight class="normal"></highlight></codeline>
<codeline lineno="5674"><highlight class="normal"></highlight></codeline>
<codeline lineno="5675"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5676"><highlight class="normal"></highlight></codeline>
<codeline lineno="5677"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/Testing.cu"/>
  </compounddef>
</doxygen>
